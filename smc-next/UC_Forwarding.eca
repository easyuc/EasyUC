(* UC_Forwarding.ec *)

(* Ideal Forwarding Functionality *)

(* This is a singleton unit, consisting of an ideal forwarding
   functionality. It implements authenticated forwarding (Fauth),
   where the adversary is asked to approve the forwarding of a value,
   but may not corrupt either the value or its destination/source *)

prover quorum=2 ["Alt-Ergo" "Z3"].

require import UCCore.

(* begin theory parameters *)

op _adv_if_pi : int.  (* port index of adversary that ideal functionality
                         communicates with *)

axiom _adv_if_pi_gt0 : 0 < _adv_if_pi.

(* end theory parameters *)

require UC__Forwarding.  (* code for singleton unit consisting of
                            ideal functionality *)
clone import UC__Forwarding as UC__Code with
  op _adv_if_pi <- _adv_if_pi
proof *.
realize _adv_if_pi_gt0. smt(_adv_if_pi_gt0). qed.

import UC__IF.

(* termination metric and proof *)

op term_metric_max : int = 2.

(* FIXME when better glob type

   print glob UC_Forw:

   1: UC_Forw._st   : _state
   2: UC_Forw._adv  : addr
   3: UC_Forw._self : addr *)

op term_metric (g : glob UC_Forw) : int =
     match g.`1 with
     | _State_Init       => 2
     | _State_Wait _ _ _ => 1
     | _State_Final      => 0
     end.

lemma ge0_term_metric (g : glob UC_Forw) : 0 <= term_metric g.
proof.
rewrite /term_metric.
smt().
qed.

lemma init :
  equiv
  [UC_Forw.init ~ UC_Forw.init :
   ={self_, adv_} ==> ={res, glob UC_Forw}].
proof.
proc; auto.
qed.

lemma term_init :
  equiv
  [UC_Forw.init ~ UC_Forw.init :
   ={self_, adv_} ==>
   ={res, glob UC_Forw} /\
   term_metric (glob UC_Forw){1} = term_metric_max].
proof.
proc; auto.
qed.

lemma term_invoke (n : int) :
  equiv
  [UC_Forw.invoke ~ UC_Forw.invoke :
   ={m, glob UC_Forw} /\
   term_metric (glob UC_Forw){1} = n ==>
   ={res, glob UC_Forw} /\
   (res{1} = None \/ term_metric (glob UC_Forw){1} < n)].
proof.
proc; sp 1 1.
if => //.
inline UC_Forw.parties.
sp 2 2.
match => //.
match => //.
auto.
move => x x'.
if; first move => /> /#.
auto => /> /#.
auto.
move => pt1 pt2 u pt1' pt2' u'.
match => //.
auto.
move => x x'.
if => //.
auto.
auto.
auto.
qed.

(* phoare lemmas for invoke *)

pred forw_invoke_init_fw_req (self adv : addr, m : msg) =
  is_valid UC_FwDir.D.epdp_fw_req m /\
  (oget (UC_FwDir.D.epdp_fw_req.`dec m)).`UC_FwDir.D.fw_req___func = self /\
  envport self adv (oget (UC_FwDir.D.dec_fw_req m)).`UC_FwDir.D.fw_req__pt1 /\
  envport self adv (oget (UC_FwDir.D.dec_fw_req m)).`UC_FwDir.D.fw_req__pt2.

lemma UC_Forw_invoke_init_fw_req (m' : msg) :
  phoare
  [UC_Forw.invoke :
   m' = m /\ UC_Forw._st = _State_Init /\
   forw_invoke_init_fw_req UC_Forw._self UC_Forw._adv m ==>
   let fwr = oget (UC_FwDir.D.dec_fw_req m') in
   res =
   Some
   (UC_FwAdv.enc_fw_obs
    {|UC_FwAdv.fw_obs___func = fwr.`UC_FwDir.D.fw_req___func;
      UC_FwAdv.fw_obs___adv  = UC_Forw._adv;
      UC_FwAdv.fw_obs__pt1   = fwr.`UC_FwDir.D.fw_req__pt1;
      UC_FwAdv.fw_obs__pt2   = fwr.`UC_FwDir.D.fw_req__pt2;
      UC_FwAdv.fw_obs__u     = fwr.`UC_FwDir.D.fw_req__u|}) /\
   UC_Forw._st =
     _State_Wait fwr.`UC_FwDir.D.fw_req__pt1 fwr.`UC_FwDir.D.fw_req__pt2
     fwr.`UC_FwDir.D.fw_req__u /\
   envport UC_Forw._self UC_Forw._adv fwr.`UC_FwDir.D.fw_req__pt2] = 1%r.
proof.
proc.
sp 1.
rcondt 1; first auto; smt(UC_FwDir.D.eq_of_valid_fw_req).
inline UC_Forw.parties.
sp 2.
match _State_Init 1; first auto; smt().
match Some 1.
auto => />; smt(some_oget).
rcondt 1; first auto; progress; smt().
auto.
auto => />; smt(oget_some).
qed.

lemma UC_Forw_invoke_init_bad :
  phoare
  [UC_Forw.invoke :
   UC_Forw._st = _State_Init /\
   ! forw_invoke_init_fw_req UC_Forw._self UC_Forw._adv m ==>
   res = None /\ UC_Forw._st = _State_Init] = 1%r.
proof.
proc.
sp 1.
if.
inline UC_Forw.parties.
sp 2.
match _State_Init 1; first auto; smt().
case (UC_FwDir.D.epdp_fw_req.`dec _m = None).
match None 1; first auto.
auto.
match Some 1; first auto; smt().
rcondf 1; first auto => />; smt(UC_FwDir.D.eq_of_valid_fw_req).
auto.
auto.
qed.

pred forw_invoke_wait_fw_ok (self adv : addr, pt2 : port, m : msg) =
  is_valid UC_FwAdv.epdp_fw_ok m /\
  (oget (UC_FwAdv.epdp_fw_ok.`dec m)).`UC_FwAdv.fw_ok___func = self /\
  (oget (UC_FwAdv.epdp_fw_ok.`dec m)).`UC_FwAdv.fw_ok___adv = adv /\
  (oget (UC_FwAdv.epdp_fw_ok.`dec m)).`UC_FwAdv.fw_ok___func = self /\
  envport self adv pt2.

lemma UC_Forw_invoke_wait_fw_ok (st' : _state, m' : msg) :
  phoare
  [UC_Forw.invoke :
   st' = UC_Forw._st /\ m' = m /\ get_as__State_Wait UC_Forw._st <> None /\
   forw_invoke_wait_fw_ok UC_Forw._self UC_Forw._adv
   (oget (get_as__State_Wait UC_Forw._st)).`2 m ==>
   let wait = oget (get_as__State_Wait st') in
   res =
   Some
   (UC_FwDir.D.epdp_fw_rsp.`enc
    {|UC_FwDir.D.fw_rsp___func = UC_Forw._self; UC_FwDir.D.fw_rsp__pt1 = wait.`1;
      UC_FwDir.D.fw_rsp__pt2 = wait.`2; UC_FwDir.D.fw_rsp__u = wait.`3|}) /\
   UC_Forw._st = _State_Final] = 1%r.
proof.
proc.
sp 1.
rcondt 1; first auto; smt(UC_FwAdv.eq_of_valid_fw_ok).
inline UC_Forw.parties.
sp 2.
match _State_Wait 1.
auto => |> &hr.
rewrite /get_as__State_Wait.
case st' => // pt1 pt2 u /= _.
by exists pt1 pt2 u.
match Some 1; first auto => |> &hr.
rewrite /get_as__State_Wait /= /#.
rcondt 1; first auto => |> &hr _ _.
by rewrite /forw_invoke_wait_fw_ok /get_as__State_Wait.
auto; by rewrite /get_as__State_Wait.
qed.

lemma UC_Forw_invoke_wait_bad (st' : _state) :
  phoare
  [UC_Forw.invoke :
   st' = UC_Forw._st /\ get_as__State_Wait UC_Forw._st <> None /\
   ! forw_invoke_wait_fw_ok UC_Forw._self UC_Forw._adv
     (oget (get_as__State_Wait UC_Forw._st)).`2 m ==>
   res = None /\ UC_Forw._st = st'] = 1%r.
proof.
proc.
sp 1.
if.
inline UC_Forw.parties.
sp 2.
match _State_Wait 1.
auto => /> &hr.
rewrite /get_as__State_Wait.
case st' => // pt1 pt2 u /= _ _.
by exists pt1 pt2 u.
case (UC_FwAdv.epdp_fw_ok.`dec _m = None).
match None 1; first auto.
auto.
match Some 1.
auto; progress.
exists (oget (UC_FwAdv.epdp_fw_ok.`dec m{hr})).
smt(some_oget).
if.
exfalso => &hr [#].
smt(oget_some UC_FwAdv.eq_of_valid_fw_ok).
auto.
auto.
qed.

lemma UC_Forw_invoke_final :
  phoare
  [UC_Forw.invoke :
   UC_Forw._st = _State_Final ==>
   res = None /\ UC_Forw._st = _State_Final] = 1%r.
proof.
proc.
sp 1.
if.
inline UC_Forw.parties.
sp 2.
match _State_Final 1; first auto; smt().
auto.
auto.
qed.
