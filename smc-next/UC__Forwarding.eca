(* UC__Forwarding.eca *)

(* Model for the machine-generated code for the singleton unit
   consisting of the Forwarding ideal functionality, generated from
   Forwarding.uc

   Should be required and cloned in UC_Forwarding.eca, which the user
   writes *)

require import UCBasicTypes.

(* begin theory parameters *)

op _adv_if_pi : int.  (* port index of adversary that ideal functionality
                         communicates with *)

axiom _adv_if_pi_gt0 : 0 < _adv_if_pi.

(* end theory parameters *)

(* basic direct interface *)

theory UC_FwDir'.

(* begin theory parameters *)

op pi : int.

(* end theory paramters *)

(* input message: request sent to port index pi of forwarding
   functionality: pt1 is asking to forward u to pt2

   pt1, pt2 and u are the names used in the UC DSL declaration of
   fw_req; because __ is not legal in UC DSL identifiers, and UC DSL
   identifiers may not begin or end with "_", we use it as a separator
   of UC DSL identifers in the generated code; note the extra "_" in
   fw_req___func, to avoid a possible conflict with legal UC DSL
   identifers *)

type fw_req =
  {fw_req___func : addr;   (* address of functionality - destination address *)
   fw_req__pt1   : port;   (* port requesting forwarding - source port *)
   (* data: *)
   fw_req__pt2   : port;   (* port being forwarded to *)
   fw_req__u     : univ}.  (* universe value to be forwarded *)

op _Forwarding = [0; 1; 2]. (* make these ascii encodings *)
op _fw_req = [3].
op _tag_fw_req = TagComposite _Forwarding _fw_req.

op enc_fw_req (x : fw_req) : msg =
  (Dir, (x.`fw_req___func, pi), x.`fw_req__pt1,
   _tag_fw_req,
   (epdp_pair_univ epdp_port_univ epdp_id).`enc
    (x.`fw_req__pt2, x.`fw_req__u)).

op nosmt [opaque] dec_fw_req (m : msg) : fw_req option =
  let (mod, pt1, pt2, tag, v) = m in
  let (pt1_1, pt1_2) = pt1
  in (mod = Adv \/ pt1_2 <> pi \/ tag <> _tag_fw_req) ?
     None :
     match (epdp_pair_univ epdp_port_univ epdp_id).`dec v with
     | None   => None
     | Some p =>
         let (pt2', u) = p
         in Some
            {|fw_req___func = pt1_1; fw_req__pt1 = pt2;
              fw_req__pt2 = pt2'; fw_req__u = u|}
     end.

op epdp_fw_req : (fw_req, msg) epdp = {|enc = enc_fw_req; dec = dec_fw_req|}.

lemma valid_epdp_fw_req : valid_epdp epdp_fw_req.
proof.
apply epdp_intro.
move => x.
rewrite /epdp_fw_req /= /dec_fw_req /enc_fw_req /= !epdp /=.
by case x.
move => [mod [pt1_1 pt1_2] pt2 tag v] u.
rewrite /epdp_fw_req /dec_fw_req /enc_fw_req /=.
case (mod = Adv \/ pt1_2 <> pi \/ tag <> _tag_fw_req) => //.
rewrite !negb_or /= not_adv.
move => [#] -> -> -> match_eq_some /=.
have val_v :
  (epdp_pair_univ epdp_port_univ epdp_id).`dec v =
  Some (u.`fw_req__pt2, u.`fw_req__u).
  move : match_eq_some.
  case ((epdp_pair_univ epdp_port_univ epdp_id).`dec v) => //.
  by case.
move : match_eq_some.
rewrite val_v /= => <- /=.
apply epdp_dec_enc => //.
rewrite !epdp.
qed.

hint simplify [eqtrue] valid_epdp_fw_req.
hint rewrite epdp : valid_epdp_fw_req.

lemma eq_of_valid_fw_req (m : msg) :
  is_valid epdp_fw_req m =>
  m =
  let x = oget (epdp_fw_req.`dec m) in
  (Dir,
   (x.`fw_req___func, pi),
   x.`fw_req__pt1,
   _tag_fw_req,
   (epdp_pair_univ epdp_port_univ epdp_id).`enc
    (x.`fw_req__pt2, x.`fw_req__u)).
proof.
rewrite /is_valid.
move => val_m.
have [] x : exists (x : fw_req), epdp_fw_req.`dec m = Some x.
  exists (oget (dec_fw_req m)); by rewrite -some_oget.
case x => x1 x2 x3 x4.
move => /(epdp_dec_enc _ _ _ valid_epdp_fw_req) <-.
by rewrite !epdp.
qed.

(* output message: response sent from port index pi of forwarding
   functionality to pt2, completing the forwarding of u that was
   requested by pt1

   pt2, pt1 and u are the names specified in the UC DSL declaration
   of fw_rsp *)

type fw_rsp =
  {fw_rsp___func : addr;   (* address of functionality - source address *)
   fw_rsp__pt2   : port;   (* port being forwarded to - destination port *)
   (* data: *)
   fw_rsp__pt1   : port;   (* port requesting forwarding *)
   fw_rsp__u     : univ}.  (* universe value to be forwarded *)

op enc_fw_rsp (x : fw_rsp) : msg =
  (Dir, x.`fw_rsp__pt2, (x.`fw_rsp___func, pi),
   0,  (* no messages from which this must be distinct *)
   (epdp_pair_univ epdp_port_univ epdp_id).`enc (x.`fw_rsp__pt1, x.`fw_rsp__u)).

op nosmt dec_fw_rsp (m : msg) : fw_rsp option =
  let (mod, pt1, pt2, tag, v) = m
  in (mod = Adv \/ pt2.`2 <> pi \/ tag <> 0) ?
     None :
     match (epdp_pair_univ epdp_port_univ epdp_id).`dec v with
     | None   => None
     | Some p =>
         let (pt1', u) = p
         in Some
            {|fw_rsp___func = pt2.`1; fw_rsp__pt1 = pt1';
              fw_rsp__pt2 = pt1; fw_rsp__u = u|}
     end.

op epdp_fw_rsp = {|enc = enc_fw_rsp; dec = dec_fw_rsp|}.

lemma valid_epdp_fw_rsp : valid_epdp epdp_fw_rsp.
proof.
apply epdp_intro.
move => x.
rewrite /epdp_fw_rsp /= /dec_fw_rsp /enc_fw_rsp /=
        !(epdp, epdp_sub) /=.
by case x.
move => [mod pt1 pt2 tag u] v.
rewrite /epdp_fw_rsp /dec_fw_rsp /enc_fw_rsp /=.
case (mod = Adv \/ pt2.`2 <> pi \/ tag <> 0) => //.
rewrite !negb_or /= not_adv => [#] -> pt2_2 -> match_eq_some /=.
have val_u :
  (epdp_pair_univ epdp_port_univ epdp_id).`dec u =
  Some (v.`fw_rsp__pt1, v.`fw_rsp__u).
  move : match_eq_some.
  case ((epdp_pair_univ epdp_port_univ epdp_id).`dec u) => //.
  by case.
move : match_eq_some.
rewrite val_u /= => <- /=.
split; first move : pt2_2; by case pt2.
by rewrite (epdp_dec_enc _ _ u) 1:!epdp_sub.
qed.

hint simplify [eqtrue] valid_epdp_fw_rsp.
hint rewrite epdp : valid_epdp_fw_rsp.

lemma eq_of_valid_fw_rsp (m : msg) :
  is_valid epdp_fw_rsp m =>
  m =
  let x = oget (epdp_fw_rsp.`dec m) in
  (Dir,
   x.`fw_rsp__pt2,
   (x.`fw_rsp___func, pi),
   0,
   (epdp_pair_univ epdp_port_univ epdp_id).`enc
    (x.`fw_rsp__pt1, x.`fw_rsp__u)).
proof.
rewrite /is_valid.
move => val_m.
have [] x : exists (x : fw_rsp), epdp_fw_rsp.`dec m = Some x.
  exists (oget (dec_fw_rsp m)); by rewrite -some_oget.
case x => x1 x2 x3 x4.
move => /(epdp_dec_enc _ _ _ valid_epdp_fw_rsp) <-.
by rewrite !epdp.
qed.

end UC_FwDir'.

theory UC_FwDir.  (* composite direct interface *)

clone UC_FwDir' as D with
  op pi = 1
proof *.  (* nothing to prove *)

end UC_FwDir.

(* basic adversarial interface *)

theory UC_FwAdv.

op pi : int = 2.  (* because not included in composite interface,
                     we don't make this a paramter *)

(* message from forwarding functionality to adversary, letting it
   observe that the functionality is proposing to forward u to
   pt2 on behalf of pt1

   pt1, pt2 and u are the identifiers occurring in the UC DSL
   declaration of fw_obs *)

type fw_obs =
  {fw_obs___func : addr;   (* address of functionality - source address *)
   fw_obs___adv  : addr;   (* address of adversary - destination address *)
   (* data: *)
   fw_obs__pt1   : port;   (* port requesting forwarding *)
   fw_obs__pt2   : port;   (* port being forwarded to *)
   fw_obs__u     : univ}.  (* universe value to be forwarded *)

op enc_fw_obs (x : fw_obs) : msg =
  (Adv, (x.`fw_obs___adv, _adv_if_pi), (x.`fw_obs___func, pi),
   0,  (* no messages from which this must be distinct *)
   (epdp_tuple3_univ epdp_port_univ epdp_port_univ epdp_id).`enc
    (x.`fw_obs__pt1, x.`fw_obs__pt2, x.`fw_obs__u)).

op nosmt dec_fw_obs (m : msg) : fw_obs option =
  let (mod, pt1, pt2, tag, v) = m
  in (mod = Dir \/ pt1.`2 <> _adv_if_pi \/ pt2.`2 <> pi \/ tag <> 0) ?
     None :
     match (epdp_tuple3_univ epdp_port_univ epdp_port_univ
            epdp_id).`dec v with
     | None   => None
     | Some t =>
         let (pt1', pt2', u) = t
         in Some
            {|fw_obs___func = pt2.`1; fw_obs___adv = pt1.`1;
              fw_obs__pt1 = pt1'; fw_obs__pt2 = pt2'; fw_obs__u = u|}
     end.

op epdp_fw_obs = {|enc = enc_fw_obs; dec = dec_fw_obs|}.

lemma valid_epdp_fw_obs : valid_epdp epdp_fw_obs.
proof.
apply epdp_intro.
move => x.
rewrite /epdp_fw_obs /= /dec_fw_obs /enc_fw_obs /=
        !(epdp, epdp_sub) /=.
by case x.
move => [mod pt1 pt2 tag u] v.
rewrite /epdp_fw_obs /dec_fw_obs /enc_fw_obs /=.
case (mod = Dir \/ pt1.`2 <> _adv_if_pi \/ pt2.`2 <> pi \/ tag <> 0) => //.
rewrite !negb_or /= not_dir => [#] -> pt1_2 pt2_2 -> match_eq_some /=.
have val_u :
  (epdp_tuple3_univ epdp_port_univ epdp_port_univ epdp_id).`dec u =
  Some (v.`fw_obs__pt1, v.`fw_obs__pt2, v.`fw_obs__u).
  move : match_eq_some.
  case ((epdp_tuple3_univ epdp_port_univ epdp_port_univ epdp_id).`dec u) => //.
  by case.
move : match_eq_some.
rewrite val_u /= => <- /=.
split; first move : pt1_2; by case pt1.
split; first move : pt2_2; by case pt2.
by rewrite (epdp_dec_enc _ _ u) 1:!epdp_sub.
qed.

hint simplify [eqtrue] valid_epdp_fw_obs.
hint rewrite epdp : valid_epdp_fw_obs.

lemma eq_of_valid_fw_obs (m : msg) :
  is_valid epdp_fw_obs m =>
  m =
  let x = oget (epdp_fw_obs.`dec m) in
  (Adv,
   (x.`fw_obs___adv, _adv_if_pi),
   (x.`fw_obs___func, pi),
   0,
   (epdp_tuple3_univ epdp_port_univ epdp_port_univ epdp_id).`enc
    (x.`fw_obs__pt1, x.`fw_obs__pt2, x.`fw_obs__u)).
proof.
rewrite /is_valid.
move => val_m.
have [] x : exists (x : fw_obs), epdp_fw_obs.`dec m = Some x.
  exists (oget (dec_fw_obs m)); by rewrite -some_oget.
case x => x1 x2 x3 x4 x5.
move => /(epdp_dec_enc _ _ _ valid_epdp_fw_obs) <-.
by rewrite !epdp.
qed.

(* message from adversary telling forwarding functionality it may
   proceed with forwarding

   compare with the UC DSL declaration of fw_ok, which has no
   arguments; note the extra "_"s in fw_ok__func and fw_ok__adv, to
   avoid legal UC DSL identifers *)

type fw_ok =
  {fw_ok___func : addr;  (* address of functionality - destination address *)
   fw_ok___adv  : addr   (* address of adversary - source address *)
   (* data: (none) *)
  }.

op enc_fw_ok (x : fw_ok) : msg =
  (Adv, (x.`fw_ok___func, pi), (x.`fw_ok___adv, _adv_if_pi),
   0,  (* no messages from which this must be distinct *)
   epdp_unit_univ.`enc ()).

op nosmt dec_fw_ok (m : msg) : fw_ok option =
  let (mod, pt1, pt2, tag, v) = m
  in (mod = Dir \/ pt1.`2 <> pi \/ pt2.`2 <> _adv_if_pi \/ tag <> 0) ?
     None :
     match epdp_unit_univ.`dec v with
     | None   => None
     | Some _ => Some {|fw_ok___func = pt1.`1; fw_ok___adv = pt2.`1|}
     end.

op epdp_fw_ok = {|enc = enc_fw_ok; dec = dec_fw_ok|}.

lemma valid_epdp_fw_ok : valid_epdp epdp_fw_ok.
proof.
apply epdp_intro.
move => x.
rewrite /epdp_fw_ok /= /dec_fw_ok /enc_fw_ok /=
        !(epdp, epdp_sub) /=.
by case x.
move => [mod pt1 pt2 tag u] v.
rewrite /epdp_fw_ok /dec_fw_ok /enc_fw_ok /=.
case (mod = Dir \/ pt1.`2 <> pi \/ pt2.`2 <> _adv_if_pi \/ tag <> 0) => //.
rewrite !negb_or /= not_dir => [#] -> pt1_2 pt2_2 -> match_eq_some /=.
have val_u : epdp_unit_univ.`dec u = Some ().
  move : match_eq_some.
  case (epdp_unit_univ.`dec u) => //.
move : match_eq_some.
rewrite val_u /= => <- /=.
split; first move : pt1_2; by case pt1.
split; first move : pt2_2; by case pt2.
by rewrite (epdp_dec_enc _ _ u).
qed.

hint simplify [eqtrue] valid_epdp_fw_ok.
hint rewrite epdp : valid_epdp_fw_ok.

lemma eq_of_valid_fw_ok (m : msg) :
  is_valid epdp_fw_ok m =>
  m =
  let x = oget (epdp_fw_ok.`dec m) in
  (Adv,
   (x.`fw_ok___func, pi),
   (x.`fw_ok___adv, _adv_if_pi),
   0,
   epdp_unit_univ.`enc ()).
proof.
rewrite /is_valid.
move => val_m.
have [] x : exists (x : fw_ok), epdp_fw_ok.`dec m = Some x.
  exists (oget (dec_fw_ok m)); by rewrite -some_oget.
case x => x1 x2.
move => /(epdp_dec_enc _ _ _ valid_epdp_fw_ok) <-.
by rewrite !epdp.
qed.

end UC_FwAdv.

theory UC__IF.  (* ideal functionality *)

type _state = [
  | _State_Init
  | _State_Wait of port & port & univ
  | _State_Final
].

module UC_Forw = {  (* has module type UCCore.FUNC - but not in scope *)
  var _self, _adv : addr
  var _st : _state

  proc init(self_ adv_ : addr) : unit = {
    _self <- self_; _adv <- adv_; _st <- _State_Init;
  }

  (* we insert sufficient checks for target and source ports
     of sent messages to be valid; depending upon the invariants
     maintained, some of them will be redundant *)

  proc parties(_m : msg) : msg option = {
    var _r : msg option <- None;
    match _st with
      _State_Init => {
        match UC_FwDir.D.epdp_fw_req.`dec _m with
        | Some _x => {
            (* _x.`UC_FwDir.D.fw_req___func = _self /\
               envport _self _adv _x.`UC_FwDir.D.fw_req__pt1 *)
            if (envport _self _adv _x.`UC_FwDir.D.fw_req__pt2) {
              _r <-
                Some
                (UC_FwAdv.epdp_fw_obs.`enc     (* adversarial message *)
                 {|UC_FwAdv.fw_obs___func = _self;  (* source address *)
                   UC_FwAdv.fw_obs___adv  = _adv;   (* destination address *)
                   (* data: *)
                   UC_FwAdv.fw_obs__pt1   = _x.`UC_FwDir.D.fw_req__pt1;
                   UC_FwAdv.fw_obs__pt2   = _x.`UC_FwDir.D.fw_req__pt2;
                   UC_FwAdv.fw_obs__u     = _x.`UC_FwDir.D.fw_req__u|});
              _st <-
                _State_Wait _x.`UC_FwDir.D.fw_req__pt1 _x.`UC_FwDir.D.fw_req__pt2
                _x.`UC_FwDir.D.fw_req__u;
            }
          }
        | None => { }
        end;
      }
    | _State_Wait pt1 pt2 u => {
        match UC_FwAdv.epdp_fw_ok.`dec _m with
        | Some _x => {
            (* _x.`UC_FwAdv.fw_ok___func = self /\ _x.`UC_FwAdv.fw_ok___adv = adv;
               if the invariant from FwInitState is preserved, the
               following test is redudant: *)
            if (envport _self _adv pt2) {
              _r <-
                Some
                (UC_FwDir.D.epdp_fw_rsp.`enc     (* direct message *)
                 {|UC_FwDir.D.fw_rsp___func = _self;  (* source address *)
                   UC_FwDir.D.fw_rsp__pt2   = pt2;    (* destination port *)
                   (* data: *)
                   UC_FwDir.D.fw_rsp__pt1   = pt1;
                   UC_FwDir.D.fw_rsp__u     = u|});
              _st <- _State_Final;
            }
          }
        | None => { }
        end;
      }
    | _State_Final => { }
    end;
    return _r;
  }

  (* in the guard to invoke, we check that either

     (+) the incoming message is a direct message to the port of one
         of the basic interfaces of the direct composite interface (in
         this case, there is only one), where its source address is an
         envport; or

     (+) the incoming message is an adversarial message to the basic
         adversarial interface, where its source address is that of
         the adversary *)

  proc invoke(m : msg) : msg option = {
    var r : msg option <- None;
    if ((m.`1 = Dir /\ m.`2.`1 = _self /\ m.`2.`2 = UC_FwDir.D.pi /\
         envport _self _adv m.`3) \/
        (m.`1 = Adv /\ m.`2.`1 = _self /\ m.`2.`2 = UC_FwAdv.pi /\
         m.`3.`1 = _adv)) {
      r <@ parties(m);
    }
    return r;
  }
}.

end UC__IF.
