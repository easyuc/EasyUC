
(*! Bound_RFIP_IF(ParamName,Env,Adv)
`|Pr[DDH.DDH1(<<ParamName>>DDH_Adv(<<Env>>, <<Adv>>)).main() @ &m : res] -
  Pr[DDH.DDH2(<<ParamName>>DDH_Adv(<<Env>>, <<Adv>>)).main() @ &m : res]|
*)

require import  UCCore.

require import KeysExponentsAndPlaintexts.

require RedundantHashing.
require import FMap.

require import DDH.

require UC__KeyExchange.

clone include UC__KeyExchange.



module RFIP = RFRP. (*KeyExchange has no parameters so Real Functionality with Ideal Parameters is the same as Real Functionality with Real Parameters*)

module DDH_Adv_globs ={
  var func : addr
  var in_guard : int fset
  var k1, k2, k3 : key
}.

module AllCGs = {
  module UC__AllCGs_ = AllCGs_
  module DDH_Globs = DDH_Adv_globs
}.

type ke_ddh_state = [
    KEDDHStateWaitReq1
  | KEDDHStateWaitAdv1 of port & port
  | KEDDHStateWaitReq2 of port & port
  | KEDDHStateWaitAdv2 of port & port
  | KEDDHStateFinal
].


module DDH_Adv (Env : ENV, Adv : ADV) : DDH_ADV = {
  module KEDDH : FUNC = {
    var _self : addr
    var _st : ke_ddh_state

    proc init(self_ : addr) : unit = {
      _self <- self_;
      _st <- KEDDHStateWaitReq1;
    }
  proc _State_KEDDHStateWaitReq1__KEDir__Pt1__ke_req1 (pt1 : port, pt2 : port) : msg option = {
  var _r : msg option <- None;
  var _pt1 : port <- _intport_Pt1 _self;
  var _pt2 : port <- _intport_Pt2 _self;
  var u : univ;
  if (envport _self pt2) {
    u <- epdp_port_port_key_univ.`enc (pt1, pt2, DDH_Adv_globs.k1);
    _r <- Some
      (UC_Fw1.UC_FwAdv.epdp__fw_obs.`enc
        {|
          UC_Fw1.UC_FwAdv.fw_obs___func = _addr_Fw1 _self;
          UC_Fw1.UC_FwAdv.fw_obs___adv = adv;
          UC_Fw1.UC_FwAdv.fw_obs__pt1 = _pt1;
          UC_Fw1.UC_FwAdv.fw_obs__pt2 = _pt2;
          UC_Fw1.UC_FwAdv.fw_obs__u = u;       
        |});
    _st <- KEDDHStateWaitAdv1 pt1 pt2;
    
  }
  else { _r <- None;}
  return _r;
  }

  proc _State_KEDDHStateWaitAdv1__Fw1_FwAdv__fw_ok (pt1 : port, pt2 : port) : msg option = {
  var _r : msg option <- None;
  if (envport _self pt2) {
    _r <- Some
      (UC_KEDir.Pt2.epdp__ke_rsp1.`enc
        {|
          UC_KEDir.Pt2.ke_rsp1___func = _self;
          UC_KEDir.Pt2.ke_rsp1__pt2 = pt2;
          UC_KEDir.Pt2.ke_rsp1__pt1 = pt1;
          UC_KEDir.Pt2.ke_rsp1__k = DDH_Adv_globs.k3;
          
        |});
      _st <- KEDDHStateWaitReq2 pt1 pt2;
    }
  return _r;
  }

  proc _State_KEDDHStateWaitReq2__KEDir__Pt2__ke_req2 (pt1 : port, pt2 : port, pt2') : msg option = {
  var u : univ;
  var _pt1 : port <- _intport_Pt2 _self;
  var _pt2 : port <- _intport_Pt1 _self;
  var _r : msg option <- None;
  if (pt2' = pt2) {
    u <- epdp_key_univ.`enc (DDH_Adv_globs.k2);
    _r <- Some
      (UC_Fw2.UC_FwAdv.epdp__fw_obs.`enc
        {|
          UC_Fw2.UC_FwAdv.fw_obs___func = _addr_Fw2 _self;
          UC_Fw2.UC_FwAdv.fw_obs___adv = adv;
          UC_Fw2.UC_FwAdv.fw_obs__pt1 = _pt1;
          UC_Fw2.UC_FwAdv.fw_obs__pt2 = _pt2;
          UC_Fw2.UC_FwAdv.fw_obs__u = u;       
        |});
    _st <- KEDDHStateWaitAdv2 pt1 pt2;   
  }
  return _r;
  }

  proc _State_KEDDHStateWaitAdv2__Fw2_FwAdv__fw_ok (pt1 : port, pt2 : port) : msg option = {
  var _r : msg option <- None;
  if (envport _self pt1) {
    _r <- Some
          (UC_KEDir.Pt1.epdp__ke_rsp2.`enc
          {|
            UC_KEDir.Pt1.ke_rsp2___func = _self;
            UC_KEDir.Pt1.ke_rsp2__pt1 = pt1;
            UC_KEDir.Pt1.ke_rsp2__k = DDH_Adv_globs.k3;
            
          |});
        _st <- KEDDHStateFinal;
  }
  return _r;
  }


  proc invoke(m : msg) : msg option = {
    var r : msg option <- None;
    match _st with
    | KEDDHStateWaitReq1 => {
      if( m.`1 = Dir /\ envport _self m.`3 /\ m.`2 = _extport_Pt1 _self){
        match UC_KEDir.Pt1.epdp__ke_req1.`dec m with
        | Some _x => {
          r <@ _State_KEDDHStateWaitReq1__KEDir__Pt1__ke_req1 (_x.`UC_KEDir.Pt1.ke_req1__pt1, _x.`UC_KEDir.Pt1.ke_req1__pt2);
        }
        | None => {}
        end;
      }
    }
    | KEDDHStateWaitAdv1 pt1 pt2 => {
      if(m.`1 = Adv /\  m.`3.`1 = adv /\ _addr_Fw1 _self = m.`2.`1){ 
        match UC_Fw1.UC_FwAdv.epdp__fw_ok.`dec m with
        | Some _ => {
          r <@ _State_KEDDHStateWaitAdv1__Fw1_FwAdv__fw_ok (pt1, pt2);
        }
        | None => {}
        end;
      }
    }
    | KEDDHStateWaitReq2 pt1 pt2 => {
      if( m.`1 = Dir /\ envport _self m.`3 /\ m.`2 = _extport_Pt2 _self){
        match UC_KEDir.Pt2.epdp__ke_req2.`dec m with
        | Some _x => {
          r <@ _State_KEDDHStateWaitReq2__KEDir__Pt2__ke_req2 (pt1, pt2, _x.`UC_KEDir.Pt2.ke_req2__pt2);
        }
        | None => {}
        end;
      }
    }
    | KEDDHStateWaitAdv2 pt1 pt2 => {
      if(m.`1 = Adv /\  m.`3.`1 = adv /\ _addr_Fw2 _self = m.`2.`1){
        match UC_Fw2.UC_FwAdv.epdp__fw_ok.`dec m with
        | Some _ => {
          r <@ _State_KEDDHStateWaitAdv2__Fw2_FwAdv__fw_ok (pt1, pt2);
        }
        | None => {}
        end;
      }
    }
    | KEDDHStateFinal => {}
    end;
    return r;
  }
}
    
    
  

  proc main(k1_ k2_ k3_ : key) : bool = {
    var b : bool;
    DDH_Adv_globs.k1 <- k1_; DDH_Adv_globs.k2 <- k2_; DDH_Adv_globs.k3 <- k3_;
    b <@ Exper(MI(KEDDH, Adv), Env).main(DDH_Adv_globs.func, DDH_Adv_globs.in_guard);
    return b;
  }
}.



section.

declare module Adv <: ADV{-MI, -RFIP, -UC_KEIdeal, -UC_KESim, -DDH_Adv_globs, -DDH_Adv, -MSCore.CombEnvAdv, -MSCore.MS}.
declare module Env <: ENV{-Adv, -MI, -RFIP, -UC_KEIdeal, -UC_KESim, -DDH_Adv_globs, -DDH_Adv, -MSCore.CombEnvAdv, -MSCore.MS}.

type ke_real_simp_state = [
    KERealSimpStateWaitReq1
  | KERealSimpStateWaitAdv1 of port & port & exp
  | KERealSimpStateWaitReq2 of port & port & exp & exp
  | KERealSimpStateWaitAdv2 of port & port & exp & exp
  | KERealSimpStateFinal
].

local module KERealSimp : FUNC =
{
  var _self : addr
  var _st : ke_real_simp_state
  proc init(self_ : addr) : unit = {
    _self <- self_;
    _st <- KERealSimpStateWaitReq1;
  }

  proc _State_KERealSimpStateWaitReq1__KEDir__Pt1__ke_req1 (pt1 : port, pt2 : port) : msg option = {
  var q1 : exp;
  var _r : msg option <- None;
  var _pt1 : port <- _intport_Pt1 _self;
  var _pt2 : port <- _intport_Pt2 _self;
  var u : univ;
  if (envport _self pt2) {
    q1 <$ dexp;
    u <- epdp_port_port_key_univ.`enc (pt1, pt2, g ^ q1);
    _r <- Some
      (UC_Fw1.UC_FwAdv.epdp__fw_obs.`enc
        {|
          UC_Fw1.UC_FwAdv.fw_obs___func = _addr_Fw1 _self;
          UC_Fw1.UC_FwAdv.fw_obs___adv = adv;
          UC_Fw1.UC_FwAdv.fw_obs__pt1 = _pt1;
          UC_Fw1.UC_FwAdv.fw_obs__pt2 = _pt2;
          UC_Fw1.UC_FwAdv.fw_obs__u = u;       
        |});
    _st <- KERealSimpStateWaitAdv1 pt1 pt2 q1;
    
  }
  else { _r <- None;}
  return _r;
  }

  proc _State_KERealSimpStateWaitAdv1__Fw1_FwAdv__fw_ok (pt1 : port, pt2 : port, q1 : exp) : msg option = {
  var k1 : key;
  var q2 : exp;
  var _r : msg option <- None;
  if (envport _self pt2) {
    k1 <- g ^ q1;
    q2 <$ dexp;
    _r <- Some
      (UC_KEDir.Pt2.epdp__ke_rsp1.`enc
        {|
          UC_KEDir.Pt2.ke_rsp1___func = _self;
          UC_KEDir.Pt2.ke_rsp1__pt2 = pt2;
          UC_KEDir.Pt2.ke_rsp1__pt1 = pt1;
          UC_KEDir.Pt2.ke_rsp1__k = k1 ^ q2;
          
        |});
      _st <- KERealSimpStateWaitReq2 pt1 pt2 q1 q2;
    }
  return _r;
  }

  proc _State_KERealSimpStateWaitReq2__KEDir__Pt2__ke_req2 (pt1 : port, pt2 : port, q1 : exp, q2 : exp, pt2') : msg option = {
  var u : univ;
  var _pt1 : port <- _intport_Pt2 _self;
  var _pt2 : port <- _intport_Pt1 _self;
  var _r : msg option <- None;
  if (pt2' = pt2) {
    u <- epdp_key_univ.`enc (g ^ q2);
    _r <- Some
      (UC_Fw2.UC_FwAdv.epdp__fw_obs.`enc
        {|
          UC_Fw2.UC_FwAdv.fw_obs___func = _addr_Fw2 _self;
          UC_Fw2.UC_FwAdv.fw_obs___adv = adv;
          UC_Fw2.UC_FwAdv.fw_obs__pt1 = _pt1;
          UC_Fw2.UC_FwAdv.fw_obs__pt2 = _pt2;
          UC_Fw2.UC_FwAdv.fw_obs__u = u;       
        |});
    _st <- KERealSimpStateWaitAdv2 pt1 pt2 q1 q2;   
  }
  return _r;
  }

  proc _State_KERealSimpStateWaitAdv2__Fw2_FwAdv__fw_ok (pt1 : port, pt2 : port, q1 : exp, q2 : exp) : msg option = {
  var _r : msg option <- None;
  if (envport _self pt1) {
    _r <- Some
          (UC_KEDir.Pt1.epdp__ke_rsp2.`enc
          {|
            UC_KEDir.Pt1.ke_rsp2___func = _self;
            UC_KEDir.Pt1.ke_rsp2__pt1 = pt1;
            UC_KEDir.Pt1.ke_rsp2__k = (g ^ q2) ^ q1;
            
          |});
        _st <- KERealSimpStateFinal;
  }
  return _r;
  }
  
  proc parties(m : msg) : msg option = {
    var _r : msg option <- None;
    
    return _r;
  }

  proc invoke(m : msg) : msg option = {
    var r : msg option <- None;
    match _st with
    | KERealSimpStateWaitReq1 => {
      if( m.`1 = Dir /\ envport _self m.`3 /\ m.`2 = _extport_Pt1 _self){
        match UC_KEDir.Pt1.epdp__ke_req1.`dec m with
        | Some _x => {
          r <@ _State_KERealSimpStateWaitReq1__KEDir__Pt1__ke_req1 (_x.`UC_KEDir.Pt1.ke_req1__pt1, _x.`UC_KEDir.Pt1.ke_req1__pt2);
        }
        | None => {}
        end;
      }
    }
    | KERealSimpStateWaitAdv1 pt1 pt2 q1 => {
      if(m.`1 = Adv /\  m.`3.`1 = adv /\ _addr_Fw1 _self = m.`2.`1){ 
        match UC_Fw1.UC_FwAdv.epdp__fw_ok.`dec m with
        | Some _ => {
          r <@ _State_KERealSimpStateWaitAdv1__Fw1_FwAdv__fw_ok (pt1, pt2, q1);
        }
        | None => {}
        end;
      }
    }
    | KERealSimpStateWaitReq2 pt1 pt2 q1 q2 => {
      if( m.`1 = Dir /\ envport _self m.`3 /\ m.`2 = _extport_Pt2 _self){
        match UC_KEDir.Pt2.epdp__ke_req2.`dec m with
        | Some _x => {
          r <@ _State_KERealSimpStateWaitReq2__KEDir__Pt2__ke_req2 (pt1, pt2, q1, q2, _x.`UC_KEDir.Pt2.ke_req2__pt2);
        }
        | None => {}
        end;
      }
    }
    | KERealSimpStateWaitAdv2 pt1 pt2 q1 q2 => {
      if(m.`1 = Adv /\  m.`3.`1 = adv /\ _addr_Fw2 _self = m.`2.`1){
        match UC_Fw2.UC_FwAdv.epdp__fw_ok.`dec m with
        | Some _ => {
          r <@ _State_KERealSimpStateWaitAdv2__Fw2_FwAdv__fw_ok (pt1, pt2, q1, q2);
        }
        | None => {}
        end;
      }
    }
    | KERealSimpStateFinal => {}
    end;
    return r;
  }
}.


(* relational invariant for connecting KEReal and KERealSimp *)

type real_simp_rel_st = {
  real_simp_rel_st_func : addr;
  real_simp_rel_st_r1s  : _state_Pt1;
  real_simp_rel_st_r2s  : _state_Pt2;
  real_simp_rel_st_fws1 : UC_Fw1._state_IF;
  real_simp_rel_st_fws2 : UC_Fw2._state_IF;
  real_simp_rel_st_rss  : ke_real_simp_state;
}.

op    real_simp_rel0 (st : real_simp_rel_st) : bool =
  (st.`real_simp_rel_st_r1s  = _State_Pt1_WaitReq1) /\
  (st.`real_simp_rel_st_r2s  = _State_Pt2_WaitFwd1) /\
  (st.`real_simp_rel_st_fws1 = UC_Fw1._State_IF_Init) /\
  (st.`real_simp_rel_st_fws2 = UC_Fw2._State_IF_Init) /\
  (st.`real_simp_rel_st_rss  = KERealSimpStateWaitReq1).

op real_simp_rel1 (st : real_simp_rel_st, pt1 pt2 : port, q1 : exp) : bool =
  (envport st.`real_simp_rel_st_func pt1) /\
  (envport st.`real_simp_rel_st_func pt2) /\
  (st.`real_simp_rel_st_r1s  = _State_Pt1_WaitFwd2 pt1 q1) /\
  (st.`real_simp_rel_st_r2s  = _State_Pt2_WaitFwd1) /\
  (st.`real_simp_rel_st_fws1 =
     UC_Fw1._State_IF_Wait
     (_intport_Pt1 st.`real_simp_rel_st_func)
     (_intport_Pt2 st.`real_simp_rel_st_func)
     (epdp_port_port_key_univ.`enc (pt1, pt2, g ^ q1))) /\
  (st.`real_simp_rel_st_fws2 = UC_Fw2._State_IF_Init) /\
  (st.`real_simp_rel_st_rss  = KERealSimpStateWaitAdv1 pt1 pt2 q1).

  op real_simp_rel2 (st : real_simp_rel_st, pt1 pt2 : port, q1 q2 : exp) : bool =
  (envport st.`real_simp_rel_st_func pt1) /\
  (envport st.`real_simp_rel_st_func pt2) /\
  (st.`real_simp_rel_st_r1s  = _State_Pt1_WaitFwd2 pt1 q1) /\
  (st.`real_simp_rel_st_r2s  = _State_Pt2_WaitReq2 pt2 q2) /\
  (st.`real_simp_rel_st_fws1 = UC_Fw1._State_IF_Final) /\
  (st.`real_simp_rel_st_fws2 = UC_Fw2._State_IF_Init) /\
  (st.`real_simp_rel_st_rss  = KERealSimpStateWaitReq2 pt1 pt2 q1 q2).  

op real_simp_rel3 (st : real_simp_rel_st, pt1 pt2 : port, q1 q2 : exp) : bool =
  (envport st.`real_simp_rel_st_func pt1) /\
  (envport st.`real_simp_rel_st_func pt2) /\
  (st.`real_simp_rel_st_r1s  = _State_Pt1_WaitFwd2 pt1 q1) /\
  (st.`real_simp_rel_st_r2s  = _State_Pt2_Final) /\
  (st.`real_simp_rel_st_fws1 = UC_Fw1._State_IF_Final) /\
  (st.`real_simp_rel_st_fws2 =
     UC_Fw2._State_IF_Wait
     (_intport_Pt2 st.`real_simp_rel_st_func)
     (_intport_Pt1 st.`real_simp_rel_st_func)
     (epdp_key_univ.`enc (g ^ q2))) /\
  (st.`real_simp_rel_st_rss  = KERealSimpStateWaitAdv2 pt1 pt2 q1 q2).

op real_simp_rel4 (st : real_simp_rel_st) : bool =
  (st.`real_simp_rel_st_r1s  = _State_Pt1_Final) /\
  (st.`real_simp_rel_st_r2s  = _State_Pt2_Final) /\
  (st.`real_simp_rel_st_fws1 = UC_Fw1._State_IF_Final) /\
  (st.`real_simp_rel_st_fws2 = UC_Fw2._State_IF_Final) /\
  (st.`real_simp_rel_st_rss  = KERealSimpStateFinal).

inductive real_simp_rel (st : real_simp_rel_st) =
    RealSimpRel0 of (real_simp_rel0 st)
  | RealSimpRel1 (pt1 pt2 : port, q1 : exp) of
      (real_simp_rel1 st pt1 pt2 q1)
  | RealSimpRel2 (pt1 pt2 : port, q1 q2 : exp) of
      (real_simp_rel2 st pt1 pt2 q1 q2)
  | RealSimpRel3 (pt1 pt2 : port, q1 q2 : exp) of
      (real_simp_rel3 st pt1 pt2 q1 q2)
  | RealSimpRel4 (pt1 pt2 : port, q1 q2 : exp) of
      (real_simp_rel4 st).

      op mi_invoke_loop_calls_func_invoke (func : addr) (m : msg) : bool =
      (m.`1 = Dir /\ func = m.`2.`1 /\ envport func m.`3) \/
   (m.`1 = Adv /\ func <= m.`2.`1 /\ m.`3.`1 = adv /\ 0 < m.`3.`2).     

local lemma KEReal_KERealSimp_invoke (func : addr) :
  equiv
  [RFIP.invoke ~ KERealSimp.invoke :
    inc func adv /\ ={m} /\
    mi_invoke_loop_calls_func_invoke func m{1} /\
    RFIP.self{1} = func /\
    UC_KEReal._self{1} = func /\ 
   UC_Fw1.IF._self{1} =  _addr_Fw1 func /\
   UC_Fw2.IF._self{1} =  _addr_Fw2 func /\
   KERealSimp._self{2} = func /\
   real_simp_rel
   {|real_simp_rel_st_func = func;
     real_simp_rel_st_r1s  = UC_KEReal._st_Pt1{1};
     real_simp_rel_st_r2s  = UC_KEReal._st_Pt2{1};
     real_simp_rel_st_fws1 = UC_Fw1.IF._st{1};
     real_simp_rel_st_fws2 = UC_Fw2.IF._st{1};
     real_simp_rel_st_rss  = KERealSimp._st{2}|} ==>
   ={res} /\
   real_simp_rel
   {|real_simp_rel_st_func = func;
     real_simp_rel_st_r1s  = UC_KEReal._st_Pt1{1};
     real_simp_rel_st_r2s  = UC_KEReal._st_Pt2{1};
     real_simp_rel_st_fws1 = UC_Fw1.IF._st{1};
     real_simp_rel_st_fws2 = UC_Fw2.IF._st{1};
     real_simp_rel_st_rss  = KERealSimp._st{2}|}].
 proof.
 proc.
case
  (real_simp_rel0
   {|real_simp_rel_st_func = func;
     real_simp_rel_st_r1s  = UC_KEReal._st_Pt1{1};
     real_simp_rel_st_r2s  = UC_KEReal._st_Pt2{1};
     real_simp_rel_st_fws1 = UC_Fw1.IF._st{1};
     real_simp_rel_st_fws2 = UC_Fw2.IF._st{1};
     real_simp_rel_st_rss  = KERealSimp._st{2}|}).
     sp.
 match{2}.
     if{2}.
     match{2}.
(*is direct message for Pt1 but ke_req1 does not decode*)
     if{1}.
     inline loop.
     sp.
     rcondt{1} 0.
     auto.
     inline{1} invoke.
     sp.
     rcondf{1} 0. move => &m. skip. move => &hr.
have H :
     UC_KEReal._self{hr} = func /\
 KERealSimp._self{m} = func /\
 m1{hr} = m0{hr} /\
 m0{hr} = m{hr} /\
 m{hr} = m{m} /\
     m{m}.`2 = _extport_Pt1 KERealSimp._self{m} /\
     _addr_Fw1 UC_KEReal._self{hr} <= m1{hr}.`2.`1 => false.
     smt(not_le_ext_nonnil_l).
     smt().

 rcondf{1} 0. move => &m. skip. move => &hr. 
have H :
     UC_KEReal._self{hr} = func /\
 KERealSimp._self{m} = func /\
 m1{hr} = m0{hr} /\
 m0{hr} = m{hr} /\
 m{hr} = m{m} /\
     m{m}.`2 = _extport_Pt1 KERealSimp._self{m} /\
     _addr_Fw2 UC_KEReal._self{hr} <= m1{hr}.`2.`1 => false.
     smt(not_le_ext_nonnil_l).
     smt().

rcondt{1} 0.
move => &m. skip. move => />.
     inline party_Pt1.
     sp.
match{1}.
exfalso. smt(RealSimpRel0). 
exfalso. smt(RealSimpRel0). 
match{1}.
     sp.
seq 1 0 : (! not_done{1} /\ r0{1} = None /\ r{2} = None /\
  real_simp_rel0
       {| real_simp_rel_st_func = func;
         real_simp_rel_st_r1s = UC_KEReal._st_Pt1{1};
         real_simp_rel_st_r2s = UC_KEReal._st_Pt2{1};
         real_simp_rel_st_fws1 = UC_Fw1.IF._st{1};
         real_simp_rel_st_fws2 = UC_Fw2.IF._st{1};
         real_simp_rel_st_rss = KERealSimp._st{2}; |}).
         call{1} (RFCore.MakeRF_after_core_error UC_KEReal).
         skip. move => />.
         rcondf{1} 0.
         trivial.
         sp.
         skip.  
         smt(RealSimpRel0).

         exfalso.
      smt(UC_KEDir.Pt1.eq_of_valid__ke_req1 UC_KEDir.Pt1.valid_epdp__ke_req1).
         (*why not just smt(). ????
         since we have:
         UC_KEDir.Pt1.epdp__ke_req1.`dec _m{1} = Some _x{1} /\
         UC_KEDir.Pt1.epdp__ke_req1.`dec  m{2} = None /\
     _m{1} = m1{1} /\
     m1{1} = m0{1} /\
     m0{1} = m{1} /\
     m{1} = m{2}
         *)
         skip. move => />.
     
(*is direct message for Pt1 and ke_req1 decodes*)
     rcondt{1} 0. move => &m. skip. move => />. smt().

inline loop.
sp.
         rcondt{1} 0. move => &m. skip. move => />.
inline invoke.
sp.
         rcondf{1} 0. move => &m. skip. move => />. smt(not_le_ext_nonnil_l).
         rcondf{1} 0. move => &m. skip. move => />. smt(not_le_ext_nonnil_l).
rcondt{1} 0. move => &m. skip. move => />.    
         inline party_Pt1.
sp.
match{1}.
         exfalso. smt(RealSimpRel0). 
         exfalso. smt(RealSimpRel0).
         match{1}.
         exfalso. smt(UC_KEDir.Pt1.eq_of_valid__ke_req1 UC_KEDir.Pt1.valid_epdp__ke_req1).
inline _State_Pt1_WaitReq1__KEDir__Pt1__ke_req1.
         inline _State_KERealSimpStateWaitReq1__KEDir__Pt1__ke_req1.
sp.     
         if; last first.
         sp.
         seq 1 0 : (! not_done{1} /\ r0{1} = None /\ r{2} = None /\
         (! envport func pt2{1}) /\
  real_simp_rel0
       {| real_simp_rel_st_func = func;
         real_simp_rel_st_r1s = UC_KEReal._st_Pt1{1};
         real_simp_rel_st_r2s = UC_KEReal._st_Pt2{1};
         real_simp_rel_st_fws1 = UC_Fw1.IF._st{1};
         real_simp_rel_st_fws2 = UC_Fw2.IF._st{1};
         real_simp_rel_st_rss = KERealSimp._st{2}; |}).
         call{1} (RFCore.MakeRF_after_core_error UC_KEReal).
         skip. move => />.
         rcondf{1} 0.
         trivial.
         sp.
         skip.
         smt(RealSimpRel0).

         smt().
         seq 1 1 : (#pre /\ ={q1}).
rnd.
      skip. trivial.
      sp 5 0.
      elim* => r0_L r1_L _r_L _st_Pt1_L _r1_L.

      seq 1 0 : (
      not_done{1} /\
    m0{1} = (UC_Fw1.UC_FwDir.D.epdp__fw_req.`enc
      {| UC_Fw1.UC_FwDir.D.fw_req___func = _addr_Fw1 UC_KEReal._self{1};
        UC_Fw1.UC_FwDir.D.fw_req__pt1 = _intport_Pt1 UC_KEReal._self{1};
        UC_Fw1.UC_FwDir.D.fw_req__pt2 = _intport_Pt2 UC_KEReal._self{1};
        UC_Fw1.UC_FwDir.D.fw_req__u =
        epdp_port_port_key_univ.`enc (pt1{1}, pt2{1}, g ^ q1{1}); |}) /\
    pt1{2} = _x{2}.`UC_KEDir.Pt1.ke_req1__pt1 /\
    pt2{2} = _x{2}.`UC_KEDir.Pt1.ke_req1__pt2 /\
    pt1{1} = _x{1}.`UC_KEDir.Pt1.ke_req1__pt1 /\
    pt2{1} = _x{1}.`UC_KEDir.Pt1.ke_req1__pt2 /\
   _pt1{2} = _intport_Pt1 KERealSimp._self{2} /\
    _pt2{2} = _intport_Pt2 KERealSimp._self{2} /\
    envport func pt1{1} /\
    envport func pt2{1} /\
    ={m, _x, q1} /\
    inc func adv /\
      mi_invoke_loop_calls_func_invoke func m{1} /\
      RFIP.self{1} = func /\
      UC_KEReal._self{1} = func /\
      UC_Fw1.IF._self{1} = _addr_Fw1 func /\
      UC_Fw2.IF._self{1} = _addr_Fw2 func /\
      KERealSimp._self{2} = func /\
      KERealSimp._st{2} = KERealSimpStateWaitReq1 /\
      UC_KEReal._st_Pt1{1} = _State_Pt1_WaitFwd2 pt1{1} q1{1} /\
      UC_KEReal._st_Pt2{1} = _State_Pt2_WaitFwd1 /\
      UC_Fw1.IF._st{1} = UC_Fw1._State_IF_Init /\
      UC_Fw2.IF._st{1} = UC_Fw2._State_IF_Init
  ).

exlim r0{1} => r0.
call{1} (RFCore.MakeRF_after_core_continue UC_KEReal r0).
      skip. move => &1 &2.
      have H :
  UC_KEDir.Pt1.epdp__ke_req1.`dec m{2} = Some _x{2} =>
  _x{2}.`UC_KEDir.Pt1.ke_req1__pt1 = m{2}.`3. 
      smt(UC_KEDir.Pt1.eq_of_valid__ke_req1 UC_KEDir.Pt1.valid_epdp__ke_req1). 
smt().

rcondt{1} 0.  move => &m. skip. move => />.
sp 2 0.  
rcondt{1} 0.  move => &m. skip. move => />.
sp 2 0.
      rcondt{1} 0.  move => &m. skip.
  smt(UC_Fw1.UC_FwDir.D.eq_of_valid__fw_req UC_Fw1.UC_FwDir.D.valid_epdp__fw_req
not_le_ext_nonnil_l     
   inc_nle_r).
inline parties.
      sp 2 0.
match{1}.
      exfalso. smt().

  
(*match{1}. exfalso. smt(). not working, using the case workaround*)
      case (UC_Fw1.UC_FwDir.D.epdp__fw_req.`dec _m1{1} <> Some
    {| UC_Fw1.UC_FwDir.D.fw_req___func = _addr_Fw1 UC_KEReal._self{1};
    UC_Fw1.UC_FwDir.D.fw_req__pt1 =
    _intport_Pt1 UC_KEReal._self{1};
    UC_Fw1.UC_FwDir.D.fw_req__pt2 =
    _intport_Pt2 UC_KEReal._self{1};
    UC_Fw1.UC_FwDir.D.fw_req__u =
     epdp_port_port_key_univ.`enc (pt1{1}, pt2{1}, g ^ q1{1}); |}
  ).
      exfalso. move => &1 &2.
  smt.
      (*  smt(UC_Fw1.UC_FwDir.D.valid_epdp__fw_req). did not work for some reason*)
  simplify.
      match Some {1} 1.
  move => &m.
      skip. smt().

inline _State_IF_Init__FwDir__D__fw_req.
sp 4 1.
      rcondt{1} 0.
  move => &m. skip.
  move => &hr P.
  smt.
sp.

      seq 1 0 : (
    !not_done{1} /\
    ={pt1, pt2, q1} /\
    envport func pt1{1} /\
    envport func pt2{1} /\
r{2} =
    Some (UC_Fw1.UC_FwAdv.epdp__fw_obs.`enc
      {| UC_Fw1.UC_FwAdv.fw_obs___func = _addr_Fw1 KERealSimp._self{2};
        UC_Fw1.UC_FwAdv.fw_obs___adv = adv;
        UC_Fw1.UC_FwAdv.fw_obs__pt1 = _intport_Pt1 func; 
        UC_Fw1.UC_FwAdv.fw_obs__pt2 = _intport_Pt2 func;
        UC_Fw1.UC_FwAdv.fw_obs__u =
        epdp_port_port_key_univ.`enc (pt1{2}, pt2{2}, g ^ q1{2}); |})

        /\

r0{1} =
      Some (UC_Fw1.UC_FwAdv.epdp__fw_obs.`enc
        {| UC_Fw1.UC_FwAdv.fw_obs___func = UC_Fw1.UC_Forw._self{1};
          UC_Fw1.UC_FwAdv.fw_obs___adv = adv;
          UC_Fw1.UC_FwAdv.fw_obs__pt1 = _intport_Pt1 func;
          UC_Fw1.UC_FwAdv.fw_obs__pt2 = _intport_Pt2 func;
          UC_Fw1.UC_FwAdv.fw_obs__u =
          epdp_port_port_key_univ.`enc (pt1{1}, pt2{1}, g ^ q1{1}); |})

          /\

UC_KEReal._self{1} = func /\
       UC_Fw1.UC_Forw._self{1} = _addr_Fw1 func /\
       UC_Fw2.UC_Forw._self{1} = _addr_Fw2 func /\
          KERealSimp._self{2} = func /\
      
      KERealSimp._st{2} = KERealSimpStateWaitAdv1 pt1{2} pt2{2} q1{2} /\
          UC_Fw1.UC_Forw._st{1} = UC_Fw1._State_IF_Wait
      (_intport_Pt1 UC_KEReal._self{1})
      (_intport_Pt2 UC_KEReal._self{1})
      (epdp_port_port_key_univ.`enc (pt1{1}, pt2{1}, g ^ q1{1})) /\
      UC_KEReal._st_Pt1{1} = _State_Pt1_WaitFwd2 pt1{1} q1{1} /\
      UC_KEReal._st_Pt2{1} = _State_Pt2_WaitFwd1 /\
      UC_Fw2.UC_Forw._st{1} = UC_Fw2._State_IF_Init
    ).
exlim r0{1} => r0.
call{1} (RFCore.MakeRF_after_core_return UC_KEReal r0).
        skip.  
        smt(
        _adv_pi_begin_gt0
        UC_Fw1.UC_FwAdv.valid_epdp__fw_obs
        UC_Fw1.UC_FwAdv.eq_of_valid__fw_obs).
rcondf{1} 0.
move => &m. skip. move => />.
        sp.
        skip.
    move => &1 &2 P. (*smt won't work wihout P*)
        smt(RealSimpRel1).

        exfalso. smt().
        if{1}; last first.
        skip. smt(RealSimpRel0).
        inline loop.
        sp. rcondt{1} 0. move => &m. skip. move => />.

inline invoke.
        sp.
        if{1}. sp. if{1}.
    inline parties. sp.
        match _State_IF_Init {1} 0. auto; smt().
    match None {1} 0. auto; smt(UC_Fw1.UC_FwDir.D.valid_epdp__fw_req
        UC_Fw1.UC_FwDir.D.eq_of_valid__fw_req).
        sp.
     seq 1 0 : (! not_done{1} /\ r0{1} = None /\ r{2} = None /\
  real_simp_rel0
       {| real_simp_rel_st_func = func;
         real_simp_rel_st_r1s = UC_KEReal._st_Pt1{1};
         real_simp_rel_st_r2s = UC_KEReal._st_Pt2{1};
         real_simp_rel_st_fws1 = UC_Fw1.IF._st{1};
         real_simp_rel_st_fws2 = UC_Fw2.IF._st{1};
         real_simp_rel_st_rss = KERealSimp._st{2}; |}).
         call{1} (RFCore.MakeRF_after_core_error UC_KEReal).
         skip. move => />.
         rcondf{1} 0.
         trivial.
         sp.
         skip.  
         smt(RealSimpRel0).
             sp.
     seq 1 0 : (! not_done{1} /\ r0{1} = None /\ r{2} = None /\
  real_simp_rel0
       {| real_simp_rel_st_func = func;
         real_simp_rel_st_r1s = UC_KEReal._st_Pt1{1};
         real_simp_rel_st_r2s = UC_KEReal._st_Pt2{1};
         real_simp_rel_st_fws1 = UC_Fw1.IF._st{1};
         real_simp_rel_st_fws2 = UC_Fw2.IF._st{1};
         real_simp_rel_st_rss = KERealSimp._st{2}; |}).
         call{1} (RFCore.MakeRF_after_core_error UC_KEReal).
         skip. move => />.
         rcondf{1} 0.
         trivial.
         sp.
         skip.  
         smt(RealSimpRel0).

if{1}. sp. if{1}.
    inline parties. sp.
        match _State_IF_Init {1} 0. auto; smt().
    match None {1} 0. auto; smt(UC_Fw2.UC_FwDir.D.valid_epdp__fw_req
        UC_Fw2.UC_FwDir.D.eq_of_valid__fw_req).
        sp.
     seq 1 0 : (! not_done{1} /\ r0{1} = None /\ r{2} = None /\
  real_simp_rel0
       {| real_simp_rel_st_func = func;
         real_simp_rel_st_r1s = UC_KEReal._st_Pt1{1};
         real_simp_rel_st_r2s = UC_KEReal._st_Pt2{1};
         real_simp_rel_st_fws1 = UC_Fw1.IF._st{1};
         real_simp_rel_st_fws2 = UC_Fw2.IF._st{1};
         real_simp_rel_st_rss = KERealSimp._st{2}; |}).
         call{1} (RFCore.MakeRF_after_core_error UC_KEReal).
         skip. move => />.
         rcondf{1} 0.
         trivial.
         sp.
         skip.  
         smt(RealSimpRel0).
             sp.
     seq 1 0 : (! not_done{1} /\ r0{1} = None /\ r{2} = None /\
  real_simp_rel0
       {| real_simp_rel_st_func = func;
         real_simp_rel_st_r1s = UC_KEReal._st_Pt1{1};
         real_simp_rel_st_r2s = UC_KEReal._st_Pt2{1};
         real_simp_rel_st_fws1 = UC_Fw1.IF._st{1};
         real_simp_rel_st_fws2 = UC_Fw2.IF._st{1};
         real_simp_rel_st_rss = KERealSimp._st{2}; |}).
         call{1} (RFCore.MakeRF_after_core_error UC_KEReal).
         skip. move => />.
         rcondf{1} 0.
         trivial.
         sp.
         skip.  
         smt(RealSimpRel0).
     
        if{1}.
inline party_Pt1.
sp. match{1}.
        exfalso. smt().
        exfalso. smt().
        match{1}.
        sp.
    seq 1 0 : (! not_done{1} /\ r0{1} = None /\ r{2} = None /\
  real_simp_rel0
       {| real_simp_rel_st_func = func;
         real_simp_rel_st_r1s = UC_KEReal._st_Pt1{1};
         real_simp_rel_st_r2s = UC_KEReal._st_Pt2{1};
         real_simp_rel_st_fws1 = UC_Fw1.IF._st{1};
         real_simp_rel_st_fws2 = UC_Fw2.IF._st{1};
         real_simp_rel_st_rss = KERealSimp._st{2}; |}).
         call{1} (RFCore.MakeRF_after_core_error UC_KEReal).
         skip. move => />.
         rcondf{1} 0.
         trivial.
         sp.
         skip.  
         smt(RealSimpRel0).

exfalso.
     move => &1 &2 P.   
have H : m1{1}.`1 <> Dir.
         smt().
have H2 : _m{1} = m1{1} /\ m1{1}.`1 <> Dir => UC_KEDir.Pt1.epdp__ke_req1.`dec _m{1} = None.
         smt(UC_KEDir.Pt1.eq_of_valid__ke_req1 UC_KEDir.Pt1.valid_epdp__ke_req1).
         smt().

         if{1}; last first.
     sp.
seq 1 0 : (! not_done{1} /\ r0{1} = None /\ r{2} = None /\
  real_simp_rel0
       {| real_simp_rel_st_func = func;
         real_simp_rel_st_r1s = UC_KEReal._st_Pt1{1};
         real_simp_rel_st_r2s = UC_KEReal._st_Pt2{1};
         real_simp_rel_st_fws1 = UC_Fw1.IF._st{1};
         real_simp_rel_st_fws2 = UC_Fw2.IF._st{1};
         real_simp_rel_st_rss = KERealSimp._st{2}; |}).
         call{1} (RFCore.MakeRF_after_core_error UC_KEReal).
         skip. move => />.
         rcondf{1} 0.
         trivial.
         sp.
         skip.  
         smt(RealSimpRel0).

inline party_Pt2.
         sp. match{1}.
exfalso. smt().
         match{1}.
 sp.
seq 1 0 : (! not_done{1} /\ r0{1} = None /\ r{2} = None /\
  real_simp_rel0
       {| real_simp_rel_st_func = func;
         real_simp_rel_st_r1s = UC_KEReal._st_Pt1{1};
         real_simp_rel_st_r2s = UC_KEReal._st_Pt2{1};
         real_simp_rel_st_fws1 = UC_Fw1.IF._st{1};
         real_simp_rel_st_fws2 = UC_Fw2.IF._st{1};
         real_simp_rel_st_rss = KERealSimp._st{2}; |}).
         call{1} (RFCore.MakeRF_after_core_error UC_KEReal).
         skip. move => />.
         rcondf{1} 0.
         trivial.
         sp.
         skip.  
         smt(RealSimpRel0).

         rcondf{1} 0. move => &m. skip. move => />. smt.
sp.
seq 1 0 : (! not_done{1} /\ r0{1} = None /\ r{2} = None /\
  real_simp_rel0
       {| real_simp_rel_st_func = func;
         real_simp_rel_st_r1s = UC_KEReal._st_Pt1{1};
         real_simp_rel_st_r2s = UC_KEReal._st_Pt2{1};
         real_simp_rel_st_fws1 = UC_Fw1.IF._st{1};
         real_simp_rel_st_fws2 = UC_Fw2.IF._st{1};
         real_simp_rel_st_rss = KERealSimp._st{2}; |}).
         call{1} (RFCore.MakeRF_after_core_error UC_KEReal).
         skip. move => />.
         rcondf{1} 0.
         trivial.
         sp.
         skip.  
         smt(RealSimpRel0).

exfalso. smt().

         exfalso. smt().
         exfalso. smt().
         exfalso. smt().
     exfalso. smt().
(*       smt(
       lpo_nil
       lpo_nil_non_nil
       lpo_non_nil_nil
       lpo_non_nil_eq
       lpo_pre
       lpo_eqP
       lpo_ltP
       lpo_gtP
       lpo_sym_lt_gt
       lpo_lt_trans
       lpo_gt_trans
       lpo_lt_ext_nonnil_r
       lpo_incP
       lpo_inc_sym
       lpo_inc_pre
       lpo_inc_extl
       lpo_inc_extr
       lpo_inc_ext
       concat_nil_r
       concat_nil_l
       le_cases
       leP
       ltP
       incP
       le_drop
       ge_nil
       le_nil_iff
       not_le_cons_nil
       le_cons
       le_pre
       le_pre_l
       le_refl
       le_ext_r
       gt_cons
       not_lt_cons_nil
       lt_cons
       lt_pre
       lt_pre_l
       lt_pre_r
       eq_pre
       eq_pre_r
       eq_pre_l
       not_lt_same

       not_inc_nil_left
     ).*)  
     
 case
 (exists (pt1 pt2 : port, q1 : exp),
   real_simp_rel1
   {|real_simp_rel_st_func = func;
     real_simp_rel_st_r1s  = UC_KEReal._st_Pt1{1};
     real_simp_rel_st_r2s  = UC_KEReal._st_Pt2{1};
     real_simp_rel_st_fws1 = UC_Fw1.IF._st{1};
     real_simp_rel_st_fws2 = UC_Fw2.IF._st{1};
     real_simp_rel_st_rss  = KERealSimp._st{2}|}
     pt1
     pt2
     q1
 ).
 elim* => pt1 pt2 q1.
     sp.
     case(KERealSimp._st{2} = KERealSimpStateWaitAdv1 pt1 pt2 q1);
last first. exfalso. smt().
match KERealSimpStateWaitAdv1 {2} 0. 
 move => &m. skip. smt().
 if{2}.
match{2}.
     (*is adv for Fw1 but dec fails*)

     rcondt{1} 0. move => &m. skip. smt().
inline loop.
sp.
     rcondt{1} 0. move => &m. skip. smt().
     inline invoke.
     sp.
 rcondt{1} 0. move => &m. skip. smt.
     sp.
     rcondt{1} 0. move => &m. skip. move => &hr. move => />. smt().
     inline parties.
 sp.
     case(UC_Fw1.UC_Forw._st{1} = UC_Fw1._State_IF_Wait
     (_intport_Pt1 func)
     (_intport_Pt2 func)
     (epdp_port_port_key_univ.`enc (pt1, pt2, g ^ q1)));
last first. exfalso. smt().
match _State_IF_Wait {1} 0. 
 move => &m. skip. smt().
       case(UC_Fw1.UC_FwAdv.epdp__fw_ok.`dec _m{1} = None);
       last first. exfalso. smt(UC_Fw1.UC_FwAdv.valid_epdp__fw_ok UC_Fw1.UC_FwAdv.eq_of_valid__fw_ok).
       match None {1} 0. move => &m. skip. smt().
       sp.
   seq 1 0 : (! not_done{1} /\ r0{1} = None /\ r{2} = None /\
  real_simp_rel1
       {| real_simp_rel_st_func = func;
         real_simp_rel_st_r1s = UC_KEReal._st_Pt1{1};
         real_simp_rel_st_r2s = UC_KEReal._st_Pt2{1};
         real_simp_rel_st_fws1 = UC_Fw1.IF._st{1};
         real_simp_rel_st_fws2 = UC_Fw2.IF._st{1};
         real_simp_rel_st_rss = KERealSimp._st{2}; |} pt1 pt2 q1
     ).
         call{1} (RFCore.MakeRF_after_core_error UC_KEReal).
         skip. move => />.
         rcondf{1} 0.
         trivial.
         sp.
         skip.  
         smt(RealSimpRel1).

         (*is adv for Fw1 and dec succeeds*)
     rcondt{1} 0. move => &m. skip. smt().
inline loop.
sp.
     rcondt{1} 0. move => &m. skip. smt().
     inline invoke.
     sp.
 rcondt{1} 0. move => &m. skip. smt.
     sp.
     rcondt{1} 0. move => &m. skip. move => &hr. move => />. smt().
     inline parties.
 sp.
     case(UC_Fw1.UC_Forw._st{1} = UC_Fw1._State_IF_Wait
     (_intport_Pt1 func)
     (_intport_Pt2 func)
     (epdp_port_port_key_univ.`enc (pt1, pt2, g ^ q1)));
last first. exfalso. smt().
match _State_IF_Wait {1} 0. 
   move => &m. skip. smt().
   match{1}.
exfalso. smt(UC_Fw1.UC_FwAdv.valid_epdp__fw_ok UC_Fw1.UC_FwAdv.eq_of_valid__fw_ok).
inline _State_IF_Wait__FwAdv__fw_ok.
   rcondt{1} 5.
   move => &m. sp. skip. move => &hr />. smt.
       sp.

      seq 1 0 : (
     not_done{1} = true /\
     UC_Fw1.UC_FwAdv.epdp__fw_ok.`dec m{1} = Some _x{1} /\
     KERealSimp._st{2} = KERealSimpStateWaitAdv1 pt1{!2} pt2{!2} q1{!2} /\
      r{2} = None /\
       r{1} = None /\
       inc func adv /\
     ={m} /\
     m0{1} =  UC_Fw1.UC_FwDir.D.epdp__fw_rsp.`enc
     {| UC_Fw1.UC_FwDir.D.fw_rsp___func = _addr_Fw1 func;
       UC_Fw1.UC_FwDir.D.fw_rsp__pt2 = _intport_Pt2 func;
       UC_Fw1.UC_FwDir.D.fw_rsp__pt1 = _intport_Pt1 func;
       UC_Fw1.UC_FwDir.D.fw_rsp__u = (epdp_port_port_key_univ.`enc (pt1, pt2, g ^ q1)); |} /\
         mi_invoke_loop_calls_func_invoke func m{1} /\
         RFIP.self{1} = func /\
         UC_KEReal._self{1} = func /\
         UC_Fw1.IF._self{1} = _addr_Fw1 func /\
         UC_Fw2.IF._self{1} = _addr_Fw2 func /\
         KERealSimp._self{2} = func /\

       KERealSimp._st{2} = KERealSimpStateWaitAdv1 pt1 pt2 q1 /\
     (envport func pt1) /\
 (envport func pt2) /\
  (UC_KEReal._st_Pt1{1}  = _State_Pt1_WaitFwd2 pt1 q1) /\
  (UC_KEReal._st_Pt2{1}  = _State_Pt2_WaitFwd1) /\
  (UC_Fw1.IF._st{1} = UC_Fw1._State_IF_Final) /\
  (UC_Fw2.IF._st{1} = UC_Fw2._State_IF_Init) 
  

         /\
     m{2}.`1 = Adv /\
     m{2}.`3.`1 = adv /\ _addr_Fw1 KERealSimp._self{2} = m{2}.`2.`1
  ).

exlim r0{1} => r0.
call{1} (RFCore.MakeRF_after_core_continue UC_KEReal r0).
      skip. move => &1 &2 P. smt(UC_Fw1.UC_FwDir.D.valid_epdp__fw_rsp UC_Fw1.UC_FwDir.D.eq_of_valid__fw_rsp). 

rcondt{1} 0.  move => &m. sp. skip. trivial.
      sp.

rcondf{1} 0. move => &m. sp. skip. smt.
rcondf{1} 0. move => &m. sp. skip. smt.
rcondf{1} 0. move => &m. sp. skip. smt.
rcondt{1} 0. move => &m. sp. skip. smt(UC_Fw1.UC_FwDir.D.valid_epdp__fw_rsp UC_Fw1.UC_FwDir.D.eq_of_valid__fw_rsp). 
inline party_Pt2.
      sp.
      case(UC_KEReal._st_Pt2{1} = _State_Pt2_WaitFwd1);
      last first. exfalso. smt().
      match  _State_Pt2_WaitFwd1 {1} 0. auto; smt().
      match Some {1} 0. auto; progress; smt(UC_Fw1.UC_FwDir.D.valid_epdp__fw_rsp UC_Fw1.UC_FwDir.D.eq_of_valid__fw_rsp).

      rcondt{1} 0. move => &m. skip. smt(UC_Fw1.UC_FwDir.D.valid_epdp__fw_rsp UC_Fw1.UC_FwDir.D.eq_of_valid__fw_rsp). 
  
      inline _State_Pt2_WaitFwd1__Fw1__D__fw_rsp.
sp. match Some {1} 0. auto; progress; smt.
sp.  

inline _State_KERealSimpStateWaitAdv1__Fw1_FwAdv__fw_ok.
sp.
rcondt{2} 0.  move => &m. skip. smt.
      sp.
      seq 1 1 :
  (#pre /\ ={q2}).
    rnd. skip. smt().

  rcondt{1} 0. move => &m. skip. smt.
    sp.
seq 1 0 : (
    !not_done{1} /\
    ={q2, k1} /\
    envport func pt1 /\
    envport func pt2 /\
r{2} =
    Some (UC_KEDir.Pt2.epdp__ke_rsp1.`enc
      {| UC_KEDir.Pt2.ke_rsp1___func = KERealSimp._self{2};
         UC_KEDir.Pt2.ke_rsp1__pt2 = pt2;
        UC_KEDir.Pt2.ke_rsp1__pt1 = pt1;
        UC_KEDir.Pt2.ke_rsp1__k = k1{2} ^ q2{2}; |})

        /\

r0{1} =
      Some (UC_KEDir.Pt2.epdp__ke_rsp1.`enc
      {| UC_KEDir.Pt2.ke_rsp1___func = func;
        UC_KEDir.Pt2.ke_rsp1__pt2 = pt2;
        UC_KEDir.Pt2.ke_rsp1__pt1 = pt1;
        UC_KEDir.Pt2.ke_rsp1__k = k1{1} ^ q2{1}; |})

          /\

UC_KEReal._self{1} = func /\
       UC_Fw1.UC_Forw._self{1} = _addr_Fw1 func /\
       UC_Fw2.UC_Forw._self{1} = _addr_Fw2 func /\
          KERealSimp._self{2} = func /\
      
      KERealSimp._st{2} = KERealSimpStateWaitReq2 pt1 pt2 q1 q2{2} /\
          UC_Fw1.UC_Forw._st{1} = UC_Fw1._State_IF_Final /\
      UC_KEReal._st_Pt1{1} = _State_Pt1_WaitFwd2 pt1 q1 /\
      UC_KEReal._st_Pt2{1} =  _State_Pt2_WaitReq2 pt2 q2{1} /\
      UC_Fw2.UC_Forw._st{1} = UC_Fw2._State_IF_Init
    ).
exlim r0{1} => r0.
call{1} (RFCore.MakeRF_after_core_return UC_KEReal r0).
        skip. smt.
    
rcondf{1} 0. move => &m. skip. trivial.
        sp. skip. move => &1 &2 P.
        have H : r{1} = r{2}. smt.
        rewrite H //=.
        have H2 : real_simp_rel2
    {| real_simp_rel_st_func = func;
      real_simp_rel_st_r1s = UC_KEReal._st_Pt1{1};
      real_simp_rel_st_r2s = UC_KEReal._st_Pt2{1};
      real_simp_rel_st_fws1 = UC_Fw1.UC_Forw._st{1};
      real_simp_rel_st_fws2 = UC_Fw2.UC_Forw._st{1};
      real_simp_rel_st_rss = KERealSimp._st{2}; |}
      pt1 pt2 q1 q2{1}.
smt().    
      smt(RealSimpRel2).

      (*not adv msg for Fw1*)
      if{1}; last first. skip. move => />.
    inline loop.
      sp.
      rcondt{1} 0. auto.
      inline invoke.
      sp.
    if{1}. sp. if{1}.
    inline parties. sp.
        match _State_IF_Wait {1} 0. auto; smt().
    match None {1} 0. auto; progress; smt.
        sp.
     seq 1 0 : (! not_done{1} /\ r0{1} = None /\ r{2} = None /\
  real_simp_rel1
       {| real_simp_rel_st_func = func;
         real_simp_rel_st_r1s = UC_KEReal._st_Pt1{1};
         real_simp_rel_st_r2s = UC_KEReal._st_Pt2{1};
         real_simp_rel_st_fws1 = UC_Fw1.IF._st{1};
         real_simp_rel_st_fws2 = UC_Fw2.IF._st{1};
         real_simp_rel_st_rss = KERealSimp._st{2}; |} pt1 pt2 q1).
         call{1} (RFCore.MakeRF_after_core_error UC_KEReal).
         skip. move => />.
         rcondf{1} 0.
         trivial.
         sp.
         skip.  
         smt(RealSimpRel1).
             sp.
      seq 1 0 : (! not_done{1} /\ r0{1} = None /\ r{2} = None /\
  real_simp_rel1
       {| real_simp_rel_st_func = func;
         real_simp_rel_st_r1s = UC_KEReal._st_Pt1{1};
         real_simp_rel_st_r2s = UC_KEReal._st_Pt2{1};
         real_simp_rel_st_fws1 = UC_Fw1.IF._st{1};
         real_simp_rel_st_fws2 = UC_Fw2.IF._st{1};
         real_simp_rel_st_rss = KERealSimp._st{2}; |} pt1 pt2 q1).
         call{1} (RFCore.MakeRF_after_core_error UC_KEReal).
         skip. move => />.
         rcondf{1} 0.
         trivial.
         sp.
         skip.  
         smt(RealSimpRel1).

if{1}. sp. if{1}.
    inline parties. sp.
        match _State_IF_Init {1} 0. auto; smt().
         match None {1} 0. auto; progress; smt(not_le_ext_nonnil_l UC_Fw2.UC_FwDir.D.valid_epdp__fw_req
        UC_Fw2.UC_FwDir.D.eq_of_valid__fw_req).
        sp.
     seq 1 0 : (! not_done{1} /\ r0{1} = None /\ r{2} = None /\
  real_simp_rel1
       {| real_simp_rel_st_func = func;
         real_simp_rel_st_r1s = UC_KEReal._st_Pt1{1};
         real_simp_rel_st_r2s = UC_KEReal._st_Pt2{1};
         real_simp_rel_st_fws1 = UC_Fw1.IF._st{1};
         real_simp_rel_st_fws2 = UC_Fw2.IF._st{1};
         real_simp_rel_st_rss = KERealSimp._st{2}; |} pt1 pt2 q1).
         call{1} (RFCore.MakeRF_after_core_error UC_KEReal).
         skip. move => />.
         rcondf{1} 0.
         trivial.
         sp.
         skip.  
         smt(RealSimpRel1).
     
             sp.
     seq 1 0 : (! not_done{1} /\ r0{1} = None /\ r{2} = None /\
  real_simp_rel1
       {| real_simp_rel_st_func = func;
         real_simp_rel_st_r1s = UC_KEReal._st_Pt1{1};
         real_simp_rel_st_r2s = UC_KEReal._st_Pt2{1};
         real_simp_rel_st_fws1 = UC_Fw1.IF._st{1};
         real_simp_rel_st_fws2 = UC_Fw2.IF._st{1};
         real_simp_rel_st_rss = KERealSimp._st{2}; |} pt1 pt2 q1).
         call{1} (RFCore.MakeRF_after_core_error UC_KEReal).
         skip. move => />.
         rcondf{1} 0.
         trivial.
         sp.
         skip.  
         smt(RealSimpRel1).     
      if{1}.
      inline party_Pt1.
      case(UC_KEReal._st_Pt1{1} = _State_Pt1_WaitFwd2 pt1 q1); last first. exfalso; smt().
    sp. match _State_Pt1_WaitFwd2 {1} 0. auto. smt().
match{1}.
      sp.
    seq 1 0 : (! not_done{1} /\ r0{1} = None /\ r{2} = None /\
  real_simp_rel1
       {| real_simp_rel_st_func = func;
         real_simp_rel_st_r1s = UC_KEReal._st_Pt1{1};
         real_simp_rel_st_r2s = UC_KEReal._st_Pt2{1};
         real_simp_rel_st_fws1 = UC_Fw1.IF._st{1};
         real_simp_rel_st_fws2 = UC_Fw2.IF._st{1};
         real_simp_rel_st_rss = KERealSimp._st{2}; |} pt1 pt2 q1
     ).
         call{1} (RFCore.MakeRF_after_core_error UC_KEReal).
         skip. move => />.
         rcondf{1} 0.
         trivial.
         sp.
         skip.  
         smt(RealSimpRel1).
rcondf{1} 0.  auto; progress; smt.
sp.
    seq 1 0 : (! not_done{1} /\ r0{1} = None /\ r{2} = None /\
  real_simp_rel1
       {| real_simp_rel_st_func = func;
         real_simp_rel_st_r1s = UC_KEReal._st_Pt1{1};
         real_simp_rel_st_r2s = UC_KEReal._st_Pt2{1};
         real_simp_rel_st_fws1 = UC_Fw1.IF._st{1};
         real_simp_rel_st_fws2 = UC_Fw2.IF._st{1};
         real_simp_rel_st_rss = KERealSimp._st{2}; |} pt1 pt2 q1
     ).
         call{1} (RFCore.MakeRF_after_core_error UC_KEReal).
         skip. move => />.
         rcondf{1} 0.
         trivial.
         sp.
         skip.  
         smt(RealSimpRel1).

     if{1}.
      inline party_Pt2.
      case(UC_KEReal._st_Pt2{1} =  _State_Pt2_WaitFwd1); last first. exfalso; smt().
    sp. match  _State_Pt2_WaitFwd1 {1} 0. auto. trivial.
match{1}.
      sp.
    seq 1 0 : (! not_done{1} /\ r0{1} = None /\ r{2} = None /\
  real_simp_rel1
       {| real_simp_rel_st_func = func;
         real_simp_rel_st_r1s = UC_KEReal._st_Pt1{1};
         real_simp_rel_st_r2s = UC_KEReal._st_Pt2{1};
         real_simp_rel_st_fws1 = UC_Fw1.IF._st{1};
         real_simp_rel_st_fws2 = UC_Fw2.IF._st{1};
         real_simp_rel_st_rss = KERealSimp._st{2}; |} pt1 pt2 q1
     ).
         call{1} (RFCore.MakeRF_after_core_error UC_KEReal).
         skip. move => />.
         rcondf{1} 0.
         trivial.
         sp.
         skip.  
         smt(RealSimpRel1).
rcondf{1} 0.  auto; progress; smt.
sp.
    seq 1 0 : (! not_done{1} /\ r0{1} = None /\ r{2} = None /\
  real_simp_rel1
       {| real_simp_rel_st_func = func;
         real_simp_rel_st_r1s = UC_KEReal._st_Pt1{1};
         real_simp_rel_st_r2s = UC_KEReal._st_Pt2{1};
         real_simp_rel_st_fws1 = UC_Fw1.IF._st{1};
         real_simp_rel_st_fws2 = UC_Fw2.IF._st{1};
         real_simp_rel_st_rss = KERealSimp._st{2}; |} pt1 pt2 q1
     ).
         call{1} (RFCore.MakeRF_after_core_error UC_KEReal).
         skip. move => />.
         rcondf{1} 0.
         trivial.
         sp.
         skip.  
         smt(RealSimpRel1).
sp.
    seq 1 0 : (! not_done{1} /\ r0{1} = None /\ r{2} = None /\
  real_simp_rel1
       {| real_simp_rel_st_func = func;
         real_simp_rel_st_r1s = UC_KEReal._st_Pt1{1};
         real_simp_rel_st_r2s = UC_KEReal._st_Pt2{1};
         real_simp_rel_st_fws1 = UC_Fw1.IF._st{1};
         real_simp_rel_st_fws2 = UC_Fw2.IF._st{1};
         real_simp_rel_st_rss = KERealSimp._st{2}; |} pt1 pt2 q1
     ).
         call{1} (RFCore.MakeRF_after_core_error UC_KEReal).
         skip. move => />.
         rcondf{1} 0.
         trivial.
         sp.
         skip.  
         smt(RealSimpRel1).


    
 case
 (exists (pt1 pt2 : port, q1 q2 : exp),
   real_simp_rel2
   {|real_simp_rel_st_func = func;
     real_simp_rel_st_r1s  = UC_KEReal._st_Pt1{1};
     real_simp_rel_st_r2s  = UC_KEReal._st_Pt2{1};
     real_simp_rel_st_fws1 = UC_Fw1.IF._st{1};
     real_simp_rel_st_fws2 = UC_Fw2.IF._st{1};
     real_simp_rel_st_rss  = KERealSimp._st{2}|}
     pt1
     pt2
     q1
     q2
 ).
     sp.
     elim* => pt1 pt2 q1 q2.
     case(KERealSimp._st{2} =
     KERealSimpStateWaitReq2 pt1 pt2 q1 q2); last first. exfalso. auto. smt().
 match KERealSimpStateWaitReq2 {2} 0. auto; smt().
     if{2}; last first.
     (*not a Dir msg with extport Pt2*)
if{1}; last first. skip. auto; smt().
inline loop.
     sp.
 rcondt{1} 0. auto; smt().
inline invoke.
     sp.
     if{1}. sp. if{1}.
 inline parties.
     sp.
 match _State_IF_Final {1} 0. auto; progress; smt().
sp.
    seq 1 0 : (! not_done{1} /\ r0{1} = None /\ r{2} = None /\
  real_simp_rel2
       {| real_simp_rel_st_func = func;
         real_simp_rel_st_r1s = UC_KEReal._st_Pt1{1};
         real_simp_rel_st_r2s = UC_KEReal._st_Pt2{1};
         real_simp_rel_st_fws1 = UC_Fw1.IF._st{1};
         real_simp_rel_st_fws2 = UC_Fw2.IF._st{1};
         real_simp_rel_st_rss = KERealSimp._st{2}; |} pt1 pt2 q1 q2
     ).
         call{1} (RFCore.MakeRF_after_core_error UC_KEReal).
         skip. move => />.
         rcondf{1} 0.
         trivial.
         sp.
         skip.  
         smt(RealSimpRel2).
     sp.
    seq 1 0 : (! not_done{1} /\ r0{1} = None /\ r{2} = None /\
  real_simp_rel2
       {| real_simp_rel_st_func = func;
         real_simp_rel_st_r1s = UC_KEReal._st_Pt1{1};
         real_simp_rel_st_r2s = UC_KEReal._st_Pt2{1};
         real_simp_rel_st_fws1 = UC_Fw1.IF._st{1};
         real_simp_rel_st_fws2 = UC_Fw2.IF._st{1};
         real_simp_rel_st_rss = KERealSimp._st{2}; |} pt1 pt2 q1 q2
     ).
         call{1} (RFCore.MakeRF_after_core_error UC_KEReal).
         skip. move => />.
         rcondf{1} 0.
         trivial.
         sp.
         skip.  
         smt(RealSimpRel2).
if{1}. sp. if{1}.
 inline parties.
     sp.
          match _State_IF_Init {1} 0. auto; smt().
         match None {1} 0. auto; progress; smt(not_le_ext_nonnil_l UC_Fw2.UC_FwDir.D.valid_epdp__fw_req
        UC_Fw2.UC_FwDir.D.eq_of_valid__fw_req).
sp.
    seq 1 0 : (! not_done{1} /\ r0{1} = None /\ r{2} = None /\
  real_simp_rel2
       {| real_simp_rel_st_func = func;
         real_simp_rel_st_r1s = UC_KEReal._st_Pt1{1};
         real_simp_rel_st_r2s = UC_KEReal._st_Pt2{1};
         real_simp_rel_st_fws1 = UC_Fw1.IF._st{1};
         real_simp_rel_st_fws2 = UC_Fw2.IF._st{1};
         real_simp_rel_st_rss = KERealSimp._st{2}; |} pt1 pt2 q1 q2
     ).
         call{1} (RFCore.MakeRF_after_core_error UC_KEReal).
         skip. move => />.
         rcondf{1} 0.
         trivial.
         sp.
         skip.  
         smt(RealSimpRel2).
     sp.
    seq 1 0 : (! not_done{1} /\ r0{1} = None /\ r{2} = None /\
  real_simp_rel2
       {| real_simp_rel_st_func = func;
         real_simp_rel_st_r1s = UC_KEReal._st_Pt1{1};
         real_simp_rel_st_r2s = UC_KEReal._st_Pt2{1};
         real_simp_rel_st_fws1 = UC_Fw1.IF._st{1};
         real_simp_rel_st_fws2 = UC_Fw2.IF._st{1};
         real_simp_rel_st_rss = KERealSimp._st{2}; |} pt1 pt2 q1 q2
     ).
         call{1} (RFCore.MakeRF_after_core_error UC_KEReal).
         skip. move => />.
         rcondf{1} 0.
         trivial.
         sp.
         skip.  
         smt(RealSimpRel2).

if{1}.
         inline party_Pt1.
sp.
case(UC_KEReal._st_Pt1{1} = _State_Pt1_WaitFwd2 pt1 q1); last first. exfalso. auto. smt().
match _State_Pt1_WaitFwd2 {1} 0. auto; smt().
match{1}.
sp.
    seq 1 0 : (! not_done{1} /\ r0{1} = None /\ r{2} = None /\
  real_simp_rel2
       {| real_simp_rel_st_func = func;
         real_simp_rel_st_r1s = UC_KEReal._st_Pt1{1};
         real_simp_rel_st_r2s = UC_KEReal._st_Pt2{1};
         real_simp_rel_st_fws1 = UC_Fw1.IF._st{1};
         real_simp_rel_st_fws2 = UC_Fw2.IF._st{1};
         real_simp_rel_st_rss = KERealSimp._st{2}; |} pt1 pt2 q1 q2
     ).
         call{1} (RFCore.MakeRF_after_core_error UC_KEReal).
         skip. move => />.
         rcondf{1} 0.
         trivial.
         sp.
         skip.  
         smt(RealSimpRel2).
         rcondf{1} 0. auto; progress; smt.
sp.
    seq 1 0 : (! not_done{1} /\ r0{1} = None /\ r{2} = None /\
  real_simp_rel2
       {| real_simp_rel_st_func = func;
         real_simp_rel_st_r1s = UC_KEReal._st_Pt1{1};
         real_simp_rel_st_r2s = UC_KEReal._st_Pt2{1};
         real_simp_rel_st_fws1 = UC_Fw1.IF._st{1};
         real_simp_rel_st_fws2 = UC_Fw2.IF._st{1};
         real_simp_rel_st_rss = KERealSimp._st{2}; |} pt1 pt2 q1 q2
     ).
         call{1} (RFCore.MakeRF_after_core_error UC_KEReal).
         skip. move => />.
         rcondf{1} 0.
         trivial.
         sp.
         skip.  
         smt(RealSimpRel2).
if{1}.
inline UC_KEReal.party_Pt2.
         sp.
         match _State_Pt2_WaitReq2 {1} 0. auto;smt().
     match None {1} 0. auto; smt(UC_KEDir.Pt2.valid_epdp__ke_req2
        UC_KEDir.Pt2.eq_of_valid__ke_req2).
         
sp.
    seq 1 0 : (! not_done{1} /\ r0{1} = None /\ r{2} = None /\
  real_simp_rel2
       {| real_simp_rel_st_func = func;
         real_simp_rel_st_r1s = UC_KEReal._st_Pt1{1};
         real_simp_rel_st_r2s = UC_KEReal._st_Pt2{1};
         real_simp_rel_st_fws1 = UC_Fw1.IF._st{1};
         real_simp_rel_st_fws2 = UC_Fw2.IF._st{1};
         real_simp_rel_st_rss = KERealSimp._st{2}; |} pt1 pt2 q1 q2
     ).
         call{1} (RFCore.MakeRF_after_core_error UC_KEReal).
         skip. move => />.
         rcondf{1} 0.
         trivial.
         sp.
         skip.  
         smt(RealSimpRel2).
     sp.
    seq 1 0 : (! not_done{1} /\ r0{1} = None /\ r{2} = None /\
  real_simp_rel2
       {| real_simp_rel_st_func = func;
         real_simp_rel_st_r1s = UC_KEReal._st_Pt1{1};
         real_simp_rel_st_r2s = UC_KEReal._st_Pt2{1};
         real_simp_rel_st_fws1 = UC_Fw1.IF._st{1};
         real_simp_rel_st_fws2 = UC_Fw2.IF._st{1};
         real_simp_rel_st_rss = KERealSimp._st{2}; |} pt1 pt2 q1 q2
     ).
         call{1} (RFCore.MakeRF_after_core_error UC_KEReal).
         skip. move => />.
         rcondf{1} 0.
         trivial.
         sp.
         skip.  
         smt(RealSimpRel2).

         match{2}.
     (*Dir msg with extport Pt2 but ke_req2 does not decode*)
         if{1}.
inline loop.
         sp.
         rcondt{1} 0. auto; smt().
inline invoke.
         sp.
         rcondf{1} 0. auto; progress; smt(not_le_ext_nonnil_l).
     rcondf{1} 0. auto; progress; smt(not_le_ext_nonnil_l).
rcondf{1} 0. auto; progress; smt().
rcondt{1} 0. auto; progress; smt().
         inline party_Pt2.
         sp.
         case (UC_KEReal._st_Pt2{1} = _State_Pt2_WaitReq2 pt2 q2); last first.
         exfalso. auto; progress; smt().
match _State_Pt2_WaitReq2 {1} 0. auto; progress; smt().
         case(UC_KEDir.Pt2.epdp__ke_req2.`dec _m{1} = None); last first.
         exfalso. auto; progress;
         smt(UC_KEDir.Pt2.valid_epdp__ke_req2 UC_KEDir.Pt2.eq_of_valid__ke_req2).
         match None {1} 0.  auto; progress; smt().
sp.
    seq 1 0 : (! not_done{1} /\ r0{1} = None /\ r{2} = None /\
  real_simp_rel2
       {| real_simp_rel_st_func = func;
         real_simp_rel_st_r1s = UC_KEReal._st_Pt1{1};
         real_simp_rel_st_r2s = UC_KEReal._st_Pt2{1};
         real_simp_rel_st_fws1 = UC_Fw1.IF._st{1};
         real_simp_rel_st_fws2 = UC_Fw2.IF._st{1};
         real_simp_rel_st_rss = KERealSimp._st{2}; |} pt1 pt2 q1 q2
     ).
         call{1} (RFCore.MakeRF_after_core_error UC_KEReal).
         skip. move => />.
         rcondf{1} 0.
         trivial.
         sp.
         skip.  
         smt(RealSimpRel2).
skip.  
         smt(RealSimpRel2).

 (*Dir msg with extport Pt2 ke_req2 decodes*)
if{1}.
inline loop.
         sp.
         rcondt{1} 0. auto; smt().
inline invoke.
         sp.
         rcondf{1} 0. auto; progress; smt(not_le_ext_nonnil_l).
     rcondf{1} 0. auto; progress; smt(not_le_ext_nonnil_l).
rcondf{1} 0. auto; progress; smt().
rcondt{1} 0. auto; progress; smt().
         inline party_Pt2.
         sp.
         case (UC_KEReal._st_Pt2{1} = _State_Pt2_WaitReq2 pt2 q2); last first.
         exfalso. auto; progress; smt().
match _State_Pt2_WaitReq2 {1} 0. auto; progress; smt().
case(UC_KEDir.Pt2.epdp__ke_req2.`dec _m{1} = Some _x{2}); last first.
         exfalso. auto; progress;
         smt(UC_KEDir.Pt2.valid_epdp__ke_req2 UC_KEDir.Pt2.eq_of_valid__ke_req2).
match Some {1} 0. auto; progress; smt(). 
         inline _State_KERealSimpStateWaitReq2__KEDir__Pt2__ke_req2.
     sp 0 8.
         if{2}; last first.
     (*pt2 port is different than original*)
         sp.
         inline _State_Pt2_WaitReq2__KEDir__Pt2__ke_req2.
rcondf{1} 5. auto; progress; smt().
sp.
    seq 1 0 : (! not_done{1} /\ r0{1} = None /\ r{2} = None /\
  real_simp_rel2
       {| real_simp_rel_st_func = func;
         real_simp_rel_st_r1s = UC_KEReal._st_Pt1{1};
         real_simp_rel_st_r2s = UC_KEReal._st_Pt2{1};
         real_simp_rel_st_fws1 = UC_Fw1.IF._st{1};
         real_simp_rel_st_fws2 = UC_Fw2.IF._st{1};
         real_simp_rel_st_rss = KERealSimp._st{2}; |} pt1 pt2 q1 q2
     ).
         call{1} (RFCore.MakeRF_after_core_error UC_KEReal).
         skip. move => />.
         rcondf{1} 0.
         trivial.
         sp.
         skip.  
         smt(RealSimpRel2).
         (*pt2 port is same as original*)
inline _State_Pt2_WaitReq2__KEDir__Pt2__ke_req2.
         rcondt{1} 5. auto; progress; smt().
     sp.
     
seq 1 0 : (
       not_done{1} = true /\
       
         UC_KEDir.Pt2.epdp__ke_req2.`dec m{2} = Some _x{2} /\
       _x{2}.`UC_KEDir.Pt2.ke_req2__pt2 = pt2 /\
     m{2}.`1 = Dir /\
     envport func m{2}.`3 /\
         m{2}.`2 = _extport_Pt2 func  /\
    
      r{2} = Some (UC_Fw2.UC_FwAdv.epdp__fw_obs.`enc
         {| UC_Fw2.UC_FwAdv.fw_obs___func = _addr_Fw2 func;
           UC_Fw2.UC_FwAdv.fw_obs___adv = adv;
           UC_Fw2.UC_FwAdv.fw_obs__pt1 = _intport_Pt2 func;
           UC_Fw2.UC_FwAdv.fw_obs__pt2 = _intport_Pt1 func;
           UC_Fw2.UC_FwAdv.fw_obs__u = epdp_key_univ.`enc (g ^ q2) ; |}) /\
       m0{1} = (UC_Fw2.UC_FwDir.D.epdp__fw_req.`enc
         {| UC_Fw2.UC_FwDir.D.fw_req___func = _addr_Fw2 func;
           UC_Fw2.UC_FwDir.D.fw_req__pt1 = _intport_Pt2 func;
           UC_Fw2.UC_FwDir.D.fw_req__pt2 = _intport_Pt1 func;
           UC_Fw2.UC_FwDir.D.fw_req__u = epdp_key_univ.`enc (g ^ q2); |})   /\
       r0{1} = Some m0{1} /\
      
       inc func adv /\
     ={m} /\
     
         mi_invoke_loop_calls_func_invoke func m{1} /\
         RFIP.self{1} = func /\
         UC_KEReal._self{1} = func /\
         UC_Fw1.IF._self{1} = _addr_Fw1 func /\
         UC_Fw2.IF._self{1} = _addr_Fw2 func /\
         KERealSimp._self{2} = func /\

       KERealSimp._st{2} = KERealSimpStateWaitAdv2 pt1 pt2 q1 q2/\
     (envport func pt1) /\
 (envport func pt2) /\
  (UC_KEReal._st_Pt1{1}  = _State_Pt1_WaitFwd2 pt1 q1) /\
  (UC_KEReal._st_Pt2{1}  = _State_Pt2_Final) /\
  (UC_Fw1.IF._st{1} = UC_Fw1._State_IF_Final) /\
  (UC_Fw2.IF._st{1} = UC_Fw2._State_IF_Init)
  ).

exlim r0{1} => r0.
call{1} (RFCore.MakeRF_after_core_continue UC_KEReal r0).
      skip. smt().

rcondt{1} 0. by auto.
      sp.
      rcondf{1} 0. move => &m. skip. 
move => &hr P. 
      have H: m2{hr}.`2.`1 = _addr_Fw2 func. smt(). rewrite H.
      have I : UC_KEReal._self{hr} = func. smt(). rewrite I.
  rewrite /_addr_Fw1 /_addr_Fw2.
      smt(sing_not_le).
rcondt{1} 0. auto.  
      sp.
      rcondt{1} 0.
  move => &m. skip. move=> &hr P.
      have H : m6{hr}.`2.`1 = UC_Fw2.UC_Forw._self{hr}. smt().
      rewrite H //=. clear H.
  have H : m6{hr}.`1 = Dir. smt().
      rewrite H //=. clear H.
      have H : UC_Fw2.UC_Forw._self{hr} = _addr_Fw2 func. smt().
      rewrite H //=. clear H.
  have H : m6{hr}.`3 = _intport_Pt2 func. smt().
  rewrite H //=. clear H. smt.

inline parties.  
      sp.
      case(UC_Fw2.UC_Forw._st{1} = UC_Fw2._State_IF_Init); last first. exfalso. smt().
      match _State_IF_Init {1} 0. auto.
case(UC_Fw2.UC_FwDir.D.epdp__fw_req.`dec _m1{1} =Some {| UC_Fw2.UC_FwDir.D.fw_req___func = _addr_Fw2 func;
           UC_Fw2.UC_FwDir.D.fw_req__pt1 = _intport_Pt2 func;
           UC_Fw2.UC_FwDir.D.fw_req__pt2 = _intport_Pt1 func;
      UC_Fw2.UC_FwDir.D.fw_req__u = epdp_key_univ.`enc (g ^ q2); |});
      last first. exfalso.
move => &1 &2 P.
have H : UC_Fw2.UC_FwDir.D.epdp__fw_req.`dec m0{1} =
   Some
  {| UC_Fw2.UC_FwDir.D.fw_req___func = _addr_Fw2 func;
    UC_Fw2.UC_FwDir.D.fw_req__pt1 = _intport_Pt2 func;
    UC_Fw2.UC_FwDir.D.fw_req__pt2 = _intport_Pt1 func;
    UC_Fw2.UC_FwDir.D.fw_req__u = epdp_key_univ.`enc (g ^ q2); |}.
    smt.
    have I : m0{1} = _m1{1} . smt().
  move : H.
    rewrite I.
  smt().

match Some {1} 0. auto; smt().
inline _State_IF_Init__FwDir__D__fw_req.
rcondt{1} 5. auto; smt.
sp.

    seq 1 0 : (! not_done{1} /\
    r0{1} = r{2} /\
  real_simp_rel3
    {| real_simp_rel_st_func = func;
      real_simp_rel_st_r1s = UC_KEReal._st_Pt1{1};
      real_simp_rel_st_r2s = UC_KEReal._st_Pt2{1};
      real_simp_rel_st_fws1 = UC_Fw1.IF._st{1};
      real_simp_rel_st_fws2 = UC_Fw2.IF._st{1};
      real_simp_rel_st_rss = KERealSimp._st{2}; |} pt1 pt2 q1 q2
  ).

exlim r0{1} => r0.
call{1} (RFCore.MakeRF_after_core_return UC_KEReal r0).
      skip.
  
  move => &1 &2 P.
  smt(UC_Fw2.UC_FwDir.D.eq_of_valid__fw_req
      UC_Fw2.UC_FwDir.D.valid_epdp__fw_req
        _adv_pi_begin_gt0
        UC_Fw2.UC_FwAdv.valid_epdp__fw_obs
      UC_Fw2.UC_FwAdv.eq_of_valid__fw_obs).
rcondf{1} 0. auto.
sp. skip. smt(RealSimpRel3).  
exfalso. smt().

case
 (exists (pt1 pt2 : port, q1 q2 : exp),
   real_simp_rel3
   {|real_simp_rel_st_func = func;
     real_simp_rel_st_r1s  = UC_KEReal._st_Pt1{1};
     real_simp_rel_st_r2s  = UC_KEReal._st_Pt2{1};
     real_simp_rel_st_fws1 = UC_Fw1.IF._st{1};
     real_simp_rel_st_fws2 = UC_Fw2.IF._st{1};
     real_simp_rel_st_rss  = KERealSimp._st{2}|}
     pt1
     pt2
     q1
     q2
 ).
     sp.
 elim*=> pt1 pt2 q1 q2.

case(KERealSimp._st{2} = KERealSimpStateWaitAdv2 pt1 pt2 q1 q2); last first. exfalso. auto; progress; smt().
match KERealSimpStateWaitAdv2 {2} 0. auto; smt().
     if{2}; last first.
     (*not adv msg for Fw2*)
 if{1}; last first. auto; smt().
inline loop.
     sp.
     rcondt{1} 0. auto; smt().
 inline invoke.
     sp.
     if{1}.
     sp.
     if{1}; last first.
 sp.
seq 1 0 : (! not_done{1} /\ r0{1} = None /\ r{2} = None /\
  real_simp_rel3
       {| real_simp_rel_st_func = func;
         real_simp_rel_st_r1s = UC_KEReal._st_Pt1{1};
         real_simp_rel_st_r2s = UC_KEReal._st_Pt2{1};
         real_simp_rel_st_fws1 = UC_Fw1.IF._st{1};
         real_simp_rel_st_fws2 = UC_Fw2.IF._st{1};
         real_simp_rel_st_rss = KERealSimp._st{2}; |} pt1 pt2 q1 q2
     ).
         call{1} (RFCore.MakeRF_after_core_error UC_KEReal).
         skip. move => />.
         rcondf{1} 0.
         trivial.
         sp.
         skip.  
         smt(RealSimpRel3).
     
         inline parties.
         sp.
         case(UC_Fw1.UC_Forw._st{1} = UC_Fw1._State_IF_Final); last first.
         exfalso. auto; smt().
         match _State_IF_Final {1} 0. auto; smt().
     sp.
seq 1 0 : (! not_done{1} /\ r0{1} = None /\ r{2} = None /\
  real_simp_rel3
       {| real_simp_rel_st_func = func;
         real_simp_rel_st_r1s = UC_KEReal._st_Pt1{1};
         real_simp_rel_st_r2s = UC_KEReal._st_Pt2{1};
         real_simp_rel_st_fws1 = UC_Fw1.IF._st{1};
         real_simp_rel_st_fws2 = UC_Fw2.IF._st{1};
         real_simp_rel_st_rss = KERealSimp._st{2}; |} pt1 pt2 q1 q2
     ).
         call{1} (RFCore.MakeRF_after_core_error UC_KEReal).
         skip. move => />.
         rcondf{1} 0.
         trivial.
         sp.
         skip.  
         smt(RealSimpRel3).

if{1}.
     sp.
     if{1}; last first.
 sp.
seq 1 0 : (! not_done{1} /\ r0{1} = None /\ r{2} = None /\
  real_simp_rel3
       {| real_simp_rel_st_func = func;
         real_simp_rel_st_r1s = UC_KEReal._st_Pt1{1};
         real_simp_rel_st_r2s = UC_KEReal._st_Pt2{1};
         real_simp_rel_st_fws1 = UC_Fw1.IF._st{1};
         real_simp_rel_st_fws2 = UC_Fw2.IF._st{1};
         real_simp_rel_st_rss = KERealSimp._st{2}; |} pt1 pt2 q1 q2
     ).
         call{1} (RFCore.MakeRF_after_core_error UC_KEReal).
         skip. move => />.
         rcondf{1} 0.
         trivial.
         sp.
         skip.  
         smt(RealSimpRel3).
     
         inline parties.
         sp.
     case(UC_Fw2.UC_Forw._st{1} = UC_Fw2._State_IF_Wait pt1 pt2 (epdp_key_univ.`enc (g ^ q2))); last first.
         exfalso. auto; smt.
         match _State_IF_Wait {1} 0. auto; smt().
         case(UC_Fw2.UC_FwAdv.epdp__fw_ok.`dec _m{1} = None); last first.
         exfalso. auto;smt.
     match None {1} 0. auto; smt().
     sp.
seq 1 0 : (! not_done{1} /\ r0{1} = None /\ r{2} = None /\
  real_simp_rel3
       {| real_simp_rel_st_func = func;
         real_simp_rel_st_r1s = UC_KEReal._st_Pt1{1};
         real_simp_rel_st_r2s = UC_KEReal._st_Pt2{1};
         real_simp_rel_st_fws1 = UC_Fw1.IF._st{1};
         real_simp_rel_st_fws2 = UC_Fw2.IF._st{1};
         real_simp_rel_st_rss = KERealSimp._st{2}; |} pt1 pt2 q1 q2
     ).
         call{1} (RFCore.MakeRF_after_core_error UC_KEReal).
         skip. move => />.
         rcondf{1} 0.
         trivial.
         sp.
         skip.  
         smt(RealSimpRel3).

if{1}.
         inline party_Pt1.
sp.
         case(UC_KEReal._st_Pt1{1} =  _State_Pt1_WaitFwd2 pt1 q1); last first.
     exfalso. auto;smt().
match _State_Pt1_WaitFwd2 {1} 0. auto;smt().
match{1}.
sp.
seq 1 0 : (! not_done{1} /\ r0{1} = None /\ r{2} = None /\
  real_simp_rel3
       {| real_simp_rel_st_func = func;
         real_simp_rel_st_r1s = UC_KEReal._st_Pt1{1};
         real_simp_rel_st_r2s = UC_KEReal._st_Pt2{1};
         real_simp_rel_st_fws1 = UC_Fw1.IF._st{1};
         real_simp_rel_st_fws2 = UC_Fw2.IF._st{1};
         real_simp_rel_st_rss = KERealSimp._st{2}; |} pt1 pt2 q1 q2
     ).
         call{1} (RFCore.MakeRF_after_core_error UC_KEReal).
         skip. move => />.
         rcondf{1} 0.
         trivial.
         sp.
         skip.  
         smt(RealSimpRel3).
         rcondf{1} 0.
     move => &m. skip. move=> &hr.
         have H : mi_invoke_loop_calls_func_invoke func m{hr} => m{hr}.`3.`1 <> _addr_Fw2 func. auto;smt.
move => P. auto;smt().
sp.
seq 1 0 : (! not_done{1} /\ r0{1} = None /\ r{2} = None /\
  real_simp_rel3
       {| real_simp_rel_st_func = func;
         real_simp_rel_st_r1s = UC_KEReal._st_Pt1{1};
         real_simp_rel_st_r2s = UC_KEReal._st_Pt2{1};
         real_simp_rel_st_fws1 = UC_Fw1.IF._st{1};
         real_simp_rel_st_fws2 = UC_Fw2.IF._st{1};
         real_simp_rel_st_rss = KERealSimp._st{2}; |} pt1 pt2 q1 q2
     ).
         call{1} (RFCore.MakeRF_after_core_error UC_KEReal).
         skip. move => />.
         rcondf{1} 0.
         trivial.
         sp.
         skip.  
         smt(RealSimpRel3).

         if{1}.
     inline party_Pt2.
         sp.
         case(UC_KEReal._st_Pt2{1} = _State_Pt2_Final); last first. exfalso. auto; smt().
     match _State_Pt2_Final {1} 0. auto; smt().
sp.
seq 1 0 : (! not_done{1} /\ r0{1} = None /\ r{2} = None /\
  real_simp_rel3
       {| real_simp_rel_st_func = func;
         real_simp_rel_st_r1s = UC_KEReal._st_Pt1{1};
         real_simp_rel_st_r2s = UC_KEReal._st_Pt2{1};
         real_simp_rel_st_fws1 = UC_Fw1.IF._st{1};
         real_simp_rel_st_fws2 = UC_Fw2.IF._st{1};
         real_simp_rel_st_rss = KERealSimp._st{2}; |} pt1 pt2 q1 q2
     ).
         call{1} (RFCore.MakeRF_after_core_error UC_KEReal).
         skip. move => />.
         rcondf{1} 0.
         trivial.
         sp.
         skip.  
         smt(RealSimpRel3).
sp.
seq 1 0 : (! not_done{1} /\ r0{1} = None /\ r{2} = None /\
  real_simp_rel3
       {| real_simp_rel_st_func = func;
         real_simp_rel_st_r1s = UC_KEReal._st_Pt1{1};
         real_simp_rel_st_r2s = UC_KEReal._st_Pt2{1};
         real_simp_rel_st_fws1 = UC_Fw1.IF._st{1};
         real_simp_rel_st_fws2 = UC_Fw2.IF._st{1};
         real_simp_rel_st_rss = KERealSimp._st{2}; |} pt1 pt2 q1 q2
     ).
         call{1} (RFCore.MakeRF_after_core_error UC_KEReal).
         skip. move => />.
         rcondf{1} 0.
         trivial.
         sp.
         skip.  
         smt(RealSimpRel3).

     match{2}.
         (*adv msg for Fw2 but fw_ok does not decode*)
         rcondt{1} 0. auto; smt().
     inline loop.
         sp.
         rcondt{1} 0. auto; smt().
         inline invoke.
         sp.
if{1}. sp. if{1}.
inline parties. sp.
         match _State_IF_Final {1} 0. auto; smt().
     sp.
seq 1 0 : (! not_done{1} /\ r0{1} = None /\ r{2} = None /\
  real_simp_rel3
       {| real_simp_rel_st_func = func;
         real_simp_rel_st_r1s = UC_KEReal._st_Pt1{1};
         real_simp_rel_st_r2s = UC_KEReal._st_Pt2{1};
         real_simp_rel_st_fws1 = UC_Fw1.IF._st{1};
         real_simp_rel_st_fws2 = UC_Fw2.IF._st{1};
         real_simp_rel_st_rss = KERealSimp._st{2}; |} pt1 pt2 q1 q2
     ).
         call{1} (RFCore.MakeRF_after_core_error UC_KEReal).
         skip. move => />.
         rcondf{1} 0.
         trivial.
         sp.
         skip.  
         smt(RealSimpRel3).
sp.
seq 1 0 : (! not_done{1} /\ r0{1} = None /\ r{2} = None /\
  real_simp_rel3
       {| real_simp_rel_st_func = func;
         real_simp_rel_st_r1s = UC_KEReal._st_Pt1{1};
         real_simp_rel_st_r2s = UC_KEReal._st_Pt2{1};
         real_simp_rel_st_fws1 = UC_Fw1.IF._st{1};
         real_simp_rel_st_fws2 = UC_Fw2.IF._st{1};
         real_simp_rel_st_rss = KERealSimp._st{2}; |} pt1 pt2 q1 q2
     ).
         call{1} (RFCore.MakeRF_after_core_error UC_KEReal).
         skip. move => />.
         rcondf{1} 0.
         trivial.
         sp.
         skip.  
         smt(RealSimpRel3).
         
         rcondt{1} 0. auto; smt.
         sp.
         rcondt{1} 0. auto; smt.
         inline parties.
sp.

         match _State_IF_Wait {1} 0. auto; smt().
     match None {1} 0. auto; smt().
     sp.
seq 1 0 : (! not_done{1} /\ r0{1} = None /\ r{2} = None /\
  real_simp_rel3
       {| real_simp_rel_st_func = func;
         real_simp_rel_st_r1s = UC_KEReal._st_Pt1{1};
         real_simp_rel_st_r2s = UC_KEReal._st_Pt2{1};
         real_simp_rel_st_fws1 = UC_Fw1.IF._st{1};
         real_simp_rel_st_fws2 = UC_Fw2.IF._st{1};
         real_simp_rel_st_rss = KERealSimp._st{2}; |} pt1 pt2 q1 q2
     ).
         call{1} (RFCore.MakeRF_after_core_error UC_KEReal).
         skip. move => />.
         rcondf{1} 0.
         trivial.
         sp.
         skip.  
         smt(RealSimpRel3).
     
         (*adv msg for Fw2 and fw_ok decodes*)
         rcondt{1} 0. auto;smt().
     inline loop.
         sp.
         rcondt{1} 0. auto; smt().
         inline invoke.
         sp.
         rcondf{1} 0. auto; progress; smt.
         rcondt{1} 0. auto; smt.
         sp.
         rcondt{1} 0. auto; smt.
         inline parties.
         sp.
case(UC_Fw2.IF._st{1} = UC_Fw2._State_IF_Wait (_intport_Pt2 func) (_intport_Pt1 func) (epdp_key_univ.`enc (g ^ q2)));last first. exfalso. auto;progress;smt().     
         match _State_IF_Wait {1} 0. auto; smt().
match Some {1} 0. auto; smt(UC_Fw1.UC_FwAdv.valid_epdp__fw_ok UC_Fw1.UC_FwAdv.eq_of_valid__fw_ok).
         inline _State_IF_Wait__FwAdv__fw_ok.
   rcondt{1} 5.
   move => &m. sp. skip. move => &hr. auto; progress; smt.
       sp. simplify.

      seq 1 0 : (
     not_done{1} = true /\
       
         UC_Fw2.UC_FwAdv.epdp__fw_ok.`dec m{1} = Some _x{1} /\
     m{2}.`1 = Adv /\
      m{2}.`3.`1 = adv /\ _addr_Fw2 func = m{2}.`2.`1 /\
    
      r{2} = None /\
       r0{1} = Some m0{1} /\
      
       inc func adv /\
     ={m} /\ m0{1} = UC_Fw2.UC_FwDir.D.epdp__fw_rsp.`enc
         {| UC_Fw2.UC_FwDir.D.fw_rsp___func = _addr_Fw2 func;
           UC_Fw2.UC_FwDir.D.fw_rsp__pt2 = _intport_Pt1 func;
           UC_Fw2.UC_FwDir.D.fw_rsp__pt1 = _intport_Pt2 func;
           UC_Fw2.UC_FwDir.D.fw_rsp__u = (epdp_key_univ.`enc (g ^ q2)); |} /\
     
         mi_invoke_loop_calls_func_invoke func m{1} /\
         RFIP.self{1} = func /\
         UC_KEReal._self{1} = func /\
         UC_Fw1.IF._self{1} = _addr_Fw1 func /\
         UC_Fw2.IF._self{1} = _addr_Fw2 func /\
         KERealSimp._self{2} = func /\

       KERealSimp._st{2} = KERealSimpStateWaitAdv2 pt1 pt2 q1 q2/\
     (envport func pt1) /\
     (envport func pt2) /\
       pt1{!2} = pt1 /\
       pt2{!2} = pt2 /\
     pt1{!1} = _intport_Pt2 func /\
       pt2{!1} = _intport_Pt1 func /\
       q1{!1} = q1 /\
       q2{!1} = q2 /\
      q1{!2} = q1 /\
       q2{!2} = q2 /\
  (UC_KEReal._st_Pt1{1}  = _State_Pt1_WaitFwd2 pt1 q1) /\
  (UC_KEReal._st_Pt2{1}  = _State_Pt2_Final) /\
  (UC_Fw1.IF._st{1} = UC_Fw1._State_IF_Final) /\
  (UC_Fw2.IF._st{1} = UC_Fw2._State_IF_Final)
  ).

exlim r0{1} => r0.
call{1} (RFCore.MakeRF_after_core_continue UC_KEReal r0).
      skip. move => &1 &2 P.  smt(UC_Fw2.UC_FwDir.D.valid_epdp__fw_rsp UC_Fw2.UC_FwDir.D.eq_of_valid__fw_rsp).

      rcondt{1} 0. auto;smt().
  sp.
rcondf{1} 0. auto;smt.
      rcondf{1} 0. auto;smt.
      rcondt{1} 0. auto;smt.
  inline party_Pt1.
      sp.
     
      match _State_Pt1_WaitFwd2 {1} 0. auto;smt().
 
           match Some {1} 0. auto;progress;smt(UC_Fw2.UC_FwDir.D.valid_epdp__fw_rsp UC_Fw2.UC_FwDir.D.eq_of_valid__fw_rsp).
           rcondt{1} 0. auto;smt.
       inline _State_Pt1_WaitFwd2__Fw2__D__fw_rsp.
      sp.
      case (epdp_key_univ.`dec u3{1} = Some (g ^ q2)); last first.
      exfalso. move => &1 &2 P.
have H : epdp_key_univ.`dec u3{1} = Some (g ^ q2).
  have H : UC_Fw2.UC_FwDir.D.epdp__fw_rsp.`dec (UC_Fw2.UC_FwDir.D.epdp__fw_rsp.`enc
    {| UC_Fw2.UC_FwDir.D.fw_rsp___func = _addr_Fw2 func; UC_Fw2.UC_FwDir.D.fw_rsp__pt2 = _intport_Pt1 func;
        UC_Fw2.UC_FwDir.D.fw_rsp__pt1 = _intport_Pt2 func; UC_Fw2.UC_FwDir.D.fw_rsp__u = epdp_key_univ.`enc
        (g ^ q2); |}) = Some {| UC_Fw2.UC_FwDir.D.fw_rsp___func = _addr_Fw2 func; UC_Fw2.UC_FwDir.D.fw_rsp__pt2 = _intport_Pt1 func;
        UC_Fw2.UC_FwDir.D.fw_rsp__pt1 = _intport_Pt2 func; UC_Fw2.UC_FwDir.D.fw_rsp__u = epdp_key_univ.`enc
        (g ^ q2); |}.
          smt(UC_Fw2.UC_FwDir.D.valid_epdp__fw_rsp UC_Fw2.UC_FwDir.D.eq_of_valid__fw_rsp).
      have H' :UC_Fw2.UC_FwDir.D.epdp__fw_rsp.`dec (m0{1}) =
   Some {| UC_Fw2.UC_FwDir.D.fw_rsp___func = _addr_Fw2 func; UC_Fw2.UC_FwDir.D.fw_rsp__pt2 = _intport_Pt1 func;
        UC_Fw2.UC_FwDir.D.fw_rsp__pt1 = _intport_Pt2 func; UC_Fw2.UC_FwDir.D.fw_rsp__u = epdp_key_univ.`enc
        (g ^ q2); |}.
smt().
have H'': _x0{1} = {| UC_Fw2.UC_FwDir.D.fw_rsp___func = _addr_Fw2 func; UC_Fw2.UC_FwDir.D.fw_rsp__pt2 = _intport_Pt1 func;
        UC_Fw2.UC_FwDir.D.fw_rsp__pt1 = _intport_Pt2 func; UC_Fw2.UC_FwDir.D.fw_rsp__u = epdp_key_univ.`enc
        (g ^ q2); |}. smt().
      have U3 : u3{1} = epdp_key_univ.`enc
      (g ^ q2). smt().
      rewrite U3.
smt().
smt().
        
      match Some {1} 0. auto; smt(). 
           rcondt{1} 0. auto;smt().
           sp.
elim* => r0_L r2_L _r5_L _st_Pt1_L _r7_L.
        inline _State_KERealSimpStateWaitAdv2__Fw2_FwAdv__fw_ok.  rcondt{2} 6. auto; progress ; smt().
sp.
seq 1 0 : (! not_done{1} /\
    r0{1} = r{2} /\
  real_simp_rel4
    {| real_simp_rel_st_func = func;
      real_simp_rel_st_r1s = UC_KEReal._st_Pt1{1};
      real_simp_rel_st_r2s = UC_KEReal._st_Pt2{1};
      real_simp_rel_st_fws1 = UC_Fw1.IF._st{1};
      real_simp_rel_st_fws2 = UC_Fw2.IF._st{1};
      real_simp_rel_st_rss = KERealSimp._st{2}; |} 
  ).

  exlim r0{1} => r0.
  elim* => r_R _st_R.
call{1} (RFCore.MakeRF_after_core_return UC_KEReal r0).
      skip.
  
  move => &1 &2 P.
  have H : (r0{!1}, m0{1}.`2.`1).`1 = r0.
  smt(UC_Fw2.UC_FwDir.D.eq_of_valid__fw_rsp
      UC_Fw2.UC_FwDir.D.valid_epdp__fw_rsp
        _adv_pi_begin_gt0
        UC_KEDir.Pt1.valid_epdp__ke_rsp2
      UC_KEDir.Pt1.eq_of_valid__ke_rsp2).
      rewrite H //=. clear H.
  have H : RFCore.after_core_return RFCore.MakeRF.self{1} r0 m0{1}.`2.`1 .
  smt().
      rewrite H //=. clear H.
  move => result Q.
have H : result.`1 = r0.
  smt().
      rewrite H //=. clear H.
have H : ! result.`3.
  smt().
      rewrite H //=. clear H.
have H : r{2} = Some (UC_KEDir.Pt1.epdp__ke_rsp2.`enc
       {| UC_KEDir.Pt1.ke_rsp2___func = KERealSimp._self{2}; UC_KEDir.Pt1.ke_rsp2__pt1 = pt10{2};
         UC_KEDir.Pt1.ke_rsp2__k = g ^ q2 ^ q1; |}). smt().
         rewrite H. clear H.
         have H : pt10{2} = pt1. smt(). rewrite H. clear H.
have H : r0 = Some (UC_KEDir.Pt1.epdp__ke_rsp2.`enc
       {| UC_KEDir.Pt1.ke_rsp2___func = KERealSimp._self{2}; UC_KEDir.Pt1.ke_rsp2__pt1 = pt1;
         UC_KEDir.Pt1.ke_rsp2__k = g ^ q2 ^ q1; |}). smt().
         rewrite H //=. clear H.
smt().     
 
rcondf{1} 0. auto.
sp. skip. smt(RealSimpRel4).
       
 case
 (
   real_simp_rel4
   {|real_simp_rel_st_func = func;
     real_simp_rel_st_r1s  = UC_KEReal._st_Pt1{1};
     real_simp_rel_st_r2s  = UC_KEReal._st_Pt2{1};
     real_simp_rel_st_fws1 = UC_Fw1.IF._st{1};
     real_simp_rel_st_fws2 = UC_Fw2.IF._st{1};
     real_simp_rel_st_rss  = KERealSimp._st{2}|}
 ).
 sp.
     case(KERealSimp._st{2} = KERealSimpStateFinal); last first. exfalso. auto;smt().
 match KERealSimpStateFinal {2} 0. auto;smt().
     if{1};last first. auto;smt().
 inline loop.
     sp.
     rcondt{1} 0. auto;smt().
 inline invoke.
     sp.
     if{1}.
     sp.
     if{1}.
     inline parties.
     sp.
     case(UC_Fw1.UC_Forw._st{1} = UC_Fw1._State_IF_Final);last first.
     exfalso. auto; smt().
     match _State_IF_Final {1} 0. auto;smt().
sp.
seq 1 0 : (! not_done{1} /\ r0{1} = None /\ r{2} = None /\
  real_simp_rel4
       {| real_simp_rel_st_func = func;
         real_simp_rel_st_r1s = UC_KEReal._st_Pt1{1};
         real_simp_rel_st_r2s = UC_KEReal._st_Pt2{1};
         real_simp_rel_st_fws1 = UC_Fw1.IF._st{1};
         real_simp_rel_st_fws2 = UC_Fw2.IF._st{1};
         real_simp_rel_st_rss = KERealSimp._st{2}; |} 
     ).
         call{1} (RFCore.MakeRF_after_core_error UC_KEReal).
         skip. move => />.
         rcondf{1} 0.
         trivial.
         sp.
         skip.  
         smt(RealSimpRel4).

sp.
seq 1 0 : (! not_done{1} /\ r0{1} = None /\ r{2} = None /\
  real_simp_rel4
       {| real_simp_rel_st_func = func;
         real_simp_rel_st_r1s = UC_KEReal._st_Pt1{1};
         real_simp_rel_st_r2s = UC_KEReal._st_Pt2{1};
         real_simp_rel_st_fws1 = UC_Fw1.IF._st{1};
         real_simp_rel_st_fws2 = UC_Fw2.IF._st{1};
         real_simp_rel_st_rss = KERealSimp._st{2}; |} 
     ).
         call{1} (RFCore.MakeRF_after_core_error UC_KEReal).
         skip. move => />.
         rcondf{1} 0.
         trivial.
         sp.
         skip.  
         smt(RealSimpRel4).

     if{1}.
     sp.
     if{1}.
     inline parties.
     sp.
    (* case(UC_Fw2.UC_Forw._st{1} = UC_Fw2._State_IF_Final);last first.
     exfalso. auto; smt().*)
     match _State_IF_Final {1} 0. auto;smt().
sp.
seq 1 0 : (! not_done{1} /\ r0{1} = None /\ r{2} = None /\
  real_simp_rel4
       {| real_simp_rel_st_func = func;
         real_simp_rel_st_r1s = UC_KEReal._st_Pt1{1};
         real_simp_rel_st_r2s = UC_KEReal._st_Pt2{1};
         real_simp_rel_st_fws1 = UC_Fw1.IF._st{1};
         real_simp_rel_st_fws2 = UC_Fw2.IF._st{1};
         real_simp_rel_st_rss = KERealSimp._st{2}; |} 
     ).
         call{1} (RFCore.MakeRF_after_core_error UC_KEReal).
         skip. move => />.
         rcondf{1} 0.
         trivial.
         sp.
         skip.  
         smt(RealSimpRel4).

sp.
seq 1 0 : (! not_done{1} /\ r0{1} = None /\ r{2} = None /\
  real_simp_rel4
       {| real_simp_rel_st_func = func;
         real_simp_rel_st_r1s = UC_KEReal._st_Pt1{1};
         real_simp_rel_st_r2s = UC_KEReal._st_Pt2{1};
         real_simp_rel_st_fws1 = UC_Fw1.IF._st{1};
         real_simp_rel_st_fws2 = UC_Fw2.IF._st{1};
         real_simp_rel_st_rss = KERealSimp._st{2}; |} 
     ).
         call{1} (RFCore.MakeRF_after_core_error UC_KEReal).
         skip. move => />.
         rcondf{1} 0.
         trivial.
         sp.
         skip.  
         smt(RealSimpRel4).
     
         if{1}.
         inline party_Pt1.
         sp.
         match _State_Pt1_Final {1} 0. auto;smt().
     sp.
seq 1 0 : (! not_done{1} /\ r0{1} = None /\ r{2} = None /\
  real_simp_rel4
       {| real_simp_rel_st_func = func;
         real_simp_rel_st_r1s = UC_KEReal._st_Pt1{1};
         real_simp_rel_st_r2s = UC_KEReal._st_Pt2{1};
         real_simp_rel_st_fws1 = UC_Fw1.IF._st{1};
         real_simp_rel_st_fws2 = UC_Fw2.IF._st{1};
         real_simp_rel_st_rss = KERealSimp._st{2}; |} 
     ).
         call{1} (RFCore.MakeRF_after_core_error UC_KEReal).
         skip. move => />.
         rcondf{1} 0.
         trivial.
         sp.
         skip.  
         smt(RealSimpRel4).

     if{1}.
         inline party_Pt2.
         sp.
         match _State_Pt2_Final {1} 0. auto;smt().
     sp.
seq 1 0 : (! not_done{1} /\ r0{1} = None /\ r{2} = None /\
  real_simp_rel4
       {| real_simp_rel_st_func = func;
         real_simp_rel_st_r1s = UC_KEReal._st_Pt1{1};
         real_simp_rel_st_r2s = UC_KEReal._st_Pt2{1};
         real_simp_rel_st_fws1 = UC_Fw1.IF._st{1};
         real_simp_rel_st_fws2 = UC_Fw2.IF._st{1};
         real_simp_rel_st_rss = KERealSimp._st{2}; |} 
     ).
         call{1} (RFCore.MakeRF_after_core_error UC_KEReal).
         skip. move => />.
         rcondf{1} 0.
         trivial.
         sp.
         skip.  
         smt(RealSimpRel4).

      sp.
seq 1 0 : (! not_done{1} /\ r0{1} = None /\ r{2} = None /\
  real_simp_rel4
       {| real_simp_rel_st_func = func;
         real_simp_rel_st_r1s = UC_KEReal._st_Pt1{1};
         real_simp_rel_st_r2s = UC_KEReal._st_Pt2{1};
         real_simp_rel_st_fws1 = UC_Fw1.IF._st{1};
         real_simp_rel_st_fws2 = UC_Fw2.IF._st{1};
         real_simp_rel_st_rss = KERealSimp._st{2}; |} 
     ).
         call{1} (RFCore.MakeRF_after_core_error UC_KEReal).
         skip. move => />.
         rcondf{1} 0.
         trivial.
         sp.
         skip.  
         smt(RealSimpRel4).








 
exfalso.
 move => &1 &2.
 move => [#].
 move => _ _ _ _ _ _ _ _.
move => []; smt().
qed.

local lemma Exper_KEReal_KERealSimp
    (func' : addr) (in_guard' : int fset) &m :
  exper_pre func' =>
  disjoint in_guard' (adv_pis_rf_info rf_info) =>
  Pr[Exper(MI(RFIP, Adv), Env).main
       (func', in_guard') @ &m : res] =
  Pr[Exper(MI(KERealSimp, Adv), Env).main
       (func', in_guard') @ &m : res].
     proof.
     print inter_init_pre.
     move => exper_pre disjoint.
       byequiv; first last.
       trivial.
     trivial.
       proc.
       seq 1 1 : (
       ={func, in_guard, glob Adv, glob Env, glob MI}
       /\ func{1} = func'
         /\ MI.func{1} = func'
       /\ MI.in_guard{1} = in_guard'
       /\ RFCore.MakeRF.self{1} = func'
       /\ KERealSimp._self{2} = func'
         /\ UC_KEReal._self{1} = func'
         /\ UC_Fw1.IF._self{1} = _addr_Fw1 func'
         /\ UC_Fw2.IF._self{1} = _addr_Fw2 func'
       /\ real_simp_rel
   {|real_simp_rel_st_func = func';
     real_simp_rel_st_r1s  = UC_KEReal._st_Pt1{1};
     real_simp_rel_st_r2s  = UC_KEReal._st_Pt2{1};
     real_simp_rel_st_fws1 = UC_Fw1.IF._st{1};
     real_simp_rel_st_fws2 = UC_Fw2.IF._st{1};
     real_simp_rel_st_rss  = KERealSimp._st{2}|}
     ).
       inline *.
       sp.
         call (_ : ={ glob Env, glob MI}

         /\ MI.func{1} = func'
       /\ MI.in_guard{1} = in_guard'
       /\ RFCore.MakeRF.self{1} = func'
       /\ KERealSimp._self{2} = func'
         /\ UC_KEReal._self{1} = func'
         /\ UC_Fw1.IF._self{1} = _addr_Fw1 func'
         /\ UC_Fw2.IF._self{1} = _addr_Fw2 func'
       /\ real_simp_rel
   {|real_simp_rel_st_func = func';
     real_simp_rel_st_r1s  = UC_KEReal._st_Pt1{1};
     real_simp_rel_st_r2s  = UC_KEReal._st_Pt2{1};
     real_simp_rel_st_fws1 = UC_Fw1.IF._st{1};
     real_simp_rel_st_fws2 = UC_Fw2.IF._st{1};
     real_simp_rel_st_rss  = KERealSimp._st{2}|}
     ).
       skip.
     move => />.
     print real_simp_rel0.
         rewrite RealSimpRel0.
         rewrite /real_simp_rel0 //.

     
         call (_ : ={glob MI, glob Adv}
/\ MI.func{1} = func'
       /\ MI.in_guard{1} = in_guard'
       /\ RFCore.MakeRF.self{1} = func'
       /\ KERealSimp._self{2} = func'
         /\ UC_KEReal._self{1} = func'
         /\ UC_Fw1.IF._self{1} = _addr_Fw1 func'
         /\ UC_Fw2.IF._self{1} = _addr_Fw2 func'
       /\ real_simp_rel
   {|real_simp_rel_st_func = func';
     real_simp_rel_st_r1s  = UC_KEReal._st_Pt1{1};
     real_simp_rel_st_r2s  = UC_KEReal._st_Pt2{1};
     real_simp_rel_st_fws1 = UC_Fw1.IF._st{1};
     real_simp_rel_st_fws2 = UC_Fw2.IF._st{1};
     real_simp_rel_st_rss  = KERealSimp._st{2}|}
     );
       last first.
       skip; move => />.
  
       proc.
       if; last first.
       sp. skip. move => />.
     move => />.
     
       inline loop.
         sp; wp.
     print mi_loop_invar.
     while (={glob MI, glob Adv, not_done, m, m0, r0}
       /\ MI.func{1} = func'
         /\ MI.in_guard{1} = in_guard'
         /\

      (mi_loop_invar func' in_guard' r0{1} m0{1} not_done{1})
  

        (*
        op mi_loop_invar
     (func : addr, in_guard : int fset,
      r : msg option, m : msg, not_done : bool) : bool =
  inter_init_pre func /\
  (not_done =>
   (m.`1 = Dir /\ func = m.`2.`1 /\ envport func m.`3) \/
   (m.`1 = Adv /\ func <= m.`2.`1 /\ m.`3.`1 = adv /\ 0 < m.`3.`2) \/
   (m.`1 = Adv /\ m.`2.`1 = adv /\
    (func <= m.`3.`1 /\ 0 < m.`2.`2 \/
     m.`3 = env_root_port /\ m.`2.`2 = 0 \/
     envport func m.`3 /\ 0 < m.`2.`2 /\
     m.`2.`2 \in in_guard))) /\
  (! not_done =>
   r = None \/
   (envport0 func (oget r).`2 /\
    ((oget r).`1 = Dir /\ (oget r).`2 <> env_root_port /\
      func = (oget r).`3.`1 \/
     (oget r).`1 = Adv /\ adv = (oget r).`3.`1 /\ 0 <= (oget r).`3.`2 /\
        ((oget r).`2 = env_root_port <=> (oget r).`3.`2 = 0)))).
        
        op main_guard (func : addr, in_guard : int fset, m : msg) : bool =
m.`1 = Dir /\ func = m.`2.`1 /\ envport func m.`3 \/
  m.`1 = Adv /\ m.`2.`1 = adv /\
  (m.`2.`2 = 0 /\ m.`3 = env_root_port \/
   0 < m.`2.`2 /\ m.`2.`2 \in in_guard /\ envport func m.`3).
        *)      
       
       /\ RFCore.MakeRF.self{1} = func'
       /\ KERealSimp._self{2} = func'
         /\ UC_KEReal._self{1} = func'
         /\ UC_Fw1.IF._self{1} = _addr_Fw1 func'
         /\ UC_Fw2.IF._self{1} = _addr_Fw2 func'
       /\ real_simp_rel
   {|real_simp_rel_st_func = func';
     real_simp_rel_st_r1s  = UC_KEReal._st_Pt1{1};
     real_simp_rel_st_r2s  = UC_KEReal._st_Pt2{1};
     real_simp_rel_st_fws1 = UC_Fw1.IF._st{1};
     real_simp_rel_st_fws2 = UC_Fw2.IF._st{1};
     real_simp_rel_st_rss  = KERealSimp._st{2}|});
       last first.
     skip. move => />. smt(). 
     if; last first.
     seq 1 1 : #post.
 call(_ : 
    ={glob MI} /\
   MI.func{1} = func' /\
   MI.in_guard{1} = in_guard' /\
   RFCore.MakeRF.self{1} = func' /\
   KERealSimp._self{2} = func' /\
   UC_KEReal._self{1} = func' /\
   UC_Fw1.IF._self{1} = _addr_Fw1 func' /\
   UC_Fw2.IF._self{1} = _addr_Fw2 func' /\
   real_simp_rel
     {| real_simp_rel_st_func = func'; real_simp_rel_st_r1s = UC_KEReal._st_Pt1{1}; real_simp_rel_st_r2s = UC_KEReal._st_Pt2{1};
         real_simp_rel_st_fws1 = UC_Fw1.IF._st{1}; real_simp_rel_st_fws2 =
         UC_Fw2.IF._st{1}; real_simp_rel_st_rss = KERealSimp._st{2}; |}).
       skip. auto;progress; smt().

inline after_adv.
auto;progress;smt().
       smt().

 seq 1 1 : #post. (*
       ={glob MI, glob Adv, not_done, m, m0, r0} /\ MI.func{1} = func'
         
       /\  MakeInt.MI.func{1} <= m0{1}.`2.`1
       /\ RFCore.MakeRF.self{1} = func'
       /\ KERealSimp._self{2} = func'
         /\ UC_KEReal._self{1} = func'
         /\ UC_Fw1.IF._self{1} = _addr_Fw1 func'
         /\ UC_Fw2.IF._self{1} = _addr_Fw2 func'
       /\ real_simp_rel
   {|real_simp_rel_st_func = func';
     real_simp_rel_st_r1s  = UC_KEReal._st_Pt1{1};
     real_simp_rel_st_r2s  = UC_KEReal._st_Pt2{1};
     real_simp_rel_st_fws1 = UC_Fw1.IF._st{1};
     real_simp_rel_st_fws2 = UC_Fw2.IF._st{1};
     real_simp_rel_st_rss  = KERealSimp._st{2}|}
     ); last first.
     call(_ : ={glob MI, glob Adv} /\ MI.func{1} = func'
         /\ MI.in_guard{1} = in_guard'
       /\ RFCore.MakeRF.self{1} = func'
       /\ KERealSimp._self{2} = func'
         /\ UC_KEReal._self{1} = func'
         /\ UC_Fw1.IF._self{1} = _addr_Fw1 func'
         /\ UC_Fw2.IF._self{1} = _addr_Fw2 func'
       /\ real_simp_rel
   {|real_simp_rel_st_func = func';
     real_simp_rel_st_r1s  = UC_KEReal._st_Pt1{1};
     real_simp_rel_st_r2s  = UC_KEReal._st_Pt2{1};
     real_simp_rel_st_fws1 = UC_Fw1.IF._st{1};
     real_simp_rel_st_fws2 = UC_Fw2.IF._st{1};
     real_simp_rel_st_rss  = KERealSimp._st{2}|}*)
         auto.

     call (KEReal_KERealSimp_invoke func').
         skip.
   move => &1 &2 P. 
       have H: inc func' adv. smt(). rewrite H //=. clear H.
   
       have H: m0{1} = m0{2}. smt(). rewrite H //=. clear H.
   
       have H:RFCore.MakeRF.self{1} = func'. smt(). rewrite H //=. clear H.
   
       have H: UC_KEReal._self{1} = func' . smt(). rewrite H //=. clear H.
   
       have H: UC_Fw1.UC_Forw._self{1} = _addr_Fw1 func'. smt(). rewrite H //=. clear H.
   
   have H: UC_Fw2.UC_Forw._self{1} = _addr_Fw2 func' . smt(). rewrite H //=. clear H.
       have H:KERealSimp._self{2} = func'  . smt(). rewrite H //=. clear H.
   
       have H:real_simp_rel
   {| real_simp_rel_st_func = func'; real_simp_rel_st_r1s = UC_KEReal._st_Pt1{1}; real_simp_rel_st_r2s = UC_KEReal._st_Pt2{1};
       real_simp_rel_st_fws1 = UC_Fw1.UC_Forw._st{1}; real_simp_rel_st_fws2 =
     UC_Fw2.UC_Forw._st{1}; real_simp_rel_st_rss = KERealSimp._st{2}; |} . smt(). rewrite H //=. clear H.
   
       have H:forall (result_L result_R : msg option) (_st_Pt1_L : _state_Pt1)
  (_st_Pt2_L : _state_Pt2) (_st_L : UC_Fw1._state_IF)
  (_st_L0 : UC_Fw2._state_IF) (_st_R : ke_real_simp_state),
  result_L = result_R /\
  real_simp_rel
    {| real_simp_rel_st_func = func'; real_simp_rel_st_r1s = _st_Pt1_L;
        real_simp_rel_st_r2s = _st_Pt2_L; real_simp_rel_st_fws1 = _st_L;
        real_simp_rel_st_fws2 = _st_L0; real_simp_rel_st_rss = _st_R; |} =>
  (((MakeInt.MI.func{1} = MakeInt.MI.func{2} /\
     MakeInt.MI.in_guard{1} = MakeInt.MI.in_guard{2}) /\
    (glob Adv){1} = (glob Adv){2} /\
    not_done{1} = not_done{2} /\ m{1} = m{2} /\ result_L = result_R) /\
   MakeInt.MI.func{1} = func' /\
   MakeInt.MI.in_guard{1} = in_guard' /\
   mi_loop_invar func' in_guard' result_L m0{2} not_done{1} /\
   real_simp_rel
     {| real_simp_rel_st_func = func'; real_simp_rel_st_r1s = _st_Pt1_L;
         real_simp_rel_st_r2s = _st_Pt2_L; real_simp_rel_st_fws1 = _st_L;
         real_simp_rel_st_fws2 = _st_L0; real_simp_rel_st_rss = _st_R; |}) /\
  (not_done{1} <=> not_done{2}) . smt(). 
   
    have I:
mi_loop_invar func' in_guard' r0{1} m0{1} not_done{1} =>
    mi_invoke_loop_calls_func_invoke func' m0{1}.
rewrite /mi_loop_invar /mi_invoke_loop_calls_func_invoke.
  move => />.
    case (not_done{1}).
    smt.
  smt.
    smt().

inline after_func. auto;progress; smt().
qed.



type exp_names = [exp1 | exp2 | exp3].



local clone RedundantHashing as RH with
  type input <- exp_names,
  type output <- exp,
  op doutput <- dexp
proof *.
realize doutput_ll. apply dexp_ll. qed.

print RH.HASHING.
local module (KERealSimpHashingAdv : RH.HASHING_ADV)
             (Hash : RH.HASHING) = {
module KERealSimpHash : FUNC =
{
  var _self : addr
  var _st : ke_real_simp_state
  proc init(self_ : addr) : unit = {
    _self <- self_;
  _st <- KERealSimpStateWaitReq1;
  }

  proc _State_KERealSimpStateWaitReq1__KEDir__Pt1__ke_req1 (pt1 : port, pt2 : port) : msg option = {
  var q1 : exp;
  var _r : msg option <- None;
  var _pt1 : port <- _intport_Pt1 _self;
  var _pt2 : port <- _intport_Pt2 _self;
  var u : univ;
  if (envport _self pt2) {
    q1 <@ Hash.hash(exp1);
    u <- epdp_port_port_key_univ.`enc (pt1, pt2, g ^ q1);
    _r <- Some
      (UC_Fw1.UC_FwAdv.epdp__fw_obs.`enc
        {|
          UC_Fw1.UC_FwAdv.fw_obs___func = _addr_Fw1 _self;
          UC_Fw1.UC_FwAdv.fw_obs___adv = adv;
          UC_Fw1.UC_FwAdv.fw_obs__pt1 = _pt1;
          UC_Fw1.UC_FwAdv.fw_obs__pt2 = _pt2;
          UC_Fw1.UC_FwAdv.fw_obs__u = u;       
        |});
    _st <- KERealSimpStateWaitAdv1 pt1 pt2 q1;
    
  }
  else { _r <- None;}
  return _r;
  }

  proc _State_KERealSimpStateWaitAdv1__Fw1_FwAdv__fw_ok (pt1 : port, pt2 : port, q1 : exp) : msg option = {
  var k1 : key;
  var q2 : exp;
  var _r : msg option <- None;
  if (envport _self pt2) {
    k1 <- g ^ q1;
    q2 <@ Hash.hash(exp2);
    _r <- Some
      (UC_KEDir.Pt2.epdp__ke_rsp1.`enc
        {|
          UC_KEDir.Pt2.ke_rsp1___func = _self;
          UC_KEDir.Pt2.ke_rsp1__pt2 = pt2;
          UC_KEDir.Pt2.ke_rsp1__pt1 = pt1;
          UC_KEDir.Pt2.ke_rsp1__k = k1 ^ q2;
          
        |});
      _st <- KERealSimpStateWaitReq2 pt1 pt2 q1 q2;
    }
  return _r;
  }

  proc _State_KERealSimpStateWaitReq2__KEDir__Pt2__ke_req2 (pt1 : port, pt2 : port, q1 : exp, q2 : exp, pt2') : msg option = {
  var u : univ;
  var _pt1 : port <- _intport_Pt2 _self;
  var _pt2 : port <- _intport_Pt1 _self;
  var _r : msg option <- None;
  if (pt2' = pt2) {
    u <- epdp_key_univ.`enc (g ^ q2);
    _r <- Some
      (UC_Fw2.UC_FwAdv.epdp__fw_obs.`enc
        {|
          UC_Fw2.UC_FwAdv.fw_obs___func = _addr_Fw2 _self;
          UC_Fw2.UC_FwAdv.fw_obs___adv = adv;
          UC_Fw2.UC_FwAdv.fw_obs__pt1 = _pt1;
          UC_Fw2.UC_FwAdv.fw_obs__pt2 = _pt2;
          UC_Fw2.UC_FwAdv.fw_obs__u = u;       
        |});
    _st <- KERealSimpStateWaitAdv2 pt1 pt2 q1 q2;   
  }
  return _r;
  }

  proc _State_KERealSimpStateWaitAdv2__Fw2_FwAdv__fw_ok (pt1 : port, pt2 : port, q1 : exp, q2 : exp) : msg option = {
  var _r : msg option <- None;
  if (envport _self pt1) {
    _r <- Some
          (UC_KEDir.Pt1.epdp__ke_rsp2.`enc
          {|
            UC_KEDir.Pt1.ke_rsp2___func = _self;
            UC_KEDir.Pt1.ke_rsp2__pt1 = pt1;
            UC_KEDir.Pt1.ke_rsp2__k = (g ^ q2) ^ q1;
            
          |});
        _st <- KERealSimpStateFinal;
  }
  return _r;
  }

  proc invoke(m : msg) : msg option = {
    var r : msg option <- None;
    match _st with
    | KERealSimpStateWaitReq1 => {
      if( m.`1 = Dir /\ envport _self m.`3 /\ m.`2 = _extport_Pt1 _self){
        match UC_KEDir.Pt1.epdp__ke_req1.`dec m with
        | Some _x => {
          r <@ _State_KERealSimpStateWaitReq1__KEDir__Pt1__ke_req1 (_x.`UC_KEDir.Pt1.ke_req1__pt1, _x.`UC_KEDir.Pt1.ke_req1__pt2);
        }
        | None => {}
        end;
      }
    }
    | KERealSimpStateWaitAdv1 pt1 pt2 q1 => {
      if(m.`1 = Adv /\  m.`3.`1 = adv /\ _addr_Fw1 _self = m.`2.`1){ 
        match UC_Fw1.UC_FwAdv.epdp__fw_ok.`dec m with
        | Some _ => {
          r <@ _State_KERealSimpStateWaitAdv1__Fw1_FwAdv__fw_ok (pt1, pt2, q1);
        }
        | None => {}
        end;
      }
    }
    | KERealSimpStateWaitReq2 pt1 pt2 q1 q2 => {
      if( m.`1 = Dir /\ envport _self m.`3 /\ m.`2 = _extport_Pt2 _self){
        match UC_KEDir.Pt2.epdp__ke_req2.`dec m with
        | Some _x => {
          r <@ _State_KERealSimpStateWaitReq2__KEDir__Pt2__ke_req2 (pt1, pt2, q1, q2, _x.`UC_KEDir.Pt2.ke_req2__pt2);
        }
        | None => {}
        end;
      }
    }
    | KERealSimpStateWaitAdv2 pt1 pt2 q1 q2 => {
      if(m.`1 = Adv /\  m.`3.`1 = adv /\ _addr_Fw2 _self = m.`2.`1){
        match UC_Fw2.UC_FwAdv.epdp__fw_ok.`dec m with
        | Some _ => {
          r <@ _State_KERealSimpStateWaitAdv2__Fw2_FwAdv__fw_ok (pt1, pt2, q1, q2);
        }
        | None => {}
        end;
      }
    }
    | KERealSimpStateFinal => {}
    end;
    return r;
  }
}
proc main() : bool = {
    var b : bool;
    Hash.rhash(exp1); Hash.rhash(exp2);
    b <@ Exper(MI(KERealSimpHash, Adv), Env).main
           (DDH_Adv_globs.func, DDH_Adv_globs.in_guard);
    return b;
  }
}.

type real_simp_hash_rel_st = {
  real_simp_hash_rel_st_rss : ke_real_simp_state;
  real_simp_hash_rel_st_map : (exp_names, exp) fmap;
}.

pred real_simp_hash_rel0 (st : real_simp_hash_rel_st) =
  st.`real_simp_hash_rel_st_rss = KERealSimpStateWaitReq1 /\
  st.`real_simp_hash_rel_st_map.[exp1] = None /\
  st.`real_simp_hash_rel_st_map.[exp2] = None.

pred real_simp_hash_rel1 (st : real_simp_hash_rel_st, pt1 pt2 : port, q1 : exp) =
  st.`real_simp_hash_rel_st_rss = KERealSimpStateWaitAdv1 pt1 pt2 q1 /\
  st.`real_simp_hash_rel_st_map.[exp1] = Some q1 /\
  st.`real_simp_hash_rel_st_map.[exp2] = None.

pred real_simp_hash_rel2 (st : real_simp_hash_rel_st, pt1 pt2 : port, q1 q2 : exp) =
  st.`real_simp_hash_rel_st_rss = KERealSimpStateWaitReq2 pt1 pt2 q1 q2 /\
  st.`real_simp_hash_rel_st_map.[exp1] = Some q1 /\
  st.`real_simp_hash_rel_st_map.[exp2] = Some q2.

pred real_simp_hash_rel3 (st : real_simp_hash_rel_st, pt1 pt2 : port, q1 q2 : exp) =
  st.`real_simp_hash_rel_st_rss = KERealSimpStateWaitAdv2 pt1 pt2 q1 q2 /\
  st.`real_simp_hash_rel_st_map.[exp1] = Some q1 /\
  st.`real_simp_hash_rel_st_map.[exp2] = Some q2.

pred real_simp_hash_rel4 (st : real_simp_hash_rel_st) =
  st.`real_simp_hash_rel_st_rss = KERealSimpStateFinal /\
  st.`real_simp_hash_rel_st_map.[exp1] <> None /\
  st.`real_simp_hash_rel_st_map.[exp2] <> None.

inductive real_simp_hash_rel (st : real_simp_hash_rel_st) =
    RealSimpHashRel0 of (real_simp_hash_rel0 st)
  | RealSimpHashRel1 (pt1 pt2 : port, q1 : exp) of
      (real_simp_hash_rel1 st pt1 pt2 q1)
  | RealSimpHashRel2 (pt1 pt2 : port, q1 q2 : exp) of
      (real_simp_hash_rel2 st pt1 pt2 q1 q2)
  | RealSimpHashRel3 (pt1 pt2 : port, q1 q2 : exp) of
      (real_simp_hash_rel3 st pt1 pt2 q1 q2)
  | RealSimpHashRel4  of
      (real_simp_hash_rel4 st).

local lemma KERealSimp_KERealSimpHash_OptHashing_invoke :
  equiv
  [KERealSimp.invoke ~
   KERealSimpHashingAdv(RH.OptHashing).KERealSimpHash.invoke :
   ={m} /\
   ={_self, _st}(KERealSimp, KERealSimpHashingAdv.KERealSimpHash) /\
   real_simp_hash_rel
   {|real_simp_hash_rel_st_rss = KERealSimp._st{1};
     real_simp_hash_rel_st_map = RH.OptHashing.mp{2}|} ==>
   ={res} /\
   ={_self,_st}(KERealSimp, KERealSimpHashingAdv.KERealSimpHash) /\
   real_simp_hash_rel
   {|real_simp_hash_rel_st_rss = KERealSimp._st{1};
     real_simp_hash_rel_st_map = RH.OptHashing.mp{2}|}].
 proof.
   proc.
   sp.
 case
  (real_simp_hash_rel0
   {|real_simp_hash_rel_st_rss = KERealSimp._st{1};
     real_simp_hash_rel_st_map = RH.OptHashing.mp{2}|}).
   match KERealSimpStateWaitReq1 {1} 0.
     auto; progress; smt().
 match KERealSimpStateWaitReq1 {2} 0.
   auto; progress; smt().
   if.
   auto; progress; smt().
   match.
   auto; progress; smt().
   auto; progress; smt().
   auto; progress; smt().
 move => _x _x0.
 inline _State_KERealSimpStateWaitReq1__KEDir__Pt1__ke_req1.
sp.
if.
   auto; progress; smt().
   inline hash.
   sp 0 1.
   rcondt{2} 0.
     auto; progress; smt().
 seq 1 1 : (#pre /\ q1{1} = out{2}).
     rnd.
     auto; progress; smt().
 sp 0 1.
 seq 0 1 :  (#pre /\ ={q1}).
     auto; progress; smt(get_setE).
     sp. skip.
 move => &1 &2 P. 
     have H : r{1} = r{2}. smt(). rewrite H //=. clear H.
     have H : KERealSimp._self{1} = KERealSimpHashingAdv.KERealSimpHash._self{2}. smt(). rewrite H //=. clear H.
     have H : KERealSimp._st{1} = KERealSimpHashingAdv.KERealSimpHash._st{2}. smt(). rewrite H //=. clear H.
     have H : real_simp_hash_rel1
  {| real_simp_hash_rel_st_rss = KERealSimpHashingAdv.KERealSimpHash._st{2};
    real_simp_hash_rel_st_map = RH.OptHashing.mp{2}; |}
    pt1{2} pt2{2} q1{2}.
rewrite /real_simp_hash_rel1.
    simplify.
  have H : KERealSimpHashingAdv.KERealSimpHash._st{2} =
KERealSimpStateWaitAdv1 pt1{2} pt2{2} q1{2}.
    smt(). rewrite H //=. clear H.
have H : RH.OptHashing.mp{2}.[exp1] = Some q1{2}.
    smt(get_setE). rewrite H //=. clear H.
  have H : RH.OptHashing.mp{2}.[exp2] = None.
smt(get_setE). rewrite H //=.
    smt(RealSimpHashRel1).
    auto; progress; smt().
    auto; progress; smt().
case
 (exists (pt1 pt2 : port, q1 : exp),
   real_simp_hash_rel1
   {|real_simp_hash_rel_st_rss = KERealSimp._st{1};
     real_simp_hash_rel_st_map = RH.OptHashing.mp{2}|}
     pt1
     pt2
     q1
 ).
     match KERealSimpStateWaitAdv1 {1} 0.
     auto; progress; smt().
 match KERealSimpStateWaitAdv1 {2} 0.
     auto; progress; smt().
     if.
     auto; progress; smt().
     match.
     auto; progress; smt().
     auto; progress; smt().
     auto; progress; smt().
 move => x _0.
     inline _State_KERealSimpStateWaitAdv1__Fw1_FwAdv__fw_ok.
     sp.
 if.
     auto; progress; smt().
     sp.
     inline hash.
     rcondt{2} 2.  auto; progress; smt().
     sp 0 1.
     seq 1 1 : (#pre /\ q2{1} = out{2}).
     rnd. auto; progress; smt().
     sp 0 1.
     seq 0 1 : (#pre /\ ={q2}).
     sp.
     auto; progress; smt(get_setE).
     sp.
     skip.
 move => &1 &2 P.
     have H : r{1} = r{2}. smt(). rewrite H //=. clear H.
     have H : KERealSimp._self{1} = KERealSimpHashingAdv.KERealSimpHash._self{2}. smt(). rewrite H //=. clear H.
     have H : KERealSimp._st{1} = KERealSimpHashingAdv.KERealSimpHash._st{2}. smt(). rewrite H //=. clear H.
     have H : real_simp_hash_rel2
{| real_simp_hash_rel_st_rss = KERealSimpHashingAdv.KERealSimpHash._st{2};
  real_simp_hash_rel_st_map = RH.OptHashing.mp{2}; |}
  pt1{2}
  pt2{2}
  q1{2}
q2{2}.
smt(get_setE ).
smt(RealSimpHashRel2). 
  auto; progress; smt().
  auto; progress; smt().
case
 (exists (pt1 pt2 : port, q1 q2 : exp),
   real_simp_hash_rel2
   {|real_simp_hash_rel_st_rss = KERealSimp._st{1};
     real_simp_hash_rel_st_map = RH.OptHashing.mp{2}|}
     pt1
     pt2
     q1
     q2
 ).
  match KERealSimpStateWaitReq2 {1} 0.
     auto; progress; smt().
  match KERealSimpStateWaitReq2 {2} 0.
     auto; progress; smt().
     if. auto; progress; smt().
     match. auto; progress; smt().
     auto; progress; smt().
     auto; progress; smt().
 move => _x _x0.
     inline _State_KERealSimpStateWaitReq2__KEDir__Pt2__ke_req2.
   
sp 8 8.
     
     if. auto; progress; smt().
     sp.
skip. move => &1 &2 P.
have H : r{1} = r{2}. smt(). rewrite H //=. clear H.
     have H : KERealSimp._self{1} = KERealSimpHashingAdv.KERealSimpHash._self{2}. smt(). rewrite H //=. clear H.
     have H : KERealSimp._st{1} = KERealSimpHashingAdv.KERealSimpHash._st{2}. smt(). rewrite H //=. clear H.
     have H : real_simp_hash_rel3
{| real_simp_hash_rel_st_rss = KERealSimpHashingAdv.KERealSimpHash._st{2};
  real_simp_hash_rel_st_map = RH.OptHashing.mp{2}; |}
  pt1{2}
  pt2{2}
  q1{2}
q2{2}.
smt(get_setE ).
  smt(RealSimpHashRel3).
  auto; progress; smt().
  auto; progress; smt().

case
(exists (pt1 pt2 : port, q1 q2 : exp),
   real_simp_hash_rel3
   {|real_simp_hash_rel_st_rss = KERealSimp._st{1};
     real_simp_hash_rel_st_map = RH.OptHashing.mp{2}|}
     pt1
     pt2
     q1
     q2
 ).

     match KERealSimpStateWaitAdv2 {1} 0.
     auto; progress; smt().
 match KERealSimpStateWaitAdv2 {2} 0.
     auto; progress; smt().
 if; last first.
     auto; progress; smt().
     auto; progress; smt().
     match. auto; progress; smt().
     auto; progress; smt().
     auto; progress; smt().
 move => x y.
     inline _State_KERealSimpStateWaitAdv2__Fw2_FwAdv__fw_ok.
     sp 5 5.
     if; last first.
     auto; progress; smt().
 auto; progress; smt().
     auto; progress; smt( RealSimpHashRel4).
 case
  (real_simp_hash_rel4
   {|real_simp_hash_rel_st_rss = KERealSimp._st{1};
     real_simp_hash_rel_st_map = RH.OptHashing.mp{2}|}).
  match  KERealSimpStateFinal {1} 0.
     auto; progress; smt().
 match  KERealSimpStateFinal {2} 0.
     auto; progress; smt().
     sp. auto; progress; smt().
     exfalso.
 move => &1 &2.
 move => [#].
 move => _ _ _ _ _.
 move => []; smt().
qed.

local lemma Exper_KERealSimp_GOptHashing_KERealSimpHashingAdv
            (func' : addr, in_guard' : int fset) &m :
  DDH_Adv_globs.func{m} = func' =>
  DDH_Adv_globs.in_guard{m} = in_guard' =>
  Pr[Exper(MI(KERealSimp, Adv), Env).main
       (func', in_guard') @ &m : res] =
     Pr[RH.GOptHashing(KERealSimpHashingAdv).main() @ &m : res].
     proof.
     move => DDH_Adv_glob_func DDH_Adv_glob_in_guard.
       byequiv.
       proc.
       inline*.
       sp.
       seq 1 1 : (
RH.OptHashing.mp{2} = empty /\
  inp{2} = exp1 /\
  inp0{2} = exp2 /\
  func{2} = DDH_Adv_globs.func{2} /\
  in_guard{2} = DDH_Adv_globs.in_guard{2} /\
  func_{2} = func{2} /\
  in_guard_{2} = in_guard{2} /\
  MakeInt.MI.func{2} = func_{2} /\
  MakeInt.MI.in_guard{2} = in_guard_{2} /\
  self_{2} = MakeInt.MI.func{2} /\
  KERealSimpHashingAdv.KERealSimpHash._self{2} = self_{2} /\
  KERealSimpHashingAdv.KERealSimpHash._st{2} = KERealSimpStateWaitReq1 /\
  func_{1} = func{1} /\
  in_guard_{1} = in_guard{1} /\
  MakeInt.MI.func{1} = func_{1} /\
  MakeInt.MI.in_guard{1} = in_guard_{1} /\
  self_{1} = MakeInt.MI.func{1} /\
  KERealSimp._self{1} = self_{1} /\
  KERealSimp._st{1} = KERealSimpStateWaitReq1 /\
  (glob Env){2} = (glob Env){m} /\
  DDH_Adv_globs.in_guard{2} = DDH_Adv_globs.in_guard{m} /\
  DDH_Adv_globs.func{2} = DDH_Adv_globs.func{m} /\
  (func{1}, in_guard{1}) = (func', in_guard') /\
  (glob Env){1} = (glob Env){m} /\ (glob Adv){1} = (glob Adv){2}
     ).
call(_:true). auto;progress;smt().
wp.
    call(_:(={glob MI, glob Adv} /\ ={ _self, _st}(KERealSimp, KERealSimpHashingAdv.KERealSimpHash) /\
    MakeInt.MI.func{1} = func' /\
MakeInt.MI.in_guard{1} = in_guard' /\
   real_simp_hash_rel
   {|real_simp_hash_rel_st_rss = KERealSimp._st{1};
     real_simp_hash_rel_st_map = RH.OptHashing.mp{2}|})).
proc.
    if;last first.
auto;progress;smt().
auto;progress;smt().
inline loop.
sp. wp.
while (={glob MI, glob Adv, not_done, m, m0, r0}
       /\ MI.func{1} = func'
         /\ MI.in_guard{1} = in_guard'
 /\ ={ _self, _st}(KERealSimp, KERealSimpHashingAdv.KERealSimpHash)
       /\ real_simp_hash_rel
     {| real_simp_hash_rel_st_rss = KERealSimp._st{1};
         real_simp_hash_rel_st_map = RH.OptHashing.mp{2}; |}).
       if.
       auto;progress;smt().
       seq 1 1 : #post.

       call KERealSimp_KERealSimpHash_OptHashing_invoke.
 auto;progress;smt().  
       inline after_func. auto;progress; smt().
       seq 1 1 : #pre.
   call(_ : true (*(((MakeInt.MI.func{1}, MakeInt.MI.in_guard{1}) =
     (MakeInt.MI.func{2}, MakeInt.MI.in_guard{2})) /\
    MI.func{1} = func' /\
    MI.in_guard{1} = in_guard' /\
    (KERealSimp._self{1} = KERealSimpHashingAdv.KERealSimpHash._self{2} /\
     KERealSimp._st{1} = KERealSimpHashingAdv.KERealSimpHash._st{2}) /\
    real_simp_hash_rel
      {| real_simp_hash_rel_st_rss = KERealSimp._st{1};
          real_simp_hash_rel_st_map = RH.OptHashing.mp{2}; |})*)).
       auto;progress; smt().
       inline after_adv. auto;progress; smt().
       auto;progress; smt().
  
       skip. move => &1 &2 P.
have H : ((func{1}, in_guard{1}).`1 = (func{2}, in_guard{2}).`1 /\
  (func{1}, in_guard{1}).`2 = (func{2}, in_guard{2}).`2).
     auto;progress;smt(). rewrite H //=. clear H.
   have H : (glob Env){1} = (glob Env){2} .
    auto;progress;smt(). rewrite H //=. clear H.
have H : (MakeInt.MI.func{1} = MakeInt.MI.func{2} /\
   MakeInt.MI.in_guard{1} = MakeInt.MI.in_guard{2}).
have H : MakeInt.MI.func{1} = func{1}.
    auto;progress;smt(). rewrite H //=. clear H.
have H : func{1} = func'.
    auto;progress;smt(). rewrite H //=. clear H.
have H : MakeInt.MI.in_guard{1} = in_guard{1}.
    auto;progress;smt(). rewrite H //=. clear H.
have H : in_guard{1} = in_guard'.
    auto;progress;smt(). rewrite H //=. clear H.
    auto;progress;smt(). rewrite H //=. clear H.
have H : (glob Adv){1} = (glob Adv){2} .
    auto;progress;smt(). rewrite H //=. clear H.
    have H : KERealSimp._self{1} = KERealSimpHashingAdv.KERealSimpHash._self{2}.
have H : KERealSimp._self{1} = func{1}.
    auto;progress;smt(). rewrite H //=. clear H.
auto;progress;smt(). rewrite H //=. clear H.
    have H : KERealSimp._st{1} = KERealSimpHashingAdv.KERealSimpHash._st{2} .
    auto;progress;smt(). rewrite H //=. clear H.
    have H : MakeInt.MI.func{1} = func'  .
have H : MakeInt.MI.func{1} = func{1}. smt(). rewrite H //=. clear H.
    auto;progress;smt(). rewrite H //=. clear H.
    have H : MakeInt.MI.in_guard{1} = in_guard' .
    auto;progress;smt(). rewrite H //=. clear H.
have H : real_simp_hash_rel0
  {| real_simp_hash_rel_st_rss = KERealSimpHashingAdv.KERealSimpHash._st{2};
    real_simp_hash_rel_st_map = RH.OptHashing.mp{2}; |}.
rewrite /real_simp_hash_rel0.
have H : {| real_simp_hash_rel_st_rss = KERealSimpHashingAdv.KERealSimpHash._st{2};
    real_simp_hash_rel_st_map = RH.OptHashing.mp{2}; |}.`real_simp_hash_rel_st_rss =
    KERealSimpStateWaitReq1 . smt(). rewrite H //=. clear H.
auto;progress;smt. smt(RealSimpHashRel0).
    smt().
  smt().
qed.


type real_simp_hash_ddh1_rel_st = {
  real_simp_hash_ddh1_rel_st_k1  : key;
  real_simp_hash_ddh1_rel_st_k2  : key;
  real_simp_hash_ddh1_rel_st_rss : ke_real_simp_state;
  real_simp_hash_ddh1_rel_st_hs  : ke_ddh_state;
}.

pred real_simp_hash_ddh1_rel0 (st : real_simp_hash_ddh1_rel_st) =
  st.`real_simp_hash_ddh1_rel_st_rss = KERealSimpStateWaitReq1 /\
  st.`real_simp_hash_ddh1_rel_st_hs = KEDDHStateWaitReq1.

pred real_simp_hash_ddh1_rel1
     (st : real_simp_hash_ddh1_rel_st, pt1 pt2 : port) =
  st.`real_simp_hash_ddh1_rel_st_rss =
  KERealSimpStateWaitAdv1 pt1 pt2 (log st.`real_simp_hash_ddh1_rel_st_k1) /\
  st.`real_simp_hash_ddh1_rel_st_hs =
  KEDDHStateWaitAdv1 pt1 pt2.

pred real_simp_hash_ddh1_rel2
     (st : real_simp_hash_ddh1_rel_st, pt1 pt2 : port) =
  st.`real_simp_hash_ddh1_rel_st_rss =
  KERealSimpStateWaitReq2
       pt1
       pt2
   (log st.`real_simp_hash_ddh1_rel_st_k1)
   (log st.`real_simp_hash_ddh1_rel_st_k2) /\
  st.`real_simp_hash_ddh1_rel_st_hs =
  KEDDHStateWaitReq2 pt1 pt2.

pred real_simp_hash_ddh1_rel3
     (st : real_simp_hash_ddh1_rel_st, pt1 pt2 : port) =
  st.`real_simp_hash_ddh1_rel_st_rss =
  KERealSimpStateWaitAdv2
  pt1 pt2
   (log st.`real_simp_hash_ddh1_rel_st_k1)
   (log st.`real_simp_hash_ddh1_rel_st_k2) /\
  st.`real_simp_hash_ddh1_rel_st_hs =
  KEDDHStateWaitAdv2 pt1 pt2.

pred real_simp_hash_ddh1_rel4
     (st : real_simp_hash_ddh1_rel_st) =
  st.`real_simp_hash_ddh1_rel_st_rss =
  KERealSimpStateFinal
   /\
  st.`real_simp_hash_ddh1_rel_st_hs =
  KEDDHStateFinal.

inductive real_simp_hash_ddh1_rel (st : real_simp_hash_ddh1_rel_st) =
    RealSimpHashDDH1Rel0 of (real_simp_hash_ddh1_rel0 st)
  | RealSimpHashDDH1Rel1 (pt1 pt2 : port) of
      (real_simp_hash_ddh1_rel1 st pt1 pt2)
  | RealSimpHashDDH1Rel2 (pt1 pt2 : port) of
      (real_simp_hash_ddh1_rel2 st pt1 pt2)
  | RealSimpHashDDH1Rel3 (pt1 pt2 : port) of
      (real_simp_hash_ddh1_rel3 st pt1 pt2)
  | RealSimpHashDDH1Rel4 of
      (real_simp_hash_ddh1_rel4 st).

local lemma KERealSimpHashingAdv_NonOptHashing_KEDDH_DDH1_invoke :
  equiv
  [KERealSimpHashingAdv(RH.NonOptHashing).KERealSimpHash.invoke ~
   DDH_Adv(Env, Adv).KEDDH.invoke :
   ={m} /\
   RH.NonOptHashing.mp{1}.[exp1] = Some (log DDH_Adv_globs.k1{2}) /\
   RH.NonOptHashing.mp{1}.[exp2] = Some (log DDH_Adv_globs.k2{2}) /\
   DDH_Adv_globs.k3{2} = g ^ (log DDH_Adv_globs.k1{2} * log DDH_Adv_globs.k2{2}) /\
   ={_self}(KERealSimpHashingAdv.KERealSimpHash, DDH_Adv.KEDDH) /\
   DDH_Adv.KEDDH._self{2} = MI.func{1} /\
   ={glob Adv, glob MI} /\
   real_simp_hash_ddh1_rel
   {|real_simp_hash_ddh1_rel_st_k1 = DDH_Adv_globs.k1{2};
     real_simp_hash_ddh1_rel_st_k2 = DDH_Adv_globs.k2{2};
     real_simp_hash_ddh1_rel_st_rss =
     KERealSimpHashingAdv.KERealSimpHash._st{1};
     real_simp_hash_ddh1_rel_st_hs = DDH_Adv.KEDDH._st{2}|} ==>
   ={res} /\
   RH.NonOptHashing.mp{1}.[exp1] = Some (log DDH_Adv_globs.k1{2}) /\
   RH.NonOptHashing.mp{1}.[exp2] = Some (log DDH_Adv_globs.k2{2}) /\
   DDH_Adv_globs.k3{2} = g ^ (log DDH_Adv_globs.k1{2} * log DDH_Adv_globs.k2{2}) /\
   ={_self}(KERealSimpHashingAdv.KERealSimpHash, DDH_Adv.KEDDH) /\
   DDH_Adv.KEDDH._self{2} = MI.func{1} /\
   ={glob Adv, glob MI} /\
   real_simp_hash_ddh1_rel
   {|real_simp_hash_ddh1_rel_st_k1 = DDH_Adv_globs.k1{2};
     real_simp_hash_ddh1_rel_st_k2 = DDH_Adv_globs.k2{2};
     real_simp_hash_ddh1_rel_st_rss =
     KERealSimpHashingAdv.KERealSimpHash._st{1};
     real_simp_hash_ddh1_rel_st_hs = DDH_Adv.KEDDH._st{2}|}].
 proof.
   proc.
   sp.
 case(real_simp_hash_ddh1_rel0
    {| real_simp_hash_ddh1_rel_st_k1 = DDH_Adv_globs.k1{2};
        real_simp_hash_ddh1_rel_st_k2 = DDH_Adv_globs.k2{2};
      real_simp_hash_ddh1_rel_st_rss = KERealSimpHashingAdv.KERealSimpHash._st{1};
      real_simp_hash_ddh1_rel_st_hs = DDH_Adv.KEDDH._st{2}; |}).
      match KERealSimpStateWaitReq1 {1} 0. auto; smt().
      match KEDDHStateWaitReq1 {2} 0. auto; smt().
      if; last first. auto; smt().
      auto; smt().
      match. auto; smt().
      auto; smt().
  auto; smt().
  move => _x _x0.
      inline _State_KERealSimpStateWaitReq1__KEDir__Pt1__ke_req1.
      inline _State_KEDDHStateWaitReq1__KEDir__Pt1__ke_req1.
  sp 5 5.
      if; last first. auto;smt().
  auto;smt(). 
inline hash.
      sp 1 0.
      rcondf{1} 0. auto;smt().
      sp.
      skip. move => &1 &2 P.
      have H : RH.NonOptHashing.mp{1}.[exp1] = Some (log DDH_Adv_globs.k1{2}). auto; smt(). rewrite H //=. clear H.
      have H : RH.NonOptHashing.mp{1}.[exp2] = Some (log DDH_Adv_globs.k2{2}) . auto; smt(). rewrite H //=. clear H.
      have H : DDH_Adv_globs.k3{2} = g ^ (log DDH_Adv_globs.k1{2} * log DDH_Adv_globs.k2{2}). auto; smt(). rewrite H //=. clear H.
      have H :KERealSimpHashingAdv.KERealSimpHash._self{1} = DDH_Adv.KEDDH._self{2} . auto; smt(). rewrite H //=. clear H.
      have H : DDH_Adv.KEDDH._self{2} = MakeInt.MI.func{1} . auto; smt(). rewrite H //=. clear H.
      have H : (glob Adv){1} = (glob Adv){2}. auto; smt(). rewrite H //=. clear H.
      have H : MakeInt.MI.func{1} = MakeInt.MI.func{2} . auto; smt(). rewrite H //=. clear H.
      have H : MakeInt.MI.in_guard{1} = MakeInt.MI.in_guard{2} . auto; smt(). rewrite H //=. clear H.
  have H : real_simp_hash_ddh1_rel
  {| real_simp_hash_ddh1_rel_st_k1 = DDH_Adv_globs.k1{2};
      real_simp_hash_ddh1_rel_st_k2 = DDH_Adv_globs.k2{2};
    real_simp_hash_ddh1_rel_st_rss = KERealSimpHashingAdv.KERealSimpHash._st{1};
    real_simp_hash_ddh1_rel_st_hs = DDH_Adv.KEDDH._st{2}; |}.
  have H : real_simp_hash_ddh1_rel1
  {| real_simp_hash_ddh1_rel_st_k1 = DDH_Adv_globs.k1{2};
      real_simp_hash_ddh1_rel_st_k2 = DDH_Adv_globs.k2{2};
    real_simp_hash_ddh1_rel_st_rss = KERealSimpHashingAdv.KERealSimpHash._st{1};
    real_simp_hash_ddh1_rel_st_hs = DDH_Adv.KEDDH._st{2}; |}
    pt1{1} pt2{1} .
    auto; progress; smt().
    auto; smt(RealSimpHashDDH1Rel1).
    rewrite H //=. clear H.
  have H : r{1} = Some (UC_Fw1.UC_FwAdv.epdp__fw_obs.`enc
         {| UC_Fw1.UC_FwAdv.fw_obs___func =
             _addr_Fw1 KERealSimpHashingAdv.KERealSimpHash._self{1};
           UC_Fw1.UC_FwAdv.fw_obs___adv = adv;
           UC_Fw1.UC_FwAdv.fw_obs__pt1 = _pt1{1};
           UC_Fw1.UC_FwAdv.fw_obs__pt2 = _pt2{1};
           UC_Fw1.UC_FwAdv.fw_obs__u = u{1}; |}). smt(). rewrite H //=. clear H.
  have H : r{2} = Some (UC_Fw1.UC_FwAdv.epdp__fw_obs.`enc
         {| UC_Fw1.UC_FwAdv.fw_obs___func = _addr_Fw1 DDH_Adv.KEDDH._self{2};
           UC_Fw1.UC_FwAdv.fw_obs___adv = adv;
           UC_Fw1.UC_FwAdv.fw_obs__pt1 = _pt1{2};
           UC_Fw1.UC_FwAdv.fw_obs__pt2 = _pt2{2};
           UC_Fw1.UC_FwAdv.fw_obs__u = u{2}; |}). smt(). rewrite H //=. clear H.
           have H : u{1} = u{2}.
           have H : g ^ q1{1} = DDH_Adv_globs.k1{2}.
       have H : q1{1} = log DDH_Adv_globs.k1{2}. smt(). rewrite H //=. clear H. smt(log_gen).
smt().
           smt().

           case ( exists (pt1 pt2 : port),
           real_simp_hash_ddh1_rel1
    {| real_simp_hash_ddh1_rel_st_k1 = DDH_Adv_globs.k1{2};
        real_simp_hash_ddh1_rel_st_k2 = DDH_Adv_globs.k2{2};
      real_simp_hash_ddh1_rel_st_rss = KERealSimpHashingAdv.KERealSimpHash._st{1};
      real_simp_hash_ddh1_rel_st_hs = DDH_Adv.KEDDH._st{2}; |}
  pt1 pt2).
elim* => pt1 pt2.
      match KERealSimpStateWaitAdv1 {1} 0. auto;smt().
      match KEDDHStateWaitAdv1 {2} 0. auto;smt().
      if; last first. auto;smt().
  auto;smt().
match.
      auto;smt().
      auto;smt().
      auto;smt().
  move => _1 _0.
      inline _State_KERealSimpStateWaitAdv1__Fw1_FwAdv__fw_ok.
  inline _State_KEDDHStateWaitAdv1__Fw1_FwAdv__fw_ok.
sp 4 3.
if; last first. auto;smt().
      auto;smt().
      inline hash.
  sp 2 0.
      rcondf{1} 0. auto;smt().
      sp.
      skip. move => &1 &2 P. progress.
      smt(log_gen double_exp).
      smt(log_gen double_exp).
      smt(log_gen double_exp).
      smt(log_gen double_exp).
      smt(log_gen double_exp).
      smt(log_gen double_exp).
      smt(log_gen double_exp).
      smt(log_gen double_exp).
      smt(log_gen double_exp).
have Q : real_simp_hash_ddh1_rel2
  {| real_simp_hash_ddh1_rel_st_k1 = DDH_Adv_globs.k1{2};
      real_simp_hash_ddh1_rel_st_k2 = DDH_Adv_globs.k2{2};
      real_simp_hash_ddh1_rel_st_rss =
      KERealSimpStateWaitReq2 pt1 pt2 q1{1}
        (oget RH.NonOptHashing.mp{1}.[exp2]); real_simp_hash_ddh1_rel_st_hs =
          KEDDHStateWaitReq2 pt1 pt2; |} pt1 pt2.
          smt().
          smt(RealSimpHashDDH1Rel2).

case ( exists (pt1 pt2 : port),
           real_simp_hash_ddh1_rel2
    {| real_simp_hash_ddh1_rel_st_k1 = DDH_Adv_globs.k1{2};
        real_simp_hash_ddh1_rel_st_k2 = DDH_Adv_globs.k2{2};
      real_simp_hash_ddh1_rel_st_rss = KERealSimpHashingAdv.KERealSimpHash._st{1};
      real_simp_hash_ddh1_rel_st_hs = DDH_Adv.KEDDH._st{2}; |}
  pt1 pt2).
elim* => pt1 pt2.
      match KERealSimpStateWaitReq2 {1} 0. auto; smt().
      match KEDDHStateWaitReq2 {2} 0. auto; smt().
  if; last first. auto; smt(). auto; smt().
match.
      auto; smt().
      auto; smt().
      auto; smt().
  move => _x _x0.
      inline _State_KERealSimpStateWaitReq2__KEDir__Pt2__ke_req2.
      inline _State_KEDDHStateWaitReq2__KEDir__Pt2__ke_req2.
  sp 8 6.
      if; last first. auto; smt(). auto; smt().
      sp. skip. progress.
      smt(log_gen).
  have Q : real_simp_hash_ddh1_rel3
  {| real_simp_hash_ddh1_rel_st_k1 = DDH_Adv_globs.k1{2};
      real_simp_hash_ddh1_rel_st_k2 = DDH_Adv_globs.k2{2};
      real_simp_hash_ddh1_rel_st_rss =
      KERealSimpStateWaitAdv2 pt1 pt2 q1{1}
        (oget RH.NonOptHashing.mp{1}.[exp2]); real_simp_hash_ddh1_rel_st_hs =
          KEDDHStateWaitAdv2 pt1 pt2; |} pt1 pt2.
      smt().
          smt(RealSimpHashDDH1Rel3).

case ( exists (pt1 pt2 : port),
           real_simp_hash_ddh1_rel3
    {| real_simp_hash_ddh1_rel_st_k1 = DDH_Adv_globs.k1{2};
        real_simp_hash_ddh1_rel_st_k2 = DDH_Adv_globs.k2{2};
      real_simp_hash_ddh1_rel_st_rss = KERealSimpHashingAdv.KERealSimpHash._st{1};
      real_simp_hash_ddh1_rel_st_hs = DDH_Adv.KEDDH._st{2}; |}
  pt1 pt2).
      elim* => pt1 pt2.
      match KERealSimpStateWaitAdv2 {1} 0. auto;smt().
      match KEDDHStateWaitAdv2 {2} 0. auto;smt().
      if; last first. auto;smt(). auto;smt().
      match. auto;smt(). auto;smt(). auto;smt().
  move => x y.
      inline _State_KERealSimpStateWaitAdv2__Fw2_FwAdv__fw_ok.
      inline _State_KEDDHStateWaitAdv2__Fw2_FwAdv__fw_ok.
  sp 5 3.
      if; last first. auto;smt(). progress;smt().
      sp.
  elim* => r_R _st_R _r_R r_L _st_L _r_L.
      skip. move => &1 &2 P.
      progress; smt(gen_log double_exp mulC RealSimpHashDDH1Rel4).

case ( real_simp_hash_ddh1_rel4
    {| real_simp_hash_ddh1_rel_st_k1 = DDH_Adv_globs.k1{2};
        real_simp_hash_ddh1_rel_st_k2 = DDH_Adv_globs.k2{2};
      real_simp_hash_ddh1_rel_st_rss = KERealSimpHashingAdv.KERealSimpHash._st{1};
      real_simp_hash_ddh1_rel_st_hs = DDH_Adv.KEDDH._st{2}; |}).
match KERealSimpStateFinal {1} 0. auto;smt().
      match KEDDHStateFinal {2} 0. auto;smt().
  auto;smt(). 
exfalso.
  move => &1 &2.
  move => [#].
  move => _ _ _ _ _  _ _ _ _ _ _.
  move => [];smt().
qed.

local lemma KERealSimpHashingAdv_NonOptHashing_DDH1_DDH_Adv
            (func' : addr, in_guard' : int fset) &m :
  DDH_Adv_globs.func{m} = func' =>
  DDH_Adv_globs.in_guard{m} = in_guard' =>
  Pr[RH.GNonOptHashing(KERealSimpHashingAdv).main() @ &m : res] =
  Pr[DDH1(DDH_Adv(Env, Adv)).main() @ &m : res].
  proof.
  move => glob_func glob_in_guard.
    byequiv.
  proc.
inline  init.
    sp 1 0.
  inline*.
sp 2 0.
    rcondt{1} 0. auto;smt(mem_empty).
    seq 1 1 : (#pre /\ out{1}=q1{2}). rnd. auto;smt().
    sp 3 0.
    rcondt{1} 0. auto;smt(get_setE  mem_empty).
  seq 1 1 : (#pre /\ out0{1}=q2{2}). rnd. auto;smt().
    sp. wp.
    seq 1 1 :(
k1_{2} = g ^ q1{2} /\
  k2_{2} = g ^ q2{2} /\
  k3_{2} = g ^ (q1{2} * q2{2}) /\
  DDH_Adv_globs.k1{2} = k1_{2} /\
  DDH_Adv_globs.k2{2} = k2_{2} /\
  DDH_Adv_globs.k3{2} = k3_{2} /\
  func{2} = DDH_Adv_globs.func{2} /\
  in_guard{2} = DDH_Adv_globs.in_guard{2} /\
  func_{2} = func{2} /\
  in_guard_{2} = in_guard{2} /\
  MakeInt.MI.func{2} = func_{2} /\
  MakeInt.MI.in_guard{2} = in_guard_{2} /\
  self_{2} = MakeInt.MI.func{2} /\
  DDH_Adv.KEDDH._self{2} = self_{2} /\
  DDH_Adv.KEDDH._st{2} = KEDDHStateWaitReq1 /\
  exists (mp_L : (exp_names, exp) fmap),
    RH.NonOptHashing.mp{1} = mp_L.[inp2{1} <- out0{1}] /\
    func{1} = DDH_Adv_globs.func{1} /\
    in_guard{1} = DDH_Adv_globs.in_guard{1} /\
    func_{1} = func{1} /\
    in_guard_{1} = in_guard{1} /\
    MakeInt.MI.func{1} = func_{1} /\
    MakeInt.MI.in_guard{1} = in_guard_{1} /\
    self_{1} = MakeInt.MI.func{1} /\
    KERealSimpHashingAdv.KERealSimpHash._self{1} = self_{1} /\
    KERealSimpHashingAdv.KERealSimpHash._st{1} = KERealSimpStateWaitReq1 /\
    (exists (mp_L0 : (exp_names, exp) fmap),
       mp_L = mp_L0.[inp1{1} <- out{1}] /\
       inp0{1} = exp2 /\
       inp2{1} = inp0{1} /\
       (inp{1} = exp1 /\
        inp1{1} = inp{1} /\
        mp_L0 = empty /\
        (glob Env){2} = (glob Env){m} /\
        DDH_Adv_globs.in_guard{2} = DDH_Adv_globs.in_guard{m} /\
        DDH_Adv_globs.func{2} = DDH_Adv_globs.func{m} /\
        (glob Env){1} = (glob Env){m} /\
        (glob Adv){1} = (glob Adv){2} /\
        DDH_Adv_globs.in_guard{1} = DDH_Adv_globs.in_guard{m} /\
        DDH_Adv_globs.func{1} = DDH_Adv_globs.func{m}) /\
       out{1} = q1{2}) /\
    out0{1} = q2{2}
    ).
        call(_:true). auto;progress;smt().
        call(_: ={ glob Adv, glob MI} /\
RH.NonOptHashing.mp{1}.[exp1] = Some (log DDH_Adv_globs.k1{2}) /\
   RH.NonOptHashing.mp{1}.[exp2] = Some (log DDH_Adv_globs.k2{2}) /\
   DDH_Adv_globs.k3{2} =
   g ^ (log DDH_Adv_globs.k1{2} * log DDH_Adv_globs.k2{2}) /\
   KERealSimpHashingAdv.KERealSimpHash._self{1} = DDH_Adv.KEDDH._self{2} /\
   DDH_Adv.KEDDH._self{2} = MI.func{1} /\
   real_simp_hash_ddh1_rel
     {| real_simp_hash_ddh1_rel_st_k1 = DDH_Adv_globs.k1{2};
         real_simp_hash_ddh1_rel_st_k2 = DDH_Adv_globs.k2{2};
       real_simp_hash_ddh1_rel_st_rss = KERealSimpHashingAdv.KERealSimpHash._st{1};
       real_simp_hash_ddh1_rel_st_hs = DDH_Adv.KEDDH._st{2}; |}).
        proc.
        if; last first. auto;smt(). auto;smt().

inline loop.
sp. wp.
    while(={not_done, r0, m0, glob Adv, glob MI} /\
RH.NonOptHashing.mp{1}.[exp1] = Some (log DDH_Adv_globs.k1{2}) /\
   RH.NonOptHashing.mp{1}.[exp2] = Some (log DDH_Adv_globs.k2{2}) /\
   DDH_Adv_globs.k3{2} =
   g ^ (log DDH_Adv_globs.k1{2} * log DDH_Adv_globs.k2{2}) /\
   KERealSimpHashingAdv.KERealSimpHash._self{1} = DDH_Adv.KEDDH._self{2} /\
   DDH_Adv.KEDDH._self{2} = MI.func{1} /\
   real_simp_hash_ddh1_rel
     {| real_simp_hash_ddh1_rel_st_k1 = DDH_Adv_globs.k1{2};
         real_simp_hash_ddh1_rel_st_k2 = DDH_Adv_globs.k2{2};
       real_simp_hash_ddh1_rel_st_rss = KERealSimpHashingAdv.KERealSimpHash._st{1};
       real_simp_hash_ddh1_rel_st_hs = DDH_Adv.KEDDH._st{2}; |}
    ).
if; last first.
        seq 1 1 : #pre. call(_ : true). auto; smt().
        inline after_adv. auto; smt().
    auto; smt().
        seq 1 1 : #pre.
        call (KERealSimpHashingAdv_NonOptHashing_KEDDH_DDH1_invoke).
        auto; smt().
        inline after_func. auto;smt(). skip. smt().
    elim* => mp_L. move => mp_L0.
        skip. move => &1 &2 P. progress;smt(get_setE gen_log RealSimpHashDDH1Rel0).
    smt().
smt().    
  qed.

type ke_hybrid_state = [
    KEHybridStateWaitReq1
  | KEHybridStateWaitAdv1 of port & port & exp
  | KEHybridStateWaitReq2 of port & port & exp & exp & exp
  | KEHybridStateWaitAdv2 of port & port & exp & exp & exp
  | KEHybridStateFinal
].

local module (KEHybridHashingAdv : RH.HASHING_ADV)
             (Hash : RH.HASHING) = {
  module KEHybridHash : FUNC = {
    var _self : addr
    var _st : ke_hybrid_state

    proc init(self_ : addr) : unit = {
      _self <- self_;
      _st <- KEHybridStateWaitReq1;
    }

  proc _State_KEHybridStateWaitReq1__KEDir__Pt1__ke_req1 (pt1 : port, pt2 : port) : msg option = {
  var _r : msg option <- None;
  var _pt1 : port <- _intport_Pt1 _self;
  var _pt2 : port <- _intport_Pt2 _self;
  var q1 : exp;    
  var u : univ;
  if (envport _self pt2) {
    q1 <@ Hash.hash(exp1);
    u <- epdp_port_port_key_univ.`enc (pt1, pt2, (g ^ q1));
    _r <- Some
      (UC_Fw1.UC_FwAdv.epdp__fw_obs.`enc
        {|
          UC_Fw1.UC_FwAdv.fw_obs___func = _addr_Fw1 _self;
          UC_Fw1.UC_FwAdv.fw_obs___adv = adv;
          UC_Fw1.UC_FwAdv.fw_obs__pt1 = _pt1;
          UC_Fw1.UC_FwAdv.fw_obs__pt2 = _pt2;
          UC_Fw1.UC_FwAdv.fw_obs__u = u;       
        |});
    _st <- KEHybridStateWaitAdv1 pt1 pt2 q1;
    
    }
    else { _r <- None;}
    return _r;
  }

proc _State_KEHybridStateWaitAdv1__Fw1_FwAdv__fw_ok (pt1 : port, pt2 : port, q1 : exp) : msg option = {
  var _r : msg option <- None;
  var q2, q3 : exp;  
  if (envport _self pt2) {
    q2 <@ Hash.hash(exp2); q3 <@ Hash.hash(exp3);  
    _r <- Some
      (UC_KEDir.Pt2.epdp__ke_rsp1.`enc
        {|
          UC_KEDir.Pt2.ke_rsp1___func = _self;
          UC_KEDir.Pt2.ke_rsp1__pt2 = pt2;
          UC_KEDir.Pt2.ke_rsp1__pt1 = pt1;
          UC_KEDir.Pt2.ke_rsp1__k = (g ^ q3);
          
        |});
      _st <- KEHybridStateWaitReq2 pt1 pt2 q1 q2 q3;
    }
  return _r;
  }

  proc _State_KEHybridStateWaitReq2__KEDir__Pt2__ke_req2 (pt1 : port, pt2 : port, pt2' : port, q1 q2 q3 : exp ) : msg option = {
  var u : univ;
  var _pt1 : port <- _intport_Pt2 _self;
  var _pt2 : port <- _intport_Pt1 _self;
  var _r : msg option <- None;
  if (pt2' = pt2) {
    u <- epdp_key_univ.`enc (g ^ q2);
    _r <- Some
      (UC_Fw2.UC_FwAdv.epdp__fw_obs.`enc
        {|
          UC_Fw2.UC_FwAdv.fw_obs___func = _addr_Fw2 _self;
          UC_Fw2.UC_FwAdv.fw_obs___adv = adv;
          UC_Fw2.UC_FwAdv.fw_obs__pt1 = _pt1;
          UC_Fw2.UC_FwAdv.fw_obs__pt2 = _pt2;
          UC_Fw2.UC_FwAdv.fw_obs__u = u;       
        |});
    _st <- KEHybridStateWaitAdv2 pt1 pt2 q1 q2 q3;   
  }
  return _r;
  }
  proc _State_KEHybridStateWaitAdv2__Fw2_FwAdv__fw_ok (pt1 : port, pt2 : port, q3 : exp) : msg option = {
  var _r : msg option <- None;
  if (envport _self pt1) {
    _r <- Some
          (UC_KEDir.Pt1.epdp__ke_rsp2.`enc
          {|
            UC_KEDir.Pt1.ke_rsp2___func = _self;
            UC_KEDir.Pt1.ke_rsp2__pt1 = pt1;
            UC_KEDir.Pt1.ke_rsp2__k = (g ^ q3);
            
          |});
        _st <- KEHybridStateFinal;
  }
  return _r;
  }


  proc invoke(m : msg) : msg option = {
    var r : msg option <- None;
    match _st with
    | KEHybridStateWaitReq1 => {
      if( m.`1 = Dir /\ envport _self m.`3 /\ m.`2 = _extport_Pt1 _self){
        match UC_KEDir.Pt1.epdp__ke_req1.`dec m with
        | Some _x => {
          r <@ _State_KEHybridStateWaitReq1__KEDir__Pt1__ke_req1 (_x.`UC_KEDir.Pt1.ke_req1__pt1, _x.`UC_KEDir.Pt1.ke_req1__pt2);
        }
        | None => {}
        end;
      }
    }
    | KEHybridStateWaitAdv1 pt1 pt2 q1 => {
      if(m.`1 = Adv /\  m.`3.`1 = adv /\ _addr_Fw1 _self = m.`2.`1){ 
        match UC_Fw1.UC_FwAdv.epdp__fw_ok.`dec m with
        | Some _ => {
          r <@ _State_KEHybridStateWaitAdv1__Fw1_FwAdv__fw_ok (pt1, pt2, q1);
        }
        | None => {}
        end;
      }
    }
    | KEHybridStateWaitReq2 pt1 pt2 q1 q2 q3=> {
      if( m.`1 = Dir /\ envport _self m.`3 /\ m.`2 = _extport_Pt2 _self){
        match UC_KEDir.Pt2.epdp__ke_req2.`dec m with
        | Some _x => {
          r <@ _State_KEHybridStateWaitReq2__KEDir__Pt2__ke_req2 (pt1, pt2, _x.`UC_KEDir.Pt2.ke_req2__pt2, q1, q2, q3);
        }
        | None => {}
        end;
      }
    }
    | KEHybridStateWaitAdv2 pt1 pt2 q1 q2 q3=> {
      if(m.`1 = Adv /\  m.`3.`1 = adv /\ _addr_Fw2 _self = m.`2.`1){
        match UC_Fw2.UC_FwAdv.epdp__fw_ok.`dec m with
        | Some _ => {
          r <@ _State_KEHybridStateWaitAdv2__Fw2_FwAdv__fw_ok (pt1, pt2, q3);
        }
        | None => {}
        end;
      }
    }
    | KEHybridStateFinal => {}
    end;
    return r;
    }
  }

  proc main() : bool = {
    var b : bool;
    Hash.rhash(exp1); Hash.rhash(exp2); Hash.rhash(exp3);
    b <@ Exper(MI(KEHybridHash, Adv), Env).main
           (DDH_Adv_globs.func, DDH_Adv_globs.in_guard);
    return b;
  }
}.
type hybrid_hash_ddh2_rel_st = {
  hybrid_hash_ddh2_rel_st_k1  : key;
  hybrid_hash_ddh2_rel_st_k2  : key;
  hybrid_hash_ddh2_rel_st_k3  : key;
  hybrid_hash_ddh2_rel_st_rss : ke_hybrid_state;
  hybrid_hash_ddh2_rel_st_hs  : ke_ddh_state;
}.

pred hybrid_hash_ddh2_rel0 (st : hybrid_hash_ddh2_rel_st) =
  st.`hybrid_hash_ddh2_rel_st_rss = KEHybridStateWaitReq1 /\
  st.`hybrid_hash_ddh2_rel_st_hs = KEDDHStateWaitReq1.

pred hybrid_hash_ddh2_rel1
     (st : hybrid_hash_ddh2_rel_st, pt1 pt2 : port) =
  st.`hybrid_hash_ddh2_rel_st_rss =
  KEHybridStateWaitAdv1 pt1 pt2 (log st.`hybrid_hash_ddh2_rel_st_k1) /\
  st.`hybrid_hash_ddh2_rel_st_hs =
  KEDDHStateWaitAdv1 pt1 pt2.

pred hybrid_hash_ddh2_rel2
     (st : hybrid_hash_ddh2_rel_st, pt1 pt2 : port) =
  st.`hybrid_hash_ddh2_rel_st_rss =
  KEHybridStateWaitReq2
  pt1 pt2
   (log st.`hybrid_hash_ddh2_rel_st_k1)
   (log st.`hybrid_hash_ddh2_rel_st_k2)
   (log st.`hybrid_hash_ddh2_rel_st_k3) /\
  st.`hybrid_hash_ddh2_rel_st_hs =
  KEDDHStateWaitReq2 pt1 pt2.

pred hybrid_hash_ddh2_rel3
     (st : hybrid_hash_ddh2_rel_st, pt1 pt2 : port) =
  st.`hybrid_hash_ddh2_rel_st_rss =
  KEHybridStateWaitAdv2
  pt1 pt2
   (log st.`hybrid_hash_ddh2_rel_st_k1)
   (log st.`hybrid_hash_ddh2_rel_st_k2)
   (log st.`hybrid_hash_ddh2_rel_st_k3) /\
  st.`hybrid_hash_ddh2_rel_st_hs =
  KEDDHStateWaitAdv2 pt1 pt2.

pred hybrid_hash_ddh2_rel4
     (st : hybrid_hash_ddh2_rel_st) =
  st.`hybrid_hash_ddh2_rel_st_rss =
  KEHybridStateFinal
   /\
  st.`hybrid_hash_ddh2_rel_st_hs =
  KEDDHStateFinal.

inductive hybrid_hash_ddh2_rel (st : hybrid_hash_ddh2_rel_st) =
    HybridHashDDH2Rel0 of (hybrid_hash_ddh2_rel0 st)
  | HybridHashDDH2Rel1 (pt1 pt2 : port) of
      (hybrid_hash_ddh2_rel1 st pt1 pt2)
  | HybridHashDDH2Rel2 (pt1 pt2 : port) of
      (hybrid_hash_ddh2_rel2 st pt1 pt2)
  | HybridHashDDH2Rel3 (pt1 pt2 : port) of
      (hybrid_hash_ddh2_rel3 st pt1 pt2)
  | HybridHashDDH2Rel4 of
      (hybrid_hash_ddh2_rel4 st).

local lemma KEHybridHashingAdv_NonOptHashing_KEDDH_DDH2_invoke :
  equiv
  [KEHybridHashingAdv(RH.NonOptHashing).KEHybridHash.invoke ~
   DDH_Adv(Env, Adv).KEDDH.invoke :
   ={m} /\
   RH.NonOptHashing.mp{1}.[exp1] = Some (log DDH_Adv_globs.k1{2}) /\
   RH.NonOptHashing.mp{1}.[exp2] = Some (log DDH_Adv_globs.k2{2}) /\
   RH.NonOptHashing.mp{1}.[exp3] = Some (log DDH_Adv_globs.k3{2}) /\
   ={glob MI} /\
   ={_self}(KEHybridHashingAdv.KEHybridHash, DDH_Adv.KEDDH) /\
   DDH_Adv.KEDDH._self{2} = MI.func{1} /\
   ={glob Adv} /\
   hybrid_hash_ddh2_rel
   {|hybrid_hash_ddh2_rel_st_k1 = DDH_Adv_globs.k1{2};
     hybrid_hash_ddh2_rel_st_k2 = DDH_Adv_globs.k2{2};
     hybrid_hash_ddh2_rel_st_k3 = DDH_Adv_globs.k3{2};
     hybrid_hash_ddh2_rel_st_rss =
     KEHybridHashingAdv.KEHybridHash._st{1};
     hybrid_hash_ddh2_rel_st_hs = DDH_Adv.KEDDH._st{2}|} ==>
   ={res} /\
   RH.NonOptHashing.mp{1}.[exp1] = Some (log DDH_Adv_globs.k1{2}) /\
   RH.NonOptHashing.mp{1}.[exp2] = Some (log DDH_Adv_globs.k2{2}) /\
   RH.NonOptHashing.mp{1}.[exp3] = Some (log DDH_Adv_globs.k3{2}) /\
   ={glob MI} /\
   ={_self}(KEHybridHashingAdv.KEHybridHash, DDH_Adv.KEDDH) /\
   DDH_Adv.KEDDH._self{2} = MI.func{1} /\
   ={glob Adv} /\
   hybrid_hash_ddh2_rel
   {|hybrid_hash_ddh2_rel_st_k1 = DDH_Adv_globs.k1{2};
     hybrid_hash_ddh2_rel_st_k2 = DDH_Adv_globs.k2{2};
     hybrid_hash_ddh2_rel_st_k3 = DDH_Adv_globs.k3{2};
     hybrid_hash_ddh2_rel_st_rss =
     KEHybridHashingAdv.KEHybridHash._st{1};
     hybrid_hash_ddh2_rel_st_hs = DDH_Adv.KEDDH._st{2}|}].
 proof.
proc.
sp.
   case (hybrid_hash_ddh2_rel0 {|
      hybrid_hash_ddh2_rel_st_k1 = DDH_Adv_globs.k1{2};
  hybrid_hash_ddh2_rel_st_k2  = DDH_Adv_globs.k2{2};
  hybrid_hash_ddh2_rel_st_k3  = DDH_Adv_globs.k3{2};
  hybrid_hash_ddh2_rel_st_rss = KEHybridHashingAdv.KEHybridHash._st{1};
  hybrid_hash_ddh2_rel_st_hs  = DDH_Adv.KEDDH._st{2};
   |}).
   match KEHybridStateWaitReq1 {1} 0. auto; smt().
   match KEDDHStateWaitReq1 {2} 0. auto; smt().
   if; last first. auto; smt(). auto; smt().
   match. auto; smt(). auto; smt(). auto; smt().
move => _x _x0.
   inline _State_KEHybridStateWaitReq1__KEDir__Pt1__ke_req1.
   inline _State_KEDDHStateWaitReq1__KEDir__Pt1__ke_req1.
   sp 5 5.
   if; last first. auto; smt(). auto; smt().
 inline hash.
   sp 1 0.
   rcondf{1} 0. auto; smt().
   sp. skip. move => &1 &2 P. progress.
   smt(get_setE log_gen ).
   smt(get_setE log_gen ).
   smt(get_setE log_gen ).
   smt(get_setE log_gen ).
   smt(get_setE log_gen ).
   smt(get_setE log_gen ).
   smt(get_setE log_gen ).
   smt(get_setE log_gen ).
   smt(get_setE log_gen ).

 
have Q : hybrid_hash_ddh2_rel1  {| hybrid_hash_ddh2_rel_st_k1 = DDH_Adv_globs.k1{2};
      hybrid_hash_ddh2_rel_st_k2 = DDH_Adv_globs.k2{2};
      hybrid_hash_ddh2_rel_st_k3 = DDH_Adv_globs.k3{2};
      hybrid_hash_ddh2_rel_st_rss = KEHybridHashingAdv.KEHybridHash._st{1};
   hybrid_hash_ddh2_rel_st_hs = DDH_Adv.KEDDH._st{2}; |}
   pt1{1} pt2{2}.
smt().
   smt(HybridHashDDH2Rel1).
   case (exists (pt1 pt2 : port),
   hybrid_hash_ddh2_rel1 {|
      hybrid_hash_ddh2_rel_st_k1 = DDH_Adv_globs.k1{2};
  hybrid_hash_ddh2_rel_st_k2  = DDH_Adv_globs.k2{2};
  hybrid_hash_ddh2_rel_st_k3  = DDH_Adv_globs.k3{2};
  hybrid_hash_ddh2_rel_st_rss = KEHybridHashingAdv.KEHybridHash._st{1};
  hybrid_hash_ddh2_rel_st_hs  = DDH_Adv.KEDDH._st{2};
   |} pt1 pt2).
elim* => pt1 pt2.
match KEHybridStateWaitAdv1 {1} 0. auto; smt().
match KEDDHStateWaitAdv1 {2} 0. auto; smt().
   if; last first. auto; smt(). auto; smt().
   match. auto; smt(). auto; smt(). auto; smt().
 move => x y.
   inline _State_KEHybridStateWaitAdv1__Fw1_FwAdv__fw_ok.
   inline _State_KEDDHStateWaitAdv1__Fw1_FwAdv__fw_ok.
 sp 4 3. wp 1 1.
if; last first. auto; smt(). auto; smt().
   inline hash.
   sp 1 0.
   rcondf{1} 0. auto; smt().
   sp 2 0.
   rcondf{1} 0. auto; smt().
   sp.
 sp. skip. move => &1 &2 P. progress.
   smt(get_setE log_gen ).
   smt(get_setE log_gen ).
   smt(get_setE log_gen ).
   smt(get_setE log_gen ).
   smt(get_setE log_gen ).
   smt(get_setE log_gen ).
   smt(get_setE log_gen ).
   smt(get_setE log_gen ).
   smt(get_setE log_gen ).
have Q : hybrid_hash_ddh2_rel2  {| hybrid_hash_ddh2_rel_st_k1 = DDH_Adv_globs.k1{2};
      hybrid_hash_ddh2_rel_st_k2 = DDH_Adv_globs.k2{2};
      hybrid_hash_ddh2_rel_st_k3 = DDH_Adv_globs.k3{2};
      hybrid_hash_ddh2_rel_st_rss = KEHybridHashingAdv.KEHybridHash._st{1};
   hybrid_hash_ddh2_rel_st_hs = DDH_Adv.KEDDH._st{2}; |}
   pt1 pt2.
smt().
   smt(HybridHashDDH2Rel2).
 
case (exists (pt1 pt2 : port),
   hybrid_hash_ddh2_rel2 {|
      hybrid_hash_ddh2_rel_st_k1 = DDH_Adv_globs.k1{2};
  hybrid_hash_ddh2_rel_st_k2  = DDH_Adv_globs.k2{2};
  hybrid_hash_ddh2_rel_st_k3  = DDH_Adv_globs.k3{2};
  hybrid_hash_ddh2_rel_st_rss = KEHybridHashingAdv.KEHybridHash._st{1};
  hybrid_hash_ddh2_rel_st_hs  = DDH_Adv.KEDDH._st{2};
   |} pt1 pt2).

   match KEHybridStateWaitReq2 {1} 0. auto; smt().
   match KEDDHStateWaitReq2 {2} 0. auto; smt().
   if; last first. auto; smt(). auto; smt().
   match. auto; smt(). auto; smt(). auto; smt().
 move => _x _x0.
   inline _State_KEHybridStateWaitReq2__KEDir__Pt2__ke_req2.
   inline _State_KEDDHStateWaitReq2__KEDir__Pt2__ke_req2.
   sp 9 6.
   if; last first. auto; smt(). auto; smt().
   sp. skip. move=> &1 &2 P. progress;
   smt(get_setE log_gen HybridHashDDH2Rel3).
case (exists (pt1 pt2 : port),
   hybrid_hash_ddh2_rel3 {|
      hybrid_hash_ddh2_rel_st_k1 = DDH_Adv_globs.k1{2};
  hybrid_hash_ddh2_rel_st_k2  = DDH_Adv_globs.k2{2};
  hybrid_hash_ddh2_rel_st_k3  = DDH_Adv_globs.k3{2};
  hybrid_hash_ddh2_rel_st_rss = KEHybridHashingAdv.KEHybridHash._st{1};
  hybrid_hash_ddh2_rel_st_hs  = DDH_Adv.KEDDH._st{2};
   |} pt1 pt2).
   match KEHybridStateWaitAdv2 {1} 0. auto; smt().
   match KEDDHStateWaitAdv2 {2} 0. auto; smt().
   if; last first. auto; smt(). auto; smt().
   match. auto; smt(). auto; smt(). auto; smt().
 move => x y.
inline _State_KEHybridStateWaitAdv2__Fw2_FwAdv__fw_ok.
   inline _State_KEDDHStateWaitAdv2__Fw2_FwAdv__fw_ok.
 sp 4 3. wp 1 1.
if; last first. auto; smt(). auto; progress; smt().
   sp. skip. move=> &1 &2 P. progress;
   smt(get_setE log_gen HybridHashDDH2Rel4).
 case (
   hybrid_hash_ddh2_rel4 {|
      hybrid_hash_ddh2_rel_st_k1 = DDH_Adv_globs.k1{2};
  hybrid_hash_ddh2_rel_st_k2  = DDH_Adv_globs.k2{2};
  hybrid_hash_ddh2_rel_st_k3  = DDH_Adv_globs.k3{2};
  hybrid_hash_ddh2_rel_st_rss = KEHybridHashingAdv.KEHybridHash._st{1};
  hybrid_hash_ddh2_rel_st_hs  = DDH_Adv.KEDDH._st{2};
   |}).
match KEHybridStateFinal {1} 0. auto; smt().
   match KEDDHStateFinal {2} 0. auto; smt().
   skip. auto; smt().
exfalso.
 move => &1 &2.
 move => [#].
 move => _ _ _ _ _ _ _ _ _ _ _.
 move => [];
 smt().
qed.

local lemma KEHybridHashingAdv_NonOptHashing_DDH2_DDH_Adv
            (func' : addr, in_guard' : int fset) &m :
  DDH_Adv_globs.func{m} = func' =>
  DDH_Adv_globs.in_guard{m} = in_guard' =>
  Pr[RH.GNonOptHashing(KEHybridHashingAdv).main() @ &m : res] =
  Pr[DDH2(DDH_Adv(Env, Adv)).main() @ &m : res].
  proof.
  move => globs_func globs_in_guard.
    byequiv.
  proc.
inline init.
sp.
inline RH.GNonOptHashing(KEHybridHashingAdv).HA.main.
    inline rhash. inline hash.
  sp.
    rcondt{1} 0. move=> &m0. skip.  smt(mem_empty).
    seq 1 1 : (#pre /\ out{1} = q1{2}). rnd. skip. smt().
    sp.
  rcondt{1} 0. move=> &m0. skip. smt(mem_set mem_empty).
    seq 1 1 : (#pre /\ out0{1} = q2{2}). rnd. skip. smt().
sp.
  rcondt{1} 0. move=> &m0. skip. smt(mem_set mem_empty).
    seq 1 1 : (#pre /\ out1{1} = q3{2}). rnd. skip. smt().
    sp. wp.
    conseq(_ :
    ={glob Env, glob Adv, DDH_Adv_globs.in_guard, DDH_Adv_globs.func} /\
    RH.NonOptHashing.mp{1}.[exp1] = Some q1{2} /\
    RH.NonOptHashing.mp{1}.[exp2] = Some q2{2} /\
    RH.NonOptHashing.mp{1}.[exp3] = Some q3{2}
    ==> b0{1} = b{2}).
auto; progress; smt(get_setE).         
  inline *.
sp.
seq 1 1 : #pre. call(_:true). auto;smt().
      wp.
      conseq(_ :
    DDH_Adv_globs.k1{2} = g ^ q1{2} /\
  DDH_Adv_globs.k2{2} = g ^ q2{2} /\
  DDH_Adv_globs.k3{2} = g ^ q3{2} /\
MakeInt.MI.func{2} = DDH_Adv_globs.func{2} /\
      MakeInt.MI.in_guard{2} = DDH_Adv_globs.in_guard{2} /\
    DDH_Adv.KEDDH._self{2} = MakeInt.MI.func{2} /\
      DDH_Adv.KEDDH._st{2} = KEDDHStateWaitReq1 /\
    KEHybridHashingAdv.KEHybridHash._self{1} = MakeInt.MI.func{1} /\
  KEHybridHashingAdv.KEHybridHash._st{1} = KEHybridStateWaitReq1 /\
={glob Env, glob Adv, glob MI, DDH_Adv_globs.in_guard, DDH_Adv_globs.func, func, in_guard} /\
  RH.NonOptHashing.mp{1}.[exp1] = Some q1{2} /\
  RH.NonOptHashing.mp{1}.[exp2] = Some q2{2} /\
  RH.NonOptHashing.mp{1}.[exp3] = Some q3{2}
    ==>
={b1}
). auto; smt().
      call(_:
    RH.NonOptHashing.mp{1}.[exp1] = Some (log DDH_Adv_globs.k1{2}) /\
   RH.NonOptHashing.mp{1}.[exp2] = Some (log DDH_Adv_globs.k2{2}) /\
   RH.NonOptHashing.mp{1}.[exp3] = Some (log DDH_Adv_globs.k3{2}) /\
  MakeInt.MI.func{2} = DDH_Adv_globs.func{2} /\
  MakeInt.MI.in_guard{2} = DDH_Adv_globs.in_guard{2} /\
  DDH_Adv.KEDDH._self{2} = MakeInt.MI.func{2} /\
  
  KEHybridHashingAdv.KEHybridHash._self{1} = MakeInt.MI.func{1} /\
  
  (
   ={glob Adv} /\
   (MakeInt.MI.func{1}, MakeInt.MI.in_guard{1}) =
   (MakeInt.MI.func{2}, MakeInt.MI.in_guard{2}) /\
   ={DDH_Adv_globs.in_guard, DDH_Adv_globs.func}) /\
 hybrid_hash_ddh2_rel
   {|hybrid_hash_ddh2_rel_st_k1 = DDH_Adv_globs.k1{2};
     hybrid_hash_ddh2_rel_st_k2 = DDH_Adv_globs.k2{2};
     hybrid_hash_ddh2_rel_st_k3 = DDH_Adv_globs.k3{2};
     hybrid_hash_ddh2_rel_st_rss =
     KEHybridHashingAdv.KEHybridHash._st{1};
     hybrid_hash_ddh2_rel_st_hs = DDH_Adv.KEDDH._st{2}|}
  ).
proc.
      if; last first. auto;smt(). auto;smt().
  inline loop.
      sp. wp.
  while(
  (={m, m0, r0, not_done} /\
   RH.NonOptHashing.mp{1}.[exp1] = Some (log DDH_Adv_globs.k1{2}) /\
   RH.NonOptHashing.mp{1}.[exp2] = Some (log DDH_Adv_globs.k2{2}) /\
   RH.NonOptHashing.mp{1}.[exp3] = Some (log DDH_Adv_globs.k3{2}) /\
   MakeInt.MI.func{2} = DDH_Adv_globs.func{2} /\
   MakeInt.MI.in_guard{2} = DDH_Adv_globs.in_guard{2} /\
   DDH_Adv.KEDDH._self{2} = MakeInt.MI.func{2} /\
   KEHybridHashingAdv.KEHybridHash._self{1} = MakeInt.MI.func{1} /\
   (={glob Adv, glob MI} /\
    ={DDH_Adv_globs.in_guard, DDH_Adv_globs.func}) /\
   hybrid_hash_ddh2_rel
     {| hybrid_hash_ddh2_rel_st_k1 = DDH_Adv_globs.k1{2};
         hybrid_hash_ddh2_rel_st_k2 = DDH_Adv_globs.k2{2};
         hybrid_hash_ddh2_rel_st_k3 = DDH_Adv_globs.k3{2};
       hybrid_hash_ddh2_rel_st_rss = KEHybridHashingAdv.KEHybridHash._st{1};
       hybrid_hash_ddh2_rel_st_hs = DDH_Adv.KEDDH._st{2}; |})).
if.
       auto; smt().
       seq 1 1 : #pre.
       call KEHybridHashingAdv_NonOptHashing_KEDDH_DDH2_invoke.
       skip. progress. inline after_func. auto; progress; smt().
       inline after_adv. seq 1 1 : #pre.
call(_ : true).
       auto; progress; smt().
       auto; progress; smt().
       auto; progress; smt().
 auto; progress; smt(gen_log HybridHashDDH2Rel0).
trivial. trivial.
qed.



local module KEHybrid : FUNC = {
  var _self : addr
  var _st : ke_hybrid_state

  proc init(self_ : addr) : unit = {
    _self <- self_;
    _st <- KEHybridStateWaitReq1;
    }

  proc _State_KEHybridStateWaitReq1__KEDir__Pt1__ke_req1 (pt1 : port, pt2 : port) : msg option = {
  var _r : msg option <- None;
  var _pt1 : port <- _intport_Pt1 _self;
  var _pt2 : port <- _intport_Pt2 _self;
  var q1 : exp;    
  var u : univ;
  if (envport _self pt2) {
    q1 <$ dexp;
    u <- epdp_port_port_key_univ.`enc (pt1, pt2, (g ^ q1));
    _r <- Some
      (UC_Fw1.UC_FwAdv.epdp__fw_obs.`enc
        {|
          UC_Fw1.UC_FwAdv.fw_obs___func = _addr_Fw1 _self;
          UC_Fw1.UC_FwAdv.fw_obs___adv = adv;
          UC_Fw1.UC_FwAdv.fw_obs__pt1 = _pt1;
          UC_Fw1.UC_FwAdv.fw_obs__pt2 = _pt2;
          UC_Fw1.UC_FwAdv.fw_obs__u = u;       
        |});
    _st <- KEHybridStateWaitAdv1 pt1 pt2 q1;
    
    }
    else { _r <- None;}
    return _r;
  }


proc _State_KEHybridStateWaitAdv1__Fw1_FwAdv__fw_ok (pt1 : port, pt2 : port, q1 : exp) : msg option = {
  var _r : msg option <- None;
  var q2, q3 : exp;  
  if (envport _self pt2) {
     q2 <$ dexp; q3 <$ dexp;  
    _r <- Some
      (UC_KEDir.Pt2.epdp__ke_rsp1.`enc
        {|
          UC_KEDir.Pt2.ke_rsp1___func = _self;
          UC_KEDir.Pt2.ke_rsp1__pt2 = pt2;
          UC_KEDir.Pt2.ke_rsp1__pt1 = pt1;
          UC_KEDir.Pt2.ke_rsp1__k = (g ^ q3);
          
        |});
      _st <- KEHybridStateWaitReq2 pt1 pt2 q1 q2 q3;
    }
  return _r;
  }


  proc _State_KEHybridStateWaitReq2__KEDir__Pt2__ke_req2 (pt1 : port, pt2 : port, pt2' : port, q1 q2 q3 : exp ) : msg option = {
  var u : univ;
  var _pt1 : port <- _intport_Pt2 _self;
  var _pt2 : port <- _intport_Pt1 _self;
  var _r : msg option <- None;
  if (pt2' = pt2) {
    u <- epdp_key_univ.`enc (g ^ q2);
    _r <- Some
      (UC_Fw2.UC_FwAdv.epdp__fw_obs.`enc
        {|
          UC_Fw2.UC_FwAdv.fw_obs___func = _addr_Fw2 _self;
          UC_Fw2.UC_FwAdv.fw_obs___adv = adv;
          UC_Fw2.UC_FwAdv.fw_obs__pt1 = _pt1;
          UC_Fw2.UC_FwAdv.fw_obs__pt2 = _pt2;
          UC_Fw2.UC_FwAdv.fw_obs__u = u;       
        |});
    _st <- KEHybridStateWaitAdv2 pt1 pt2 q1 q2 q3;   
  }
  return _r;
}

proc _State_KEHybridStateWaitAdv2__Fw2_FwAdv__fw_ok (pt1 : port, pt2 : port, q3 : exp) : msg option = {
  var _r : msg option <- None;
  if (envport _self pt1) {
    _r <- Some
          (UC_KEDir.Pt1.epdp__ke_rsp2.`enc
          {|
            UC_KEDir.Pt1.ke_rsp2___func = _self;
            UC_KEDir.Pt1.ke_rsp2__pt1 = pt1;
            UC_KEDir.Pt1.ke_rsp2__k = (g ^ q3);
            
          |});
        _st <- KEHybridStateFinal;
  }
  return _r;
  }


  proc invoke(m : msg) : msg option = {
    var r : msg option <- None;
    match _st with
    | KEHybridStateWaitReq1 => {
      if( m.`1 = Dir /\ envport _self m.`3 /\ m.`2 = _extport_Pt1 _self){
        match UC_KEDir.Pt1.epdp__ke_req1.`dec m with
        | Some _x => {
          r <@ _State_KEHybridStateWaitReq1__KEDir__Pt1__ke_req1 (_x.`UC_KEDir.Pt1.ke_req1__pt1, _x.`UC_KEDir.Pt1.ke_req1__pt2);
        }
        | None => {}
        end;
      }
    }
    | KEHybridStateWaitAdv1 pt1 pt2 q1 => {
      if(m.`1 = Adv /\  m.`3.`1 = adv /\ _addr_Fw1 _self = m.`2.`1){ 
        match UC_Fw1.UC_FwAdv.epdp__fw_ok.`dec m with
        | Some _ => {
          r <@ _State_KEHybridStateWaitAdv1__Fw1_FwAdv__fw_ok (pt1, pt2, q1);
        }
        | None => {}
        end;
      }
    }
    | KEHybridStateWaitReq2 pt1 pt2 q1 q2 q3=> {
      if( m.`1 = Dir /\ envport _self m.`3 /\ m.`2 = _extport_Pt2 _self){
        match UC_KEDir.Pt2.epdp__ke_req2.`dec m with
        | Some _x => {
          r <@ _State_KEHybridStateWaitReq2__KEDir__Pt2__ke_req2 (pt1, pt2, _x.`UC_KEDir.Pt2.ke_req2__pt2, q1, q2, q3);
        }
        | None => {}
        end;
      }
    }
    | KEHybridStateWaitAdv2 pt1 pt2 q1 q2 q3=> {
      if(m.`1 = Adv /\  m.`3.`1 = adv /\ _addr_Fw2 _self = m.`2.`1){
        match UC_Fw2.UC_FwAdv.epdp__fw_ok.`dec m with
        | Some _ => {
          r <@ _State_KEHybridStateWaitAdv2__Fw2_FwAdv__fw_ok (pt1, pt2, q3);
        }
        | None => {}
        end;
      }
    }
    | KEHybridStateFinal => {}
    end;
    return r;
  }
}.

op _invar_KEHybrid (g : glob KEHybrid) : bool = predT g.

 

op glob_KEHybrid_to__st (g : glob KEHybrid) / : ke_hybrid_state = g.`2.
op [smt_opaque] _metric_KEHybrid (g : glob KEHybrid) : int =
  match glob_KEHybrid_to__st g with
  | KEHybridStateWaitReq1 => 4
  | KEHybridStateWaitAdv1 _ _ _ => 3
  | KEHybridStateWaitReq2 _ _ _ _ _ => 2
  | KEHybridStateWaitAdv2 _ _ _ _ _ => 1
  | KEHybridStateFinal => 0
  end.
  


local lemma KEHybrid_invoke (n : int) : hoare [
  KEHybrid.invoke :
  _invar_KEHybrid (glob KEHybrid) /\ _metric_KEHybrid (glob KEHybrid) = n
  ==>
  (res <> None =>
  _metric_KEHybrid (glob KEHybrid) < n
  /\ ((oget res).`1 = Adv => (oget res).`2.`2 \in adv_pis_rf_info rf_info))
   ].
proof.
rewrite /_metric_KEHybrid /=.
  proc. inline. sp.
  match.
if.
match.
  skip. move => />;smt().
  sp 5.
  if; last first.
  sp. skip. move => />;smt().
  seq 1 : #pre. rnd.
  skip. move => />;smt().
  sp.
  skip. move => />;smt(mem_oflist mem_rangeset in_fsetU).
  skip. move => />;smt().
if; last first.
  sp. skip. move => />;smt().
  match.
  sp. skip. move => />;smt().
sp 4.
  if.
seq 1 : #pre. rnd.
  skip. move => />;smt().
seq 1 : #pre. rnd.
  skip. move => />;smt().
sp.
  skip. move => />;smt(mem_oflist mem_rangeset in_fsetU).
  sp. skip. move => />;smt().
  if; last first. skip. move => />;smt().
  match.
  skip. move => />;smt().
sp 9.
if; last first. sp. skip. move => />;smt().
sp.
  skip. move => />;smt(mem_oflist mem_rangeset in_fsetU).
  if; last first. sp. skip. move => />;smt().
match.
  skip. move => />;smt().
  sp 4.
if; last first. sp. skip. move => />;smt().
sp.
  skip. move => />;smt(mem_oflist mem_rangeset in_fsetU).
  skip. move => />;smt().
qed.

lemma _metric_KEHybrid_good (g : glob KEHybrid) :
  _invar_KEHybrid g => 0 <= _metric_KEHybrid g.
    proof. rewrite /_metric_KEHybrid /=.
      smt(). qed.

type hybrid_hash_rel_st = {
  hybrid_hash_rel_st_rss : ke_hybrid_state;
  hybrid_hash_rel_st_map : (exp_names, exp) fmap;
}.

pred hybrid_hash_rel0 (st : hybrid_hash_rel_st) =
  st.`hybrid_hash_rel_st_rss = KEHybridStateWaitReq1 /\
  st.`hybrid_hash_rel_st_map.[exp1] = None /\
  st.`hybrid_hash_rel_st_map.[exp2] = None /\
  st.`hybrid_hash_rel_st_map.[exp3] = None.

pred hybrid_hash_rel1 (st : hybrid_hash_rel_st, pt1 pt2 : port, q1 : exp) =
  st.`hybrid_hash_rel_st_rss = KEHybridStateWaitAdv1 pt1 pt2 q1 /\
  st.`hybrid_hash_rel_st_map.[exp1] = Some q1 /\
  st.`hybrid_hash_rel_st_map.[exp2] = None /\
  st.`hybrid_hash_rel_st_map.[exp3] = None.

pred hybrid_hash_rel2 (st : hybrid_hash_rel_st, pt1 pt2 : port, q1 q2 q3 : exp) =
  st.`hybrid_hash_rel_st_rss = KEHybridStateWaitReq2 pt1 pt2 q1 q2 q3 /\
  st.`hybrid_hash_rel_st_map.[exp1] = Some q1 /\
  st.`hybrid_hash_rel_st_map.[exp2] = Some q2 /\
  st.`hybrid_hash_rel_st_map.[exp3] = Some q3.

pred hybrid_hash_rel3 (st : hybrid_hash_rel_st, pt1 pt2 : port, q1 q2 q3 : exp) =
  st.`hybrid_hash_rel_st_rss = KEHybridStateWaitAdv2 pt1 pt2 q1 q2 q3 /\
  st.`hybrid_hash_rel_st_map.[exp1] = Some q1 /\
  st.`hybrid_hash_rel_st_map.[exp2] = Some q2 /\
  st.`hybrid_hash_rel_st_map.[exp3] = Some q3.

pred hybrid_hash_rel4 (st : hybrid_hash_rel_st) =
  st.`hybrid_hash_rel_st_rss = KEHybridStateFinal.



inductive hybrid_hash_rel (st : hybrid_hash_rel_st) =
    HybridHashRel0 of (hybrid_hash_rel0 st)
  | HybridHashRel1 (pt1 pt2 : port, q1 : exp) of
      (hybrid_hash_rel1 st pt1 pt2 q1)
  | HybridHashRel2 (pt1 pt2 : port, q1 q2 q3 : exp) of
      (hybrid_hash_rel2 st pt1 pt2 q1 q2 q3)
  | HybridHashRel3 (pt1 pt2 : port, q1 q2 q3 : exp) of
      (hybrid_hash_rel3 st pt1 pt2 q1 q2 q3)
  | HybridHashRel4 of (hybrid_hash_rel4 st).

local lemma KEHybrid_KEHybridHash_OptHashing_invoke :
  equiv
  [KEHybrid.invoke ~
   KEHybridHashingAdv(RH.OptHashing).KEHybridHash.invoke :
   ={m} /\
   ={_self, _st}(KEHybrid, KEHybridHashingAdv.KEHybridHash) /\
   hybrid_hash_rel
   {|hybrid_hash_rel_st_rss = KEHybrid._st{1};
     hybrid_hash_rel_st_map = RH.OptHashing.mp{2}|} ==>
   ={res} /\
   ={_self, _st}(KEHybrid, KEHybridHashingAdv.KEHybridHash) /\
   hybrid_hash_rel
   {|hybrid_hash_rel_st_rss = KEHybrid._st{1};
     hybrid_hash_rel_st_map = RH.OptHashing.mp{2}|}].
 proof.
proc.
   sp.
   case (hybrid_hash_rel0 {|
     hybrid_hash_rel_st_rss = KEHybrid._st{1};
     hybrid_hash_rel_st_map = RH.OptHashing.mp{2}; |}).
   match KEHybridStateWaitReq1 {1} 0. auto;smt().
   match KEHybridStateWaitReq1 {2} 0. auto;smt().
   if; last first. auto;smt(). auto;smt().
   match. auto;smt(). auto;smt(). auto;smt().
 move => _x _x0.
   inline _State_KEHybridStateWaitReq1__KEDir__Pt1__ke_req1.
   sp. wp.
   if; last first. auto;smt(). auto;smt().
   inline hash.
   sp. rcondt{2} 0. auto; smt(mem_empty).
   seq 1 1 : (#pre /\ q1{1} = out{2}).
   rnd. auto;smt().
   sp. skip. move=> &1 &2 P.
   progress.
   smt(get_setE).
   smt(). smt(get_setE).
   have H : hybrid_hash_rel1 {| hybrid_hash_rel_st_rss = KEHybrid._st{1}; hybrid_hash_rel_st_map = RH.OptHashing.mp{2}; |} pt1{1} pt2{1} q1{1}.
smt(get_setE). smt(HybridHashRel1).

   case ( exists (pt1 pt2:port) (q1:exp),
   hybrid_hash_rel1 {|
     hybrid_hash_rel_st_rss = KEHybrid._st{1};
     hybrid_hash_rel_st_map = RH.OptHashing.mp{2}; |} pt1 pt2 q1).
elim* => pt1 pt2 q1.
match KEHybridStateWaitAdv1  {1} 0. auto;smt().
   match KEHybridStateWaitAdv1  {2} 0. auto;smt().
 if; last first. auto;smt(). auto;smt().
   match. auto;smt(). auto;smt(). auto;smt().
 move => _x _x0.
   inline _State_KEHybridStateWaitAdv1__Fw1_FwAdv__fw_ok.
   sp. wp. if; last first. auto;smt(). auto;smt().
inline hash.
   sp. rcondt{2} 0. auto; smt(mem_empty).
   seq 1 1 : (#pre /\ q2{1} = out{2}).
   rnd. auto;smt().
   sp. rcondt{2} 0. auto; smt(mem_set).
   seq 1 1 : (#pre /\ q3{1} = out0{2}).
   rnd. auto;smt().
sp. skip. move=> &1 &2 P.
   progress.
 smt(get_setE).
   smt(). smt(get_setE).
 have H : hybrid_hash_rel2 {| hybrid_hash_rel_st_rss = KEHybrid._st{1}; hybrid_hash_rel_st_map = RH.OptHashing.mp{2}; |} pt1 pt2 q1 q2{1} q3{1}.
   smt(get_setE). smt(HybridHashRel2).
case ( exists (pt1 pt2 : port) (q1 q2 q3 : exp),
   hybrid_hash_rel2 {|
     hybrid_hash_rel_st_rss = KEHybrid._st{1};
     hybrid_hash_rel_st_map = RH.OptHashing.mp{2}; |} pt1 pt2 q1 q2 q3).
 elim* => pt1 pt2 q1 q2 q3.
match KEHybridStateWaitReq2  {1} 0. auto;smt().
   match KEHybridStateWaitReq2  {2} 0. auto;smt().
 if; last first. auto;smt(). auto;smt().
   match. auto;smt(). auto;smt(). auto;smt().
 move => _x _x0.
   inline _State_KEHybridStateWaitReq2__KEDir__Pt2__ke_req2.
   sp 9 9. wp 1 1. if; last first. auto;smt(). auto;smt().
 sp. skip. move=> &1 &2 P.
   progress.
   smt().
smt().
   smt().
 have H : hybrid_hash_rel3 {| hybrid_hash_rel_st_rss = KEHybrid._st{1}; hybrid_hash_rel_st_map = RH.OptHashing.mp{2}; |} pt1 pt2 q1 q2 q3.
 smt(get_setE). smt(HybridHashRel3).
case ( exists (pt1 pt2 : port) (q1 q2 q3 : exp),
   hybrid_hash_rel3 {|
     hybrid_hash_rel_st_rss = KEHybrid._st{1};
     hybrid_hash_rel_st_map = RH.OptHashing.mp{2}; |} pt1 pt2 q1 q2 q3).
   elim* => pt1 pt2 q1 q2 q3.
 match KEHybridStateWaitAdv2  {1} 0. auto;smt().
   match KEHybridStateWaitAdv2  {2} 0. auto;smt().
 if; last first. auto;smt(). auto;smt().
   match. auto;smt(). auto;smt(). auto;smt().
 move => _x _x0.
   inline _State_KEHybridStateWaitAdv2__Fw2_FwAdv__fw_ok.
   sp 4 4. wp 1 1. if; last first. auto;smt(). auto;smt().
 sp. skip. move=> &1 &2 P.
   progress.
   smt().
smt().
   smt().
 have H : hybrid_hash_rel4 {| hybrid_hash_rel_st_rss = KEHybrid._st{1}; hybrid_hash_rel_st_map = RH.OptHashing.mp{2}; |}.
   smt(get_setE). smt(HybridHashRel4).
case (
   hybrid_hash_rel4 {|
     hybrid_hash_rel_st_rss = KEHybrid._st{1};
     hybrid_hash_rel_st_map = RH.OptHashing.mp{2}; |}).
   
match KEHybridStateFinal  {1} 0. auto;smt().
   match KEHybridStateFinal  {2} 0. auto;smt().
   auto;smt().

 exfalso.
move => &1 &2. 
move => [#].
move => _ _ _ _ _.
move => []; smt().
qed.

local lemma Exper_KEHybrid_KEHybridHashingAdv_OptHashing
            (func' : addr, in_guard' : int fset) &m :
  DDH_Adv_globs.func{m} = func' =>
  DDH_Adv_globs.in_guard{m} = in_guard' =>
  Pr[Exper(MI(KEHybrid, Adv), Env).main
       (func', in_guard') @ &m : res] =
  Pr[RH.GOptHashing(KEHybridHashingAdv).main() @ &m : res].
  proof.
  move => DDH_Adv_globs_func DDH_Adv_globs_in_guard.
    byequiv.
    proc.
    inline*.
  sp.
    seq 1 1 : (
    RH.OptHashing.mp{2} = empty /\
  inp{2} = exp1 /\
  inp0{2} = exp2 /\
  inp1{2} = exp3 /\
  func{2} = DDH_Adv_globs.func{2} /\
  in_guard{2} = DDH_Adv_globs.in_guard{2} /\
  func_{2} = func{2} /\
  in_guard_{2} = in_guard{2} /\
  MakeInt.MI.func{2} = func_{2} /\
  MakeInt.MI.in_guard{2} = in_guard_{2} /\
  self_{2} = MakeInt.MI.func{2} /\
  KEHybridHashingAdv.KEHybridHash._self{2} = self_{2} /\
  KEHybridHashingAdv.KEHybridHash._st{2} = KEHybridStateWaitReq1 /\
  func_{1} = func{1} /\
  in_guard_{1} = in_guard{1} /\
  MakeInt.MI.func{1} = func_{1} /\
  MakeInt.MI.in_guard{1} = in_guard_{1} /\
  self_{1} = MakeInt.MI.func{1} /\
  KEHybrid._self{1} = self_{1} /\
  KEHybrid._st{1} = KEHybridStateWaitReq1 /\
  (glob Env){2} = (glob Env){m} /\
  DDH_Adv_globs.in_guard{2} = DDH_Adv_globs.in_guard{m} /\
  DDH_Adv_globs.func{2} = DDH_Adv_globs.func{m} /\
  (func{1}, in_guard{1}) = (func', in_guard') /\
  (glob Env){1} = (glob Env){m} /\ (glob Adv){1} = (glob Adv){2}
).
    call (_ : true). auto; smt().
wp.
    call(_ :
  ={glob Adv,  glob MI} /\
  MakeInt.MI.func{2} = func' /\
  MakeInt.MI.in_guard{2} = in_guard' /\
  KEHybridHashingAdv.KEHybridHash._self{2} = func' /\
  KEHybrid._self{1} = func' /\
  DDH_Adv_globs.in_guard{2} = in_guard' /\
    DDH_Adv_globs.func{2} = func' /\
  KEHybrid._st{1} = KEHybridHashingAdv.KEHybridHash._st{2} /\
   hybrid_hash_rel
   {|hybrid_hash_rel_st_rss = KEHybrid._st{1};
     hybrid_hash_rel_st_map = RH.OptHashing.mp{2}|}
  ).
proc.
      if; last first. auto;smt(). auto;smt().
  inline loop.
      sp. wp.
      while(
   ={m, m0, r0, glob Adv, glob MI} /\
   MakeInt.MI.func{2} = func' /\
   MakeInt.MI.in_guard{2} = in_guard' /\
   KEHybridHashingAdv.KEHybridHash._self{2} = func' /\
   KEHybrid._self{1} = func' /\
     DDH_Adv_globs.in_guard{2} = in_guard' /\ DDH_Adv_globs.func{2} = func' /\
   KEHybrid._st{1} = KEHybridHashingAdv.KEHybridHash._st{2}
   /\
   hybrid_hash_rel
   {|hybrid_hash_rel_st_rss = KEHybrid._st{1};
     hybrid_hash_rel_st_map = RH.OptHashing.mp{2}|}
  ).

if;last first.
      seq 1 1 : #pre. call(_:true). auto;smt().
  inline after_adv.
auto;progress;smt().
      auto;progress;smt().
      seq 1 1 : #pre.
      call KEHybrid_KEHybridHash_OptHashing_invoke.
  skip. move => &1 &2 P.
      progress; smt().
      inline after_func.
  auto;progress;smt().
skip. move => &1 &2 P.
      progress; smt().
      skip. move => &1 &2 P.
      have H : func{1} = func'. smt().
  have G : in_guard{1} = in_guard'. smt().
      progress;smt(HybridHashRel0 mem_empty). smt(). smt(). 
qed.

type ke_hybrid_ideal_sim_rel_st = {
  ke_hybrid_ideal_sim_rel_func : addr;
  ke_hybrid_ideal_sim_rel_in_guard : int fset;
  ke_hybrid_ideal_sim_rel_st_hs  : ke_hybrid_state;
  ke_hybrid_ideal_sim_rel_st_hslf: addr;
  ke_hybrid_ideal_sim_rel_st_is  : _state_IF;
  ke_hybrid_ideal_sim_rel_st_islf: addr;
  ke_hybrid_ideal_sim_rel_st_ss  : _state_SIM;
  ke_hybrid_ideal_sim_rel_sim_ao : addr option;
  ke_hybrid_ideal_sim_rel_ms_ao  : addr option;
  ke_hybrid_ideal_sim_rel_mi1_func : addr;
  ke_hybrid_ideal_sim_rel_mi1_in_guard : int fset;
  ke_hybrid_ideal_sim_rel_mi2_func : addr;
  ke_hybrid_ideal_sim_rel_mi2_in_guard : int fset;
}.

pred ke_hybrid_ideal_sim_relC (st : ke_hybrid_ideal_sim_rel_st) =
  st.`ke_hybrid_ideal_sim_rel_mi1_func = st.`ke_hybrid_ideal_sim_rel_mi2_func /\
  st.`ke_hybrid_ideal_sim_rel_mi1_in_guard = st.`ke_hybrid_ideal_sim_rel_mi2_in_guard /\
  st.`ke_hybrid_ideal_sim_rel_mi2_func = st.`ke_hybrid_ideal_sim_rel_func /\
  st.`ke_hybrid_ideal_sim_rel_mi2_in_guard = st.`ke_hybrid_ideal_sim_rel_in_guard /\
  st.`ke_hybrid_ideal_sim_rel_st_islf = st.`ke_hybrid_ideal_sim_rel_mi2_func /\
  st.`ke_hybrid_ideal_sim_rel_ms_ao = st.`ke_hybrid_ideal_sim_rel_sim_ao /\
  st.`ke_hybrid_ideal_sim_rel_st_hslf = st.`ke_hybrid_ideal_sim_rel_mi1_func.

pred ke_hybrid_ideal_sim_rel0 (st : ke_hybrid_ideal_sim_rel_st) =
  st.`ke_hybrid_ideal_sim_rel_st_hs = KEHybridStateWaitReq1 /\
  st.`ke_hybrid_ideal_sim_rel_st_is = _State_IF_WaitReq1 /\
  st.`ke_hybrid_ideal_sim_rel_st_ss = _State_SIM_WaitReq1 /\
  st.`ke_hybrid_ideal_sim_rel_sim_ao = None /\
  ke_hybrid_ideal_sim_relC st.

pred ke_hybrid_ideal_sim_rel1
     (st : ke_hybrid_ideal_sim_rel_st, pt1 pt2 : port, q1 : exp) =
  envport st.`ke_hybrid_ideal_sim_rel_func pt2 /\
  st.`ke_hybrid_ideal_sim_rel_st_hs = KEHybridStateWaitAdv1 pt1 pt2 q1 /\
  st.`ke_hybrid_ideal_sim_rel_st_is = _State_IF_WaitSim1 pt1 pt2 /\
  st.`ke_hybrid_ideal_sim_rel_st_ss = _State_SIM_WaitAdv1 q1 /\
  st.`ke_hybrid_ideal_sim_rel_sim_ao = Some st.`ke_hybrid_ideal_sim_rel_func /\
  ke_hybrid_ideal_sim_relC st.



pred ke_hybrid_ideal_sim_rel2
     (st : ke_hybrid_ideal_sim_rel_st, pt1 pt2 : port, q1 q2 q3 : exp) =
  envport st.`ke_hybrid_ideal_sim_rel_func pt2 /\
  st.`ke_hybrid_ideal_sim_rel_st_hs = KEHybridStateWaitReq2 pt1 pt2 q1 q2 q3 /\
  st.`ke_hybrid_ideal_sim_rel_st_is = _State_IF_WaitReq2 pt1 pt2 q3 /\
  st.`ke_hybrid_ideal_sim_rel_st_ss = _State_SIM_WaitReq2 q1 q2 /\
  st.`ke_hybrid_ideal_sim_rel_sim_ao = Some st.`ke_hybrid_ideal_sim_rel_func /\
  ke_hybrid_ideal_sim_relC st.

pred ke_hybrid_ideal_sim_rel3
     (st : ke_hybrid_ideal_sim_rel_st, pt1 pt2 : port, q1 q2 q3 : exp) =
  envport st.`ke_hybrid_ideal_sim_rel_func pt2 /\
  st.`ke_hybrid_ideal_sim_rel_st_hs = KEHybridStateWaitAdv2 pt1 pt2 q1 q2 q3 /\
  st.`ke_hybrid_ideal_sim_rel_st_is = _State_IF_WaitSim2 pt1 pt2 q3 /\
  st.`ke_hybrid_ideal_sim_rel_st_ss = _State_SIM_WaitAdv2 q1 q2 /\
  st.`ke_hybrid_ideal_sim_rel_sim_ao = Some st.`ke_hybrid_ideal_sim_rel_func /\
  ke_hybrid_ideal_sim_relC st.

pred ke_hybrid_ideal_sim_rel4
(st : ke_hybrid_ideal_sim_rel_st, pt1 : port) =
  envport st.`ke_hybrid_ideal_sim_rel_func pt1 /\
  st.`ke_hybrid_ideal_sim_rel_st_hs = KEHybridStateFinal /\
  st.`ke_hybrid_ideal_sim_rel_st_is = _State_IF_Final /\
  st.`ke_hybrid_ideal_sim_rel_st_ss = _State_SIM_Final /\
  st.`ke_hybrid_ideal_sim_rel_sim_ao = Some st.`ke_hybrid_ideal_sim_rel_func /\
  ke_hybrid_ideal_sim_relC st.

inductive ke_hybrid_ideal_sim_rel (st : ke_hybrid_ideal_sim_rel_st) =
    KEHybridIdealSimRel0 of (ke_hybrid_ideal_sim_rel0 st)
  | KEHybridIdealSimRel1 (pt1 pt2 : port, q1 : exp) of
      (ke_hybrid_ideal_sim_rel1 st pt1 pt2 q1)
  | KEHybridIdealSimRel2 (pt1 pt2 : port, q1 q2 q3 : exp) of
      (ke_hybrid_ideal_sim_rel2 st pt1 pt2 q1 q2 q3)
  | KEHybridIdealSimRel3 (pt1 pt2 : port, q1 q2 q3 : exp) of
      (ke_hybrid_ideal_sim_rel3 st pt1 pt2 q1 q2 q3)
  | KEHybridIdealSimRel4 (pt1 : port) of
      (ke_hybrid_ideal_sim_rel4 st pt1).

lemma ke_hybrid_ideal_sim_rel_implies_C (st : ke_hybrid_ideal_sim_rel_st) :
    ke_hybrid_ideal_sim_rel st => ke_hybrid_ideal_sim_relC st.
    proof. move => []; smt(). qed.

local lemma Exper_KEHybrid_KEIdeal_KESim_dummy_adversary
    (EnvX <: ENV{-MI, -KEHybrid, -DummyAdv, -UC_KEIdeal, -MSCore.MS, -UC_KESim})
            (func' : addr, in_guard' : int fset) &m :
            exper_pre func' =>
            disjoint in_guard' (fset1 _adv_if_pi) =>
  `|Pr[Exper(MI(KEHybrid, DummyAdv), EnvX).main
       (func', in_guard') @ &m : res] -
  Pr[Exper(MI(UC_KEIdeal, MSCore.MS(UC_KESim, DummyAdv)), EnvX).main
       (func', in_guard') @ &m : res]| <= 0%r.
     proof.
    
move => pre disj.
       have H :
`|Pr[Exper(MI(KEHybrid, DummyAdv), EnvX).main(func', in_guard') @ &m : res] -
  Pr[Exper(MI(UC_KEIdeal, MSCore.MS(UC_KESim, DummyAdv)), EnvX).main(func',in_guard') @ &m : res]| <=
0%r
    <=>
  Pr[Exper(MI(KEHybrid, DummyAdv), EnvX).main(func', in_guard') @ &m : res] =
  Pr[Exper(MI(UC_KEIdeal, MSCore.MS(UC_KESim, DummyAdv)), EnvX).main(func',in_guard') @ &m : res].
  smt(). apply H. clear H.
byequiv; first last. trivial. trivial.
proc.
inline init.
    sp.
    call (_ :
  ke_hybrid_ideal_sim_rel(  {|
  ke_hybrid_ideal_sim_rel_func = func';
  ke_hybrid_ideal_sim_rel_in_guard = in_guard';
        ke_hybrid_ideal_sim_rel_st_hs = KEHybrid._st{1};
        ke_hybrid_ideal_sim_rel_st_hslf = KEHybrid._self{1};
        ke_hybrid_ideal_sim_rel_st_is = UC_KEIdeal._st{2};
        ke_hybrid_ideal_sim_rel_st_islf = UC_KEIdeal._self{2};
  ke_hybrid_ideal_sim_rel_st_ss = UC_KESim._st{2};
        ke_hybrid_ideal_sim_rel_sim_ao = UC_KESim.if_addr_opt{2};
        ke_hybrid_ideal_sim_rel_ms_ao = MSCore.MS.if_addr_opt{2};
        ke_hybrid_ideal_sim_rel_mi1_func = MakeInt.MI.func{1};
  ke_hybrid_ideal_sim_rel_mi1_in_guard = MakeInt.MI.in_guard{1};
  ke_hybrid_ideal_sim_rel_mi2_func = MakeInt.MI.func{2};
  ke_hybrid_ideal_sim_rel_mi2_in_guard = MakeInt.MI.in_guard{2};
    |})
); last first. auto;smt(KEHybridIdealSimRel0).
      proc.
      if; last first. auto;smt(). auto;smt(ke_hybrid_ideal_sim_rel_implies_C).
  inline loop.
    sp. wp.
print glob KEHybrid.
  exlim
{| ke_hybrid_ideal_sim_rel_func = func';
         ke_hybrid_ideal_sim_rel_in_guard = in_guard';
         ke_hybrid_ideal_sim_rel_st_hs = KEHybrid._st{1};
         ke_hybrid_ideal_sim_rel_st_hslf = KEHybrid._self{1};
         ke_hybrid_ideal_sim_rel_st_is = UC_KEIdeal._st{2};
         ke_hybrid_ideal_sim_rel_st_islf = UC_KEIdeal._self{2};
         ke_hybrid_ideal_sim_rel_st_ss = UC_KESim._st{2};
         ke_hybrid_ideal_sim_rel_sim_ao = UC_KESim.if_addr_opt{2};
         ke_hybrid_ideal_sim_rel_ms_ao = MSCore.MS.if_addr_opt{2};
         ke_hybrid_ideal_sim_rel_mi1_func = MakeInt.MI.func{1};
         ke_hybrid_ideal_sim_rel_mi1_in_guard = MakeInt.MI.in_guard{1};
         ke_hybrid_ideal_sim_rel_mi2_func = MakeInt.MI.func{2};
         ke_hybrid_ideal_sim_rel_mi2_in_guard = MakeInt.MI.in_guard{2}; |} => state.

        (* the "!!" is a hack to make the ambient case be a boolean one *)
      print hybrid.
case @[ambient] (!! ke_hybrid_ideal_sim_rel state) =>
 [/= [] | ?]; last exfalso; smt().
move => rel0.
conseq(_: m0{2} = m{2} /\
  r0{2} = None /\
  not_done{2} = true /\
  m0{1} = m{1} /\
  r0{1} = None /\
  not_done{1} = true /\
   ={m} /\
   main_guard MakeInt.MI.func{1} MakeInt.MI.in_guard{1} m{1} /\
   ke_hybrid_ideal_sim_rel0
     {| ke_hybrid_ideal_sim_rel_func = func';
         ke_hybrid_ideal_sim_rel_in_guard = in_guard';
         ke_hybrid_ideal_sim_rel_st_hs = KEHybrid._st{1};
         ke_hybrid_ideal_sim_rel_st_hslf = KEHybrid._self{1};
         ke_hybrid_ideal_sim_rel_st_is = UC_KEIdeal._st{2};
         ke_hybrid_ideal_sim_rel_st_islf = UC_KEIdeal._self{2};
         ke_hybrid_ideal_sim_rel_st_ss = UC_KESim._st{2};
         ke_hybrid_ideal_sim_rel_sim_ao = UC_KESim.if_addr_opt{2};
         ke_hybrid_ideal_sim_rel_ms_ao = MSCore.MS.if_addr_opt{2};
         ke_hybrid_ideal_sim_rel_mi1_func = MakeInt.MI.func{1};
         ke_hybrid_ideal_sim_rel_mi1_in_guard = MakeInt.MI.in_guard{1};
         ke_hybrid_ideal_sim_rel_mi2_func = MakeInt.MI.func{2};
         ke_hybrid_ideal_sim_rel_mi2_in_guard = MakeInt.MI.in_guard{2}; |}
   ==> _) => //.

          rcondt{1} 0. auto;smt().
rcondt{2} 0. auto;smt().
     (* while(
  ={m, not_done, m0, r0, glob MI, glob DummyAdv} /\
   MakeInt.MI.func{2} = func' /\
   MakeInt.MI.in_guard{2} = in_guard' /\
   UC_KEIdeal._self{2} = MakeInt.MI.func{2} /\
   
   MSCore.MS.if_addr_opt{2} = UC_KESim.if_addr_opt{2} /\
   
   KEHybrid._self{1} = MakeInt.MI.func{1} /\
   
    main_guard MakeInt.MI.func{1} MakeInt.MI.in_guard{1} m{1} /\
    (mi_loop_invar func' in_guard' r0{1} m0{1} not_done{1}) /\
    
    ke_hybrid_ideal_sim_rel(
     {| ke_hybrid_ideal_sim_rel_st_func = func';
         ke_hybrid_ideal_sim_rel_st_hs = KEHybrid._st{1};
         ke_hybrid_ideal_sim_rel_st_is = UC_KEIdeal._st{2};
         ke_hybrid_ideal_sim_rel_st_ss = UC_KESim._st{2}; |})

 ).
     case(ke_hybrid_ideal_sim_rel0
   {|ke_hybrid_ideal_sim_rel_st_func = func';
     ke_hybrid_ideal_sim_rel_st_hs = KEHybrid._st{1};
     ke_hybrid_ideal_sim_rel_st_is = UC_KEIdeal._st{2};
     ke_hybrid_ideal_sim_rel_st_ss = UC_KESim._st{2}; |}
 ).*)
     if; last first.
     (*3. if goal, message is not for func*)
 inline{2} (1) invoke.
       sp 0 2. 
     rcondf{2} 0. move => &1. skip. move => &2 P.
     have H: MakeInt.MI.func{1} <> m{1}.`2.`1.  smt(@UCListPO). 
     have Q : 
     m{1}.`2.`2 = 0 \/ m{1}.`2.`2 \in MakeInt.MI.in_guard{1}.
     smt(@UCListPO @FSet).
     have L : m1{2}=m{1}. smt(). rewrite L. clear L.
 have L1 : m{1}.`2.`2 = 0 => m{1}.`2.`2 <> _adv_if_pi. smt(_adv_pi_begin_gt0).
 smt(@UCListPO @FSet ke_hybrid_ideal_sim_rel_implies_C).
 inline{2} (1) loop.
       sp 0 3.
       rcondt{2} 0. auto;smt().
  rcondt{2} 0.  move => &1. skip. move => &2 P.
  have H : m{1}.`2.`1 = adv. smt(@UCListPO).
  have Q: m{1}.`2.`2 <> _adv_if_pi. smt(@UCListPO @FSet _adv_pi_begin_gt0 ).
smt().

     inline{1} (1) invoke.
 inline{2} (1) invoke.
 sp 2 2. 
match. auto;smt(). auto;smt().
if. auto;smt().
     sp 2 2.
 
   seq 1 1 : (
   
    
    r0{1} =
    Some (epdp_da_to_env.`enc
      {| dte_n = m1{1}.`2.`2; dte_pt = m1{1}.`3; dte_tag = m1{1}.`4; dte_u =
          m1{1}.`5; |}) /\
    Some m0{1} = r0{1} /\
    not_done{1} = false /\
        epdp_da_from_env.`dec m{1} = None /\
    
     Some m2{2} = r2{2} /\
     r2{2} = r0{1} /\
    not_done0{2} = false /\

    ke_hybrid_ideal_sim_rel0
     {| ke_hybrid_ideal_sim_rel_func = func';
         ke_hybrid_ideal_sim_rel_in_guard = in_guard';
         ke_hybrid_ideal_sim_rel_st_hs = KEHybrid._st{1};
         ke_hybrid_ideal_sim_rel_st_hslf = KEHybrid._self{1};
         ke_hybrid_ideal_sim_rel_st_is = UC_KEIdeal._st{2};
         ke_hybrid_ideal_sim_rel_st_islf = UC_KEIdeal._self{2};
         ke_hybrid_ideal_sim_rel_st_ss = UC_KESim._st{2};
         ke_hybrid_ideal_sim_rel_sim_ao = UC_KESim.if_addr_opt{2};
         ke_hybrid_ideal_sim_rel_ms_ao = MSCore.MS.if_addr_opt{2};
         ke_hybrid_ideal_sim_rel_mi1_func = MakeInt.MI.func{1};
         ke_hybrid_ideal_sim_rel_mi1_in_guard = MakeInt.MI.in_guard{1};
         ke_hybrid_ideal_sim_rel_mi2_func = MakeInt.MI.func{2};
         ke_hybrid_ideal_sim_rel_mi2_in_guard = MakeInt.MI.in_guard{2}; |}
       
   ).
exlim r0{1} => r0L2R.
       call{1} (MakeInt.MI_after_adv_to_env KEHybrid DummyAdv r0L2R).
       call{2} (MSCore.MS_after_adv_return UC_KESim  DummyAdv r0L2R).
   auto;progress;smt(eq_of_valid_da_to_env @UCListPO).
rcondf{2} 0. auto;smt().
       sp 0 2.
    seq 0 1 : (
     
    r0{1} =
    Some (epdp_da_to_env.`enc
      {| dte_n = m1{1}.`2.`2; dte_pt = m1{1}.`3; dte_tag = m1{1}.`4; dte_u =
          m1{1}.`5; |}) /\
    Some m0{1} = r0{1} /\
    not_done{1} = false /\
        epdp_da_from_env.`dec m{1} = None /\
    
     Some m0{2} = r2{2} /\
     r0{2} = r0{1} /\
    not_done{2} = false /\
    ke_hybrid_ideal_sim_rel0
     {| ke_hybrid_ideal_sim_rel_func = func';
         ke_hybrid_ideal_sim_rel_in_guard = in_guard';
         ke_hybrid_ideal_sim_rel_st_hs = KEHybrid._st{1};
         ke_hybrid_ideal_sim_rel_st_hslf = KEHybrid._self{1};
         ke_hybrid_ideal_sim_rel_st_is = UC_KEIdeal._st{2};
         ke_hybrid_ideal_sim_rel_st_islf = UC_KEIdeal._self{2};
         ke_hybrid_ideal_sim_rel_st_ss = UC_KESim._st{2};
         ke_hybrid_ideal_sim_rel_sim_ao = UC_KESim.if_addr_opt{2};
         ke_hybrid_ideal_sim_rel_ms_ao = MSCore.MS.if_addr_opt{2};
         ke_hybrid_ideal_sim_rel_mi1_func = MakeInt.MI.func{1};
         ke_hybrid_ideal_sim_rel_mi1_in_guard = MakeInt.MI.in_guard{1};
         ke_hybrid_ideal_sim_rel_mi2_func = MakeInt.MI.func{2};
         ke_hybrid_ideal_sim_rel_mi2_in_guard = MakeInt.MI.in_guard{2}; |}
   ).
exlim r0{1} => r0R.
       call{2} (MakeInt.MI_after_adv_to_env UC_KEIdeal (MSCore.MS(UC_KESim, DummyAdv)) r0R).
       auto;progress;smt(@UCListPO ke_hybrid_ideal_sim_rel_implies_C).
rcondf{1} 0. auto;smt().
       rcondf{2} 0. auto;smt().
       auto;smt(KEHybridIdealSimRel0).

sp 1 1.
       seq 1 1 : (
     
    r0{1} = None /\
    not_done{1} = false /\
    
     
     r2{2} = None /\
     not_done0{2} = false /\

  
    ke_hybrid_ideal_sim_rel0
     {| ke_hybrid_ideal_sim_rel_func = func';
         ke_hybrid_ideal_sim_rel_in_guard = in_guard';
         ke_hybrid_ideal_sim_rel_st_hs = KEHybrid._st{1};
         ke_hybrid_ideal_sim_rel_st_hslf = KEHybrid._self{1};
         ke_hybrid_ideal_sim_rel_st_is = UC_KEIdeal._st{2};
         ke_hybrid_ideal_sim_rel_st_islf = UC_KEIdeal._self{2};
         ke_hybrid_ideal_sim_rel_st_ss = UC_KESim._st{2};
         ke_hybrid_ideal_sim_rel_sim_ao = UC_KESim.if_addr_opt{2};
         ke_hybrid_ideal_sim_rel_ms_ao = MSCore.MS.if_addr_opt{2};
         ke_hybrid_ideal_sim_rel_mi1_func = MakeInt.MI.func{1};
         ke_hybrid_ideal_sim_rel_mi1_in_guard = MakeInt.MI.in_guard{1};
         ke_hybrid_ideal_sim_rel_mi2_func = MakeInt.MI.func{2};
         ke_hybrid_ideal_sim_rel_mi2_in_guard = MakeInt.MI.in_guard{2}; |}
       
   ).
call{1} (MakeInt.MI_after_adv_error KEHybrid DummyAdv).
call{2} (MSCore.MS_after_adv_error UC_KESim  DummyAdv).
auto;progress;smt(@UCListPO).         
       rcondf{1} 0. auto;smt().
       rcondf{2} 0. auto;smt().
   sp 0 2.
       seq 0 1 : (
     
     r0{1} = None /\
    not_done{1} = false /\
    
     
     r0{2} = None /\
     not_done{2} = false /\

    ke_hybrid_ideal_sim_rel0
     {| ke_hybrid_ideal_sim_rel_func = func';
         ke_hybrid_ideal_sim_rel_in_guard = in_guard';
         ke_hybrid_ideal_sim_rel_st_hs = KEHybrid._st{1};
         ke_hybrid_ideal_sim_rel_st_hslf = KEHybrid._self{1};
         ke_hybrid_ideal_sim_rel_st_is = UC_KEIdeal._st{2};
         ke_hybrid_ideal_sim_rel_st_islf = UC_KEIdeal._self{2};
         ke_hybrid_ideal_sim_rel_st_ss = UC_KESim._st{2};
         ke_hybrid_ideal_sim_rel_sim_ao = UC_KESim.if_addr_opt{2};
         ke_hybrid_ideal_sim_rel_ms_ao = MSCore.MS.if_addr_opt{2};
         ke_hybrid_ideal_sim_rel_mi1_func = MakeInt.MI.func{1};
         ke_hybrid_ideal_sim_rel_mi1_in_guard = MakeInt.MI.in_guard{1};
         ke_hybrid_ideal_sim_rel_mi2_func = MakeInt.MI.func{2};
         ke_hybrid_ideal_sim_rel_mi2_in_guard = MakeInt.MI.in_guard{2}; |}
     
      ).
          call{2} (MakeInt.MI_after_adv_error UC_KEIdeal (MSCore.MS(UC_KESim, DummyAdv))).
          auto;progress;smt(@UCListPO).
          rcondf{2} 0. auto;smt().
          auto;smt(KEHybridIdealSimRel0).
      move => x x0.
          if. auto;smt(valid_epdp_da_from_env).
          sp 2 2;
          elim* => r2_R r3_R r0_L r1_L.
  
      case(func' <= x.`dfe_pt.`1).
          seq 1 1 :
      (
        func' <= x.`dfe_pt.`1 /\
        0 < x.`dfe_n /\ x.`dfe_pt <> env_root_port /\ ! adv <= x.`dfe_pt.`1 /\
        
        r0{1} = Some
          (UCBasicTypes.Adv, x.`dfe_pt, (adv, x.`dfe_n), x.`dfe_tag, x.`dfe_u) /\
          Some m0{1} = r0{1} /\
          not_done{1} = true /\
     
          r2{2} = r0{1} /\
          Some m2{2} = r2{2} /\
          not_done0{2} = false

          /\
    ke_hybrid_ideal_sim_rel0
     {| ke_hybrid_ideal_sim_rel_func = func';
         ke_hybrid_ideal_sim_rel_in_guard = in_guard';
         ke_hybrid_ideal_sim_rel_st_hs = KEHybrid._st{1};
         ke_hybrid_ideal_sim_rel_st_hslf = KEHybrid._self{1};
         ke_hybrid_ideal_sim_rel_st_is = UC_KEIdeal._st{2};
         ke_hybrid_ideal_sim_rel_st_islf = UC_KEIdeal._self{2};
         ke_hybrid_ideal_sim_rel_st_ss = UC_KESim._st{2};
         ke_hybrid_ideal_sim_rel_sim_ao = UC_KESim.if_addr_opt{2};
         ke_hybrid_ideal_sim_rel_ms_ao = MSCore.MS.if_addr_opt{2};
         ke_hybrid_ideal_sim_rel_mi1_func = MakeInt.MI.func{1};
         ke_hybrid_ideal_sim_rel_mi1_in_guard = MakeInt.MI.in_guard{1};
         ke_hybrid_ideal_sim_rel_mi2_func = MakeInt.MI.func{2};
         ke_hybrid_ideal_sim_rel_mi2_in_guard = MakeInt.MI.in_guard{2}; |}
      ).
      exlim r0{1} => r0L2R.
          call{1} (MakeInt.MI_after_adv_to_func KEHybrid DummyAdv  r0L2R).
      
          call{2} (MSCore.MS_after_adv_return UC_KESim  DummyAdv r0L2R).
skip. move => &1 &2 P.
          progress;smt().
      rcondf{2} 0. auto;smt().
sp 0 2.
          seq 0 1 : (
         func' <= x.`dfe_pt.`1 /\
          0 < x.`dfe_n /\ x.`dfe_pt <> env_root_port /\ ! adv <= x.`dfe_pt.`1 /\
        
        r0{1} = Some
          (UCBasicTypes.Adv, x.`dfe_pt, (adv, x.`dfe_n), x.`dfe_tag, x.`dfe_u) /\
          Some m0{1} = r0{1} /\
          not_done{1} = true /\
     
          r0{2} = r0{1} /\
          Some m0{2} = r0{2} /\
          not_done{2} = true /\
          
         
    ke_hybrid_ideal_sim_rel0
     {| ke_hybrid_ideal_sim_rel_func = func';
         ke_hybrid_ideal_sim_rel_in_guard = in_guard';
         ke_hybrid_ideal_sim_rel_st_hs = KEHybrid._st{1};
         ke_hybrid_ideal_sim_rel_st_hslf = KEHybrid._self{1};
         ke_hybrid_ideal_sim_rel_st_is = UC_KEIdeal._st{2};
         ke_hybrid_ideal_sim_rel_st_islf = UC_KEIdeal._self{2};
         ke_hybrid_ideal_sim_rel_st_ss = UC_KESim._st{2};
         ke_hybrid_ideal_sim_rel_sim_ao = UC_KESim.if_addr_opt{2};
         ke_hybrid_ideal_sim_rel_ms_ao = MSCore.MS.if_addr_opt{2};
         ke_hybrid_ideal_sim_rel_mi1_func = MakeInt.MI.func{1};
         ke_hybrid_ideal_sim_rel_mi1_in_guard = MakeInt.MI.in_guard{1};
         ke_hybrid_ideal_sim_rel_mi2_func = MakeInt.MI.func{2};
         ke_hybrid_ideal_sim_rel_mi2_in_guard = MakeInt.MI.in_guard{2}; |}
      ).
      exlim r0{2} => r0R.
call{2} (MakeInt.MI_after_adv_to_func UC_KEIdeal (MSCore.MS(UC_KESim, DummyAdv)) r0R).
          skip. move => &1 &2 P. progress; smt().
      
          rcondt{1} 0. auto;smt().
          rcondt{1} 0. auto;smt().
      rcondt{2} 0. auto;smt().
          rcondt{2} 0. auto;smt(). 

      
          inline{1} (1) invoke.
      inline{2} (1) invoke.
          sp 2 2.
          match KEHybridStateWaitReq1 {1} 0. auto;smt().
          rcondf{1} 0. auto;smt().
          sp 1 0.
 seq 1 0 : (
         func' <= x.`dfe_pt.`1 /\
          0 < x.`dfe_n /\ x.`dfe_pt <> env_root_port /\ ! adv <= x.`dfe_pt.`1 /\
        
        r0{1} = None /\
          not_done{1} = false /\
     
          r0{2} = Some
          (UCBasicTypes.Adv, x.`dfe_pt, (adv, x.`dfe_n), x.`dfe_tag, x.`dfe_u) /\
          Some m0{2} = r0{2} /\
          not_done{2} = true /\
          m4{2} = m0{2} /\
          r4{2} = None /\
    ke_hybrid_ideal_sim_rel0
     {| ke_hybrid_ideal_sim_rel_func = func';
         ke_hybrid_ideal_sim_rel_in_guard = in_guard';
         ke_hybrid_ideal_sim_rel_st_hs = KEHybrid._st{1};
         ke_hybrid_ideal_sim_rel_st_hslf = KEHybrid._self{1};
         ke_hybrid_ideal_sim_rel_st_is = UC_KEIdeal._st{2};
         ke_hybrid_ideal_sim_rel_st_islf = UC_KEIdeal._self{2};
         ke_hybrid_ideal_sim_rel_st_ss = UC_KESim._st{2};
         ke_hybrid_ideal_sim_rel_sim_ao = UC_KESim.if_addr_opt{2};
         ke_hybrid_ideal_sim_rel_ms_ao = MSCore.MS.if_addr_opt{2};
         ke_hybrid_ideal_sim_rel_mi1_func = MakeInt.MI.func{1};
         ke_hybrid_ideal_sim_rel_mi1_in_guard = MakeInt.MI.in_guard{1};
         ke_hybrid_ideal_sim_rel_mi2_func = MakeInt.MI.func{2};
         ke_hybrid_ideal_sim_rel_mi2_in_guard = MakeInt.MI.in_guard{2}; |}
      ).
      call{1} (MakeInt.MI_after_func_error KEHybrid DummyAdv). auto;smt().
          rcondf{1} 0. auto;smt().
      
          if{2}. inline{2} (1) parties.
      sp 0 2.
match _State_IF_WaitReq1 {2} 0. auto;smt().
match None {2} 0. auto;smt(UC_KEDir.Pt1.eq_of_valid__ke_req1).
          sp 0 2.
seq 0 1 : (
        
        r0{1} = None /\
     
          r0{2} = None /\
        not_done{2} = false /\
        
    ke_hybrid_ideal_sim_rel0
     {| ke_hybrid_ideal_sim_rel_func = func';
         ke_hybrid_ideal_sim_rel_in_guard = in_guard';
         ke_hybrid_ideal_sim_rel_st_hs = KEHybrid._st{1};
         ke_hybrid_ideal_sim_rel_st_hslf = KEHybrid._self{1};
         ke_hybrid_ideal_sim_rel_st_is = UC_KEIdeal._st{2};
         ke_hybrid_ideal_sim_rel_st_islf = UC_KEIdeal._self{2};
         ke_hybrid_ideal_sim_rel_st_ss = UC_KESim._st{2};
         ke_hybrid_ideal_sim_rel_sim_ao = UC_KESim.if_addr_opt{2};
         ke_hybrid_ideal_sim_rel_ms_ao = MSCore.MS.if_addr_opt{2};
         ke_hybrid_ideal_sim_rel_mi1_func = MakeInt.MI.func{1};
         ke_hybrid_ideal_sim_rel_mi1_in_guard = MakeInt.MI.in_guard{1};
         ke_hybrid_ideal_sim_rel_mi2_func = MakeInt.MI.func{2};
         ke_hybrid_ideal_sim_rel_mi2_in_guard = MakeInt.MI.in_guard{2}; |}
      ).
          call{2} (MakeInt.MI_after_func_error UC_KEIdeal (MSCore.MS(UC_KESim, DummyAdv))). auto;progress;smt().
          rcondf{2} 0. auto;smt().
          auto;smt(KEHybridIdealSimRel0).
      sp 0 1.
seq 0 1 : (
        
        r0{1} = None /\
     
          r0{2} = None /\
        not_done{2} = false /\
        
    ke_hybrid_ideal_sim_rel0
     {| ke_hybrid_ideal_sim_rel_func = func';
         ke_hybrid_ideal_sim_rel_in_guard = in_guard';
         ke_hybrid_ideal_sim_rel_st_hs = KEHybrid._st{1};
         ke_hybrid_ideal_sim_rel_st_hslf = KEHybrid._self{1};
         ke_hybrid_ideal_sim_rel_st_is = UC_KEIdeal._st{2};
         ke_hybrid_ideal_sim_rel_st_islf = UC_KEIdeal._self{2};
         ke_hybrid_ideal_sim_rel_st_ss = UC_KESim._st{2};
         ke_hybrid_ideal_sim_rel_sim_ao = UC_KESim.if_addr_opt{2};
         ke_hybrid_ideal_sim_rel_ms_ao = MSCore.MS.if_addr_opt{2};
         ke_hybrid_ideal_sim_rel_mi1_func = MakeInt.MI.func{1};
         ke_hybrid_ideal_sim_rel_mi1_in_guard = MakeInt.MI.in_guard{1};
         ke_hybrid_ideal_sim_rel_mi2_func = MakeInt.MI.func{2};
         ke_hybrid_ideal_sim_rel_mi2_in_guard = MakeInt.MI.in_guard{2}; |}
      ).
          call{2} (MakeInt.MI_after_func_error UC_KEIdeal (MSCore.MS(UC_KESim, DummyAdv))). auto;progress;smt().
          rcondf{2} 0. auto;smt().
      auto;smt(KEHybridIdealSimRel0).

          seq 1 1 :
      (
        ! func' <= x.`dfe_pt.`1 /\
        0 < x.`dfe_n /\ x.`dfe_pt <> env_root_port /\ ! adv <= x.`dfe_pt.`1 /\
        
        r0{1} = Some
          (UCBasicTypes.Adv, x.`dfe_pt, (adv, x.`dfe_n), x.`dfe_tag, x.`dfe_u) /\
          Some m0{1} = r0{1} /\
          not_done{1} = false /\
     
          r2{2} = r0{1} /\
          Some m2{2} = r2{2} /\
          not_done0{2} = false /\
          
    ke_hybrid_ideal_sim_rel0
     {| ke_hybrid_ideal_sim_rel_func = func';
         ke_hybrid_ideal_sim_rel_in_guard = in_guard';
         ke_hybrid_ideal_sim_rel_st_hs = KEHybrid._st{1};
         ke_hybrid_ideal_sim_rel_st_hslf = KEHybrid._self{1};
         ke_hybrid_ideal_sim_rel_st_is = UC_KEIdeal._st{2};
         ke_hybrid_ideal_sim_rel_st_islf = UC_KEIdeal._self{2};
         ke_hybrid_ideal_sim_rel_st_ss = UC_KESim._st{2};
         ke_hybrid_ideal_sim_rel_sim_ao = UC_KESim.if_addr_opt{2};
         ke_hybrid_ideal_sim_rel_ms_ao = MSCore.MS.if_addr_opt{2};
         ke_hybrid_ideal_sim_rel_mi1_func = MakeInt.MI.func{1};
         ke_hybrid_ideal_sim_rel_mi1_in_guard = MakeInt.MI.in_guard{1};
         ke_hybrid_ideal_sim_rel_mi2_func = MakeInt.MI.func{2};
         ke_hybrid_ideal_sim_rel_mi2_in_guard = MakeInt.MI.in_guard{2}; |}
      ).
      exlim r0{1} => r0L2R.
          call{1} (MakeInt.MI_after_adv_to_env KEHybrid DummyAdv  r0L2R).
      
          call{2} (MSCore.MS_after_adv_return UC_KESim  DummyAdv r0L2R).
          skip. move => &1 &2 P.
          progress;smt().
          rcondf{1} 0. auto;smt().
      rcondf{2} 0. auto;smt().
          sp 0 2.
      seq 0 1 :
      (
        ! func' <= x.`dfe_pt.`1 /\
        0 < x.`dfe_n /\ x.`dfe_pt <> env_root_port /\ ! adv <= x.`dfe_pt.`1 /\
        
        r0{1} = Some
          (UCBasicTypes.Adv, x.`dfe_pt, (adv, x.`dfe_n), x.`dfe_tag, x.`dfe_u) /\
         
     
          r0{2} = r0{1} /\
          Some m2{2} = r2{2} /\
          not_done{2} = false

          /\
    ke_hybrid_ideal_sim_rel0
     {| ke_hybrid_ideal_sim_rel_func = func';
         ke_hybrid_ideal_sim_rel_in_guard = in_guard';
         ke_hybrid_ideal_sim_rel_st_hs = KEHybrid._st{1};
         ke_hybrid_ideal_sim_rel_st_hslf = KEHybrid._self{1};
         ke_hybrid_ideal_sim_rel_st_is = UC_KEIdeal._st{2};
         ke_hybrid_ideal_sim_rel_st_islf = UC_KEIdeal._self{2};
         ke_hybrid_ideal_sim_rel_st_ss = UC_KESim._st{2};
         ke_hybrid_ideal_sim_rel_sim_ao = UC_KESim.if_addr_opt{2};
         ke_hybrid_ideal_sim_rel_ms_ao = MSCore.MS.if_addr_opt{2};
         ke_hybrid_ideal_sim_rel_mi1_func = MakeInt.MI.func{1};
         ke_hybrid_ideal_sim_rel_mi1_in_guard = MakeInt.MI.in_guard{1};
         ke_hybrid_ideal_sim_rel_mi2_func = MakeInt.MI.func{2};
         ke_hybrid_ideal_sim_rel_mi2_in_guard = MakeInt.MI.in_guard{2}; |}
      ).
       exlim r0{2} => r0R.
          call{2} (MakeInt.MI_after_adv_to_env UC_KEIdeal (MSCore.MS(UC_KESim, DummyAdv)) r0R). auto;progress;smt().
          rcondf{2} 0. auto;smt().
          auto;smt(KEHybridIdealSimRel0).
          sp 1 1.
seq 1 1 :
      (
       
        
        r0{1} = None /\
          not_done{1} = false /\
     
          r2{2} = None /\
          
        not_done0{2} = false /\
        
    ke_hybrid_ideal_sim_rel0
     {| ke_hybrid_ideal_sim_rel_func = func';
         ke_hybrid_ideal_sim_rel_in_guard = in_guard';
         ke_hybrid_ideal_sim_rel_st_hs = KEHybrid._st{1};
         ke_hybrid_ideal_sim_rel_st_hslf = KEHybrid._self{1};
         ke_hybrid_ideal_sim_rel_st_is = UC_KEIdeal._st{2};
         ke_hybrid_ideal_sim_rel_st_islf = UC_KEIdeal._self{2};
         ke_hybrid_ideal_sim_rel_st_ss = UC_KESim._st{2};
         ke_hybrid_ideal_sim_rel_sim_ao = UC_KESim.if_addr_opt{2};
         ke_hybrid_ideal_sim_rel_ms_ao = MSCore.MS.if_addr_opt{2};
         ke_hybrid_ideal_sim_rel_mi1_func = MakeInt.MI.func{1};
         ke_hybrid_ideal_sim_rel_mi1_in_guard = MakeInt.MI.in_guard{1};
         ke_hybrid_ideal_sim_rel_mi2_func = MakeInt.MI.func{2};
         ke_hybrid_ideal_sim_rel_mi2_in_guard = MakeInt.MI.in_guard{2}; |}
      ).
          call{1} (MakeInt.MI_after_adv_error KEHybrid DummyAdv).
      
          call{2} (MSCore.MS_after_adv_error UC_KESim  DummyAdv).
          skip. move => &1 &2 P.
          progress;smt().
          rcondf{1} 0. auto;smt().
          rcondf{2} 0. auto;smt().
sp 0 2.
seq 0 1 :
      (
       
        
        r0{1} = None /\
          
     
          r0{2} = None /\
          
        not_done{2} = false /\
        
    ke_hybrid_ideal_sim_rel0
     {| ke_hybrid_ideal_sim_rel_func = func';
         ke_hybrid_ideal_sim_rel_in_guard = in_guard';
         ke_hybrid_ideal_sim_rel_st_hs = KEHybrid._st{1};
         ke_hybrid_ideal_sim_rel_st_hslf = KEHybrid._self{1};
         ke_hybrid_ideal_sim_rel_st_is = UC_KEIdeal._st{2};
         ke_hybrid_ideal_sim_rel_st_islf = UC_KEIdeal._self{2};
         ke_hybrid_ideal_sim_rel_st_ss = UC_KESim._st{2};
         ke_hybrid_ideal_sim_rel_sim_ao = UC_KESim.if_addr_opt{2};
         ke_hybrid_ideal_sim_rel_ms_ao = MSCore.MS.if_addr_opt{2};
         ke_hybrid_ideal_sim_rel_mi1_func = MakeInt.MI.func{1};
         ke_hybrid_ideal_sim_rel_mi1_in_guard = MakeInt.MI.in_guard{1};
         ke_hybrid_ideal_sim_rel_mi2_func = MakeInt.MI.func{2};
         ke_hybrid_ideal_sim_rel_mi2_in_guard = MakeInt.MI.in_guard{2}; |}
          
          
      ).
          call{2} (MakeInt.MI_after_adv_error UC_KEIdeal (MSCore.MS(UC_KESim, DummyAdv))).
          auto;progress;smt().
          rcondf{2} 0. auto;smt().
      auto;smt(KEHybridIdealSimRel0).
      
      
       (*1. if goal, condition is the same on both sides*)
     auto;smt().
 (*2. if goal, message is for func*)
     inline{1} (1) invoke.
sp 2 0.
     match KEHybridStateWaitReq1 {1} 0. auto;smt().
if{1}; first last.
sp 1 0.
seq 1 0 : (
 
     ={m} /\
     r0{1} = None /\
     m0{2} = m{2} /\
       r0{2} = None /\
       not_done{2} = true /\
       
       
       not_done{1} = false /\
      
     MakeInt.MI.func{1} <= m{1}.`2.`1 /\
    ! (m{1}.`1 = Dir /\
       envport KEHybrid._self{1} m{1}.`3 /\
       m{1}.`2 = _extport_Pt1 KEHybrid._self{1})
     /\
    ke_hybrid_ideal_sim_rel0
     {| ke_hybrid_ideal_sim_rel_func = func';
         ke_hybrid_ideal_sim_rel_in_guard = in_guard';
         ke_hybrid_ideal_sim_rel_st_hs = KEHybrid._st{1};
         ke_hybrid_ideal_sim_rel_st_hslf = KEHybrid._self{1};
         ke_hybrid_ideal_sim_rel_st_is = UC_KEIdeal._st{2};
         ke_hybrid_ideal_sim_rel_st_islf = UC_KEIdeal._self{2};
         ke_hybrid_ideal_sim_rel_st_ss = UC_KESim._st{2};
         ke_hybrid_ideal_sim_rel_sim_ao = UC_KESim.if_addr_opt{2};
         ke_hybrid_ideal_sim_rel_ms_ao = MSCore.MS.if_addr_opt{2};
         ke_hybrid_ideal_sim_rel_mi1_func = MakeInt.MI.func{1};
         ke_hybrid_ideal_sim_rel_mi1_in_guard = MakeInt.MI.in_guard{1};
         ke_hybrid_ideal_sim_rel_mi2_func = MakeInt.MI.func{2};
         ke_hybrid_ideal_sim_rel_mi2_in_guard = MakeInt.MI.in_guard{2}; |}
    ).
call{1} (MakeInt.MI_after_func_error KEHybrid DummyAdv).
        skip. move => &1 &2 P.
progress;smt().
rcondf{1} 0. auto;smt().

inline{2} (1) invoke.
sp 0 2. 
if{2}.
        inline parties.
        sp 0 2.
        match _State_IF_WaitReq1 {2} 0. auto;smt().
        match None {2} 0.
    move => &m0. skip. move => &hr P.
    
        auto;smt( UC_KEDir.Pt1.valid_epdp__ke_req1 UC_KEDir.Pt1.eq_of_valid__ke_req1).
sp 0 2.

        seq 0 1 : (not_done{2} = false /\
      ={r0}
      /\
    ke_hybrid_ideal_sim_rel0
     {| ke_hybrid_ideal_sim_rel_func = func';
         ke_hybrid_ideal_sim_rel_in_guard = in_guard';
         ke_hybrid_ideal_sim_rel_st_hs = KEHybrid._st{1};
         ke_hybrid_ideal_sim_rel_st_hslf = KEHybrid._self{1};
         ke_hybrid_ideal_sim_rel_st_is = UC_KEIdeal._st{2};
         ke_hybrid_ideal_sim_rel_st_islf = UC_KEIdeal._self{2};
         ke_hybrid_ideal_sim_rel_st_ss = UC_KESim._st{2};
         ke_hybrid_ideal_sim_rel_sim_ao = UC_KESim.if_addr_opt{2};
         ke_hybrid_ideal_sim_rel_ms_ao = MSCore.MS.if_addr_opt{2};
         ke_hybrid_ideal_sim_rel_mi1_func = MakeInt.MI.func{1};
         ke_hybrid_ideal_sim_rel_mi1_in_guard = MakeInt.MI.in_guard{1};
         ke_hybrid_ideal_sim_rel_mi2_func = MakeInt.MI.func{2};
         ke_hybrid_ideal_sim_rel_mi2_in_guard = MakeInt.MI.in_guard{2}; |}
  ).
call{2} (MakeInt.MI_after_func_error UC_KEIdeal (MSCore.MS(UC_KESim, DummyAdv))).
skip. move => &1 &2 P.
      progress;smt().
      rcondf{2} 0. auto;smt().
      auto; smt(KEHybridIdealSimRel0).

      sp 0 1.
  seq 0 1 : (not_done{2} = false /\
    ={r0}
    /\
    ke_hybrid_ideal_sim_rel0
     {| ke_hybrid_ideal_sim_rel_func = func';
         ke_hybrid_ideal_sim_rel_in_guard = in_guard';
         ke_hybrid_ideal_sim_rel_st_hs = KEHybrid._st{1};
         ke_hybrid_ideal_sim_rel_st_hslf = KEHybrid._self{1};
         ke_hybrid_ideal_sim_rel_st_is = UC_KEIdeal._st{2};
         ke_hybrid_ideal_sim_rel_st_islf = UC_KEIdeal._self{2};
         ke_hybrid_ideal_sim_rel_st_ss = UC_KESim._st{2};
         ke_hybrid_ideal_sim_rel_sim_ao = UC_KESim.if_addr_opt{2};
         ke_hybrid_ideal_sim_rel_ms_ao = MSCore.MS.if_addr_opt{2};
         ke_hybrid_ideal_sim_rel_mi1_func = MakeInt.MI.func{1};
         ke_hybrid_ideal_sim_rel_mi1_in_guard = MakeInt.MI.in_guard{1};
         ke_hybrid_ideal_sim_rel_mi2_func = MakeInt.MI.func{2};
         ke_hybrid_ideal_sim_rel_mi2_in_guard = MakeInt.MI.in_guard{2}; |}
  ).
call{2} (MakeInt.MI_after_func_error UC_KEIdeal (MSCore.MS(UC_KESim, DummyAdv))).
skip. move => &1 &2 P.
      progress;smt().
      rcondf{2} 0. auto;smt().
  auto; smt(KEHybridIdealSimRel0).
match{1}.
      (*msg does not decode, match resulted in None*)
sp 1 0.
seq 1 0 : (
 
     UC_KEDir.Pt1.epdp__ke_req1.`dec m{1} = None /\
     r0{1} = None /\
     m0{2} = m{2} /\
       r0{2} = None /\
       not_done{2} = true /\
       
       m0{2} = m{2} /\
       not_done{1} = false /\
       ={m} /\
               
     MakeInt.MI.func{1} <= m{1}.`2.`1 /\
     (m{1}.`1 = Dir /\
       envport KEHybrid._self{1} m{1}.`3 /\
       m{1}.`2 = _extport_Pt1 KEHybrid._self{1})
    /\
    ke_hybrid_ideal_sim_rel0
     {| ke_hybrid_ideal_sim_rel_func = func';
         ke_hybrid_ideal_sim_rel_in_guard = in_guard';
         ke_hybrid_ideal_sim_rel_st_hs = KEHybrid._st{1};
         ke_hybrid_ideal_sim_rel_st_hslf = KEHybrid._self{1};
         ke_hybrid_ideal_sim_rel_st_is = UC_KEIdeal._st{2};
         ke_hybrid_ideal_sim_rel_st_islf = UC_KEIdeal._self{2};
         ke_hybrid_ideal_sim_rel_st_ss = UC_KESim._st{2};
         ke_hybrid_ideal_sim_rel_sim_ao = UC_KESim.if_addr_opt{2};
         ke_hybrid_ideal_sim_rel_ms_ao = MSCore.MS.if_addr_opt{2};
         ke_hybrid_ideal_sim_rel_mi1_func = MakeInt.MI.func{1};
         ke_hybrid_ideal_sim_rel_mi1_in_guard = MakeInt.MI.in_guard{1};
         ke_hybrid_ideal_sim_rel_mi2_func = MakeInt.MI.func{2};
         ke_hybrid_ideal_sim_rel_mi2_in_guard = MakeInt.MI.in_guard{2}; |}
    ).
call{1} (MakeInt.MI_after_func_error KEHybrid DummyAdv).
        skip. move => &1 &2 P.
progress;smt().
        rcondf{1} 0. auto;smt().
inline{2} (1) invoke.
sp 0 2. 
        rcondt{2} 0. 
    move => &m0. skip. move => &hr P.
        have H : (_extport_Pt1 KEHybrid._self{m0}).`1 = KEHybrid._self{m0}. smt().
        have Q : UC_KEIdeal._self{hr} = KEHybrid._self{m0}. smt().
        smt().
inline parties.
        sp 0 2.
        match _State_IF_WaitReq1 {2} 0. auto;smt().
    match None {2} 0. auto;smt(UC_KEDir.Pt1.valid_epdp__ke_req1 UC_KEDir.Pt1.eq_of_valid__ke_req1).
sp 0 2.

        seq 0 1 : (not_done{2} = false /\
      ={r0}
    /\
    ke_hybrid_ideal_sim_rel0
     {| ke_hybrid_ideal_sim_rel_func = func';
         ke_hybrid_ideal_sim_rel_in_guard = in_guard';
         ke_hybrid_ideal_sim_rel_st_hs = KEHybrid._st{1};
         ke_hybrid_ideal_sim_rel_st_hslf = KEHybrid._self{1};
         ke_hybrid_ideal_sim_rel_st_is = UC_KEIdeal._st{2};
         ke_hybrid_ideal_sim_rel_st_islf = UC_KEIdeal._self{2};
         ke_hybrid_ideal_sim_rel_st_ss = UC_KESim._st{2};
         ke_hybrid_ideal_sim_rel_sim_ao = UC_KESim.if_addr_opt{2};
         ke_hybrid_ideal_sim_rel_ms_ao = MSCore.MS.if_addr_opt{2};
         ke_hybrid_ideal_sim_rel_mi1_func = MakeInt.MI.func{1};
         ke_hybrid_ideal_sim_rel_mi1_in_guard = MakeInt.MI.in_guard{1};
         ke_hybrid_ideal_sim_rel_mi2_func = MakeInt.MI.func{2};
         ke_hybrid_ideal_sim_rel_mi2_in_guard = MakeInt.MI.in_guard{2}; |}).
call{2} (MakeInt.MI_after_func_error UC_KEIdeal (MSCore.MS(UC_KESim, DummyAdv))).
skip. move => &1 &2 P.
      progress;smt().
      rcondf{2} 0. auto;smt().
      auto; smt(KEHybridIdealSimRel0).

      (*case when message decodes, match resulted in Some _*)
  inline _State_KEHybridStateWaitReq1__KEDir__Pt1__ke_req1.
sp 5 0.    
      if{1} ;last first.
      (*case when pt1 not an envport*)
      sp 3 0.
seq 1 0 : (
 
      UC_KEDir.Pt1.epdp__ke_req1.`dec m{1} = Some _x{1} /\
    pt1{1} = _x{1}.`UC_KEDir.Pt1.ke_req1__pt1 /\
    pt2{1} = _x{1}.`UC_KEDir.Pt1.ke_req1__pt2 /\
    _pt1{1} = _intport_Pt1 KEHybrid._self{1} /\
    _pt2{1} = _intport_Pt2 KEHybrid._self{1} /\
    
     r0{1} = None /\
     m0{2} = m{2} /\
       r0{2} = None /\
       not_done{2} = true /\
       
       m0{2} = m{2} /\
       not_done{1} = false /\
       ={m} /\
        
     MakeInt.MI.func{1} <= m{1}.`2.`1 /\
     (m{1}.`1 = Dir /\
       envport KEHybrid._self{1} m{1}.`3 /\
          m{1}.`2 = _extport_Pt1 KEHybrid._self{1}) /\
       ! envport KEHybrid._self{1} pt2{1}

     /\
    ke_hybrid_ideal_sim_rel0
     {| ke_hybrid_ideal_sim_rel_func = func';
         ke_hybrid_ideal_sim_rel_in_guard = in_guard';
         ke_hybrid_ideal_sim_rel_st_hs = KEHybrid._st{1};
         ke_hybrid_ideal_sim_rel_st_hslf = KEHybrid._self{1};
         ke_hybrid_ideal_sim_rel_st_is = UC_KEIdeal._st{2};
         ke_hybrid_ideal_sim_rel_st_islf = UC_KEIdeal._self{2};
         ke_hybrid_ideal_sim_rel_st_ss = UC_KESim._st{2};
         ke_hybrid_ideal_sim_rel_sim_ao = UC_KESim.if_addr_opt{2};
         ke_hybrid_ideal_sim_rel_ms_ao = MSCore.MS.if_addr_opt{2};
         ke_hybrid_ideal_sim_rel_mi1_func = MakeInt.MI.func{1};
         ke_hybrid_ideal_sim_rel_mi1_in_guard = MakeInt.MI.in_guard{1};
         ke_hybrid_ideal_sim_rel_mi2_func = MakeInt.MI.func{2};
         ke_hybrid_ideal_sim_rel_mi2_in_guard = MakeInt.MI.in_guard{2}; |}
    ).
call{1} (MakeInt.MI_after_func_error KEHybrid DummyAdv).
        skip. move => &1 &2 P.
progress;smt().
        rcondf{1} 0. auto;smt().
inline{2} (1) invoke.
sp 0 2. 
        rcondt{2} 0. 
    move => &m0. skip. move => &hr P.
        have H : (_extport_Pt1 KEHybrid._self{m0}).`1 = KEHybrid._self{m0}. smt().
        have Q : UC_KEIdeal._self{hr} = KEHybrid._self{m0}. smt().
        smt().
inline parties.
        sp 0 2.
        match _State_IF_WaitReq1 {2} 0. auto;smt().
        match Some {2} 0. auto;smt(UC_KEDir.Pt1.valid_epdp__ke_req1 UC_KEDir.Pt1.eq_of_valid__ke_req1).
inline _State_IF_WaitReq1__KEDir__Pt1__ke_req1.
sp 0 3.
rcondf{2} 0.  auto;smt().  
sp 0 4.

        seq 0 1 : (not_done{2} = false /\
      ={r0}
/\
    ke_hybrid_ideal_sim_rel0
     {| ke_hybrid_ideal_sim_rel_func = func';
         ke_hybrid_ideal_sim_rel_in_guard = in_guard';
         ke_hybrid_ideal_sim_rel_st_hs = KEHybrid._st{1};
         ke_hybrid_ideal_sim_rel_st_hslf = KEHybrid._self{1};
         ke_hybrid_ideal_sim_rel_st_is = UC_KEIdeal._st{2};
         ke_hybrid_ideal_sim_rel_st_islf = UC_KEIdeal._self{2};
         ke_hybrid_ideal_sim_rel_st_ss = UC_KESim._st{2};
         ke_hybrid_ideal_sim_rel_sim_ao = UC_KESim.if_addr_opt{2};
         ke_hybrid_ideal_sim_rel_ms_ao = MSCore.MS.if_addr_opt{2};
         ke_hybrid_ideal_sim_rel_mi1_func = MakeInt.MI.func{1};
         ke_hybrid_ideal_sim_rel_mi1_in_guard = MakeInt.MI.in_guard{1};
         ke_hybrid_ideal_sim_rel_mi2_func = MakeInt.MI.func{2};
         ke_hybrid_ideal_sim_rel_mi2_in_guard = MakeInt.MI.in_guard{2}; |}
    ).
call{2} (MakeInt.MI_after_func_error UC_KEIdeal (MSCore.MS(UC_KESim, DummyAdv))).
skip. move => &1 &2 P.
      progress;smt().
      rcondf{2} 0. auto;smt().
      auto; smt(KEHybridIdealSimRel0).
      inline{2} (1) invoke.
sp 0 2.
      rcondt{2} 0. move=> &m0. skip. move=> &hr P.
      have H : KEHybrid._self{m0} = UC_KEIdeal._self{hr}. smt().
  smt().
inline{2} (1) parties.  
      sp 0 2.
      match _State_IF_WaitReq1 {2} 0. auto;smt().
      match Some {2} 0. auto;smt(UC_KEDir.Pt1.valid_epdp__ke_req1 UC_KEDir.Pt1.eq_of_valid__ke_req1).
      inline _State_IF_WaitReq1__KEDir__Pt1__ke_req1.
      sp 0 3.
      rcondt{2} 0. auto;smt().
  sp 0 5 => //=.
  
      seq 0 1 : (
    
 r0{2} =
    Some (UC_KEI2S.epdp__ke_sim_req1.`enc
      {| UC_KEI2S.ke_sim_req1___func = UC_KEIdeal._self{2};
        UC_KEI2S.ke_sim_req1___adv = adv;
        UC_KEI2S.ke_sim_req1__pt1 = pt1{2};
        UC_KEI2S.ke_sim_req1__pt2 = pt2{2}; |}) /\
    Some m0{2} = r0{2} /\
    not_done{2} = true /\
    _pt1{1} = _intport_Pt1 KEHybrid._self{1} /\
    _pt2{1} = _intport_Pt2 KEHybrid._self{1} /\
    KEHybrid._st{1} = KEHybridStateWaitReq1 /\
        UC_KEIdeal._st{2} = _State_IF_WaitSim1 pt1{2} pt2{2} /\
        UC_KESim._st{2} = _State_SIM_WaitReq1 /\
    ={m, glob MI} /\
         MakeInt.MI.func{2} = func' /\
         MakeInt.MI.in_guard{2} = in_guard' /\
         UC_KEIdeal._self{2} = MakeInt.MI.func{2} /\
      MSCore.MS.if_addr_opt{2} = UC_KESim.if_addr_opt{2} /\
    UC_KESim.if_addr_opt{2} = None /\
      KEHybrid._self{1} = MakeInt.MI.func{1} /\
      main_guard MakeInt.MI.func{1} MakeInt.MI.in_guard{1} m{1} /\
    
    pt1{2} = _x{2}.`UC_KEDir.Pt1.ke_req1__pt1 /\
    pt2{2} = _x{2}.`UC_KEDir.Pt1.ke_req1__pt2 /\
    pt1{1} = _x{1}.`UC_KEDir.Pt1.ke_req1__pt1 /\
    pt2{1} = _x{1}.`UC_KEDir.Pt1.ke_req1__pt2 /\
    UC_KEDir.Pt1.epdp__ke_req1.`dec m{2} = Some _x{2} /\
    UC_KEDir.Pt1.epdp__ke_req1.`dec m{1} = Some _x{1} /\
   envport KEHybrid._self{1} pt2{1}
  ).
  exlim r0{2} => r0R.
          call{2} (MakeInt.MI_after_func_to_adv UC_KEIdeal (MSCore.MS(UC_KESim, DummyAdv)) r0R).
          skip. move => &1 &2 P.
          progress. 
          smt(). smt(). smt(). smt(). smt(). smt(_adv_pi_begin_gt0).
          smt(). have Q : result.`1 = _r0{2}. smt(). smt().
          smt(). smt(). smt(). smt(). smt(). smt(). smt(). smt(). smt().
          smt(). smt(). smt(). smt(). smt(). smt(). smt(). smt(). smt().
      smt(). smt(). smt(). smt(). smt(). smt(). smt(). smt().

          rcondt{2} 0. auto;smt().
      rcondf{2} 0. auto;smt.
inline{2} (1) invoke.
sp 0 2.
rcondt{2} 0. auto;smt().
          rcondt{2} 0. auto;smt().
          rcondt{2} 0. auto;smt().
          sp 0 1.
      inline{2} (1) loop.
          sp 0 3.
          rcondt{2} 0. auto;smt().
          rcondf{2} 0. auto;smt().
      inline{2} (1) invoke.
          sp 0 2.
          rcondt{2} 0. auto;smt().
          sp 0 1.
          match _State_SIM_WaitReq1 {2} 0. auto;smt().
          rcondt{2} 0. auto;smt().
      inline _State_SIM_WaitReq1__KEI2S__ke_sim_req1.
sp 0 3.      
seq 1 1 : (#pre /\ ={q1}).
          rnd. auto;smt().
      (*UC_Fw1.UC_FwAdv.epdp__fw_obs to be sent to adversary*)
          sp 5 4.
      
          seq 1 0 : (

  r0{1} =
      Some (UC_Fw1.UC_FwAdv.epdp__fw_obs.`enc
          {| UC_Fw1.UC_FwAdv.fw_obs___func = _addr_Fw1 KEHybrid._self{1};
            UC_Fw1.UC_FwAdv.fw_obs___adv = adv;
            UC_Fw1.UC_FwAdv.fw_obs__pt1 = _intport_Pt1 KEHybrid._self{1};
            UC_Fw1.UC_FwAdv.fw_obs__pt2 = _intport_Pt2 KEHybrid._self{1};
            UC_Fw1.UC_FwAdv.fw_obs__u =
            epdp_port_port_key_univ.`enc (pt1{1}, pt2{1}, g ^ q1{1}); |}) /\
        Some m0{1} = r0{1} /\
    
  r3{2} =
    Some (UC_Fw1.UC_FwAdv.epdp__fw_obs.`enc
          {| UC_Fw1.UC_FwAdv.fw_obs___func = _addr_Fw1 (oget UC_KESim.if_addr_opt{2});
            UC_Fw1.UC_FwAdv.fw_obs___adv = adv;
            UC_Fw1.UC_FwAdv.fw_obs__pt1 =
            _intport_Pt1 (oget UC_KESim.if_addr_opt{2});
            UC_Fw1.UC_FwAdv.fw_obs__pt2 =
            _intport_Pt2 (oget UC_KESim.if_addr_opt{2});
            UC_Fw1.UC_FwAdv.fw_obs__u =
          epdp_port_port_key_univ.`enc (pt1{2}, pt2{2}, g ^ q1{2}); |}) /\
        not_done{2} = true /\
        not_done{1} = true /\
    
    KEHybrid._st{1} = KEHybridStateWaitAdv1 pt1{1} pt2{1} q1{1} /\
        UC_KEIdeal._st{2} = _State_IF_WaitSim1 pt1{2} pt2{2} /\
        UC_KESim._st{2} = _State_SIM_WaitAdv1 q1{2} /\
    ={m, glob MI, q1} /\
         MakeInt.MI.func{2} = func' /\
         MakeInt.MI.in_guard{2} = in_guard' /\
         UC_KEIdeal._self{2} = MakeInt.MI.func{2} /\
         MSCore.MS.if_addr_opt{2} = Some UC_KEIdeal._self{2} /\
         UC_KESim.if_addr_opt{2} = Some UC_KEIdeal._self{2} /\
      KEHybrid._self{1} = MakeInt.MI.func{1} /\
      main_guard MakeInt.MI.func{1} MakeInt.MI.in_guard{1} m{1} /\
    
    pt1{2} = _x{2}.`UC_KEDir.Pt1.ke_req1__pt1 /\
    pt2{2} = _x{2}.`UC_KEDir.Pt1.ke_req1__pt2 /\
    pt1{1} = _x{1}.`UC_KEDir.Pt1.ke_req1__pt1 /\
    pt2{1} = _x{1}.`UC_KEDir.Pt1.ke_req1__pt2 /\
    UC_KEDir.Pt1.epdp__ke_req1.`dec m{2} = Some _x{2} /\
    UC_KEDir.Pt1.epdp__ke_req1.`dec m{1} = Some _x{1} /\
   envport KEHybrid._self{1} pt2{1}
  ).
  exlim r0{1} => r0L.
          call{1} (MakeInt.MI_after_func_to_adv KEHybrid DummyAdv r0L).
          skip. move => &1 &2 P. 
      have Q10 : pt10{2} = pt1{2}.
          have Q : (oget(UC_KEI2S.epdp__ke_sim_req1.`dec _m0{2})).`UC_KEI2S.ke_sim_req1__pt1 =  pt1{2}.
          have Q : _m0{2} = oget r0{2}. smt(). rewrite Q. clear Q.
      
      have Q: oget r0{2} =  UC_KEI2S.epdp__ke_sim_req1.`enc {|
        UC_KEI2S.ke_sim_req1___func = UC_KEIdeal._self{2};
          UC_KEI2S.ke_sim_req1___adv = adv;
        UC_KEI2S.ke_sim_req1__pt1 = pt1{2};
          UC_KEI2S.ke_sim_req1__pt2 = pt2{2}; |}. smt(). rewrite Q. clear Q.
      smt(
          UC_KEI2S.valid_epdp__ke_sim_req1
          UC_KEI2S.eq_of_valid__ke_sim_req1
      ). smt(). 
have Q20 : pt20{2} = pt2{2}.
          have Q : (oget(UC_KEI2S.epdp__ke_sim_req1.`dec _m0{2})).`UC_KEI2S.ke_sim_req1__pt2 =  pt2{2}.
          have Q : _m0{2} = oget r0{2}. smt(). rewrite Q. clear Q.
      
      have Q: oget r0{2} =  UC_KEI2S.epdp__ke_sim_req1.`enc {|
        UC_KEI2S.ke_sim_req1___func = UC_KEIdeal._self{2};
          UC_KEI2S.ke_sim_req1___adv = adv;
        UC_KEI2S.ke_sim_req1__pt1 = pt1{2};
          UC_KEI2S.ke_sim_req1__pt2 = pt2{2}; |}. smt(). rewrite Q. clear Q.
      smt(
          UC_KEI2S.valid_epdp__ke_sim_req1
          UC_KEI2S.eq_of_valid__ke_sim_req1
      ). smt().
          have Qe : r3{2} = _r2{2}. smt().
      have QO : (oget(UC_KEI2S.epdp__ke_sim_req1.`dec _m0{2})).`UC_KEI2S.ke_sim_req1__pt2 =  pt2{2}.
          have Q : _m0{2} = oget r0{2}. smt(). rewrite Q. clear Q.
      
      have Q: oget r0{2} =  UC_KEI2S.epdp__ke_sim_req1.`enc {|
        UC_KEI2S.ke_sim_req1___func = UC_KEIdeal._self{2};
          UC_KEI2S.ke_sim_req1___adv = adv;
        UC_KEI2S.ke_sim_req1__pt1 = pt1{2};
          UC_KEI2S.ke_sim_req1__pt2 = pt2{2}; |}. smt(). rewrite Q. clear Q.
      smt(
          UC_KEI2S.valid_epdp__ke_sim_req1
          UC_KEI2S.eq_of_valid__ke_sim_req1
      ).
progress.
          smt().
          smt(). smt(). smt(). smt(@UCListPO). smt(_adv_pi_begin_gt0). smt(@UCListPO). smt(). smt(). rewrite -Q10 -Q20. smt(). smt().
          smt(). smt(). smt(). smt(). smt(). smt(). smt(). smt(). smt().
          smt(). smt(). smt(). smt(). smt(). smt(). smt(). smt(). smt().
       smt(). smt(). smt(). smt(). smt(). smt(). 
          
seq 0 1 : (

  r0{1} =
      Some (UC_Fw1.UC_FwAdv.epdp__fw_obs.`enc
          {| UC_Fw1.UC_FwAdv.fw_obs___func = _addr_Fw1 KEHybrid._self{1};
            UC_Fw1.UC_FwAdv.fw_obs___adv = adv;
            UC_Fw1.UC_FwAdv.fw_obs__pt1 = _intport_Pt1 KEHybrid._self{1};
            UC_Fw1.UC_FwAdv.fw_obs__pt2 = _intport_Pt2 KEHybrid._self{1};
            UC_Fw1.UC_FwAdv.fw_obs__u =
            epdp_port_port_key_univ.`enc (pt1{1}, pt2{1}, g ^ q1{1}); |}) /\
     Some m0{1} = r0{1} /\   
not_done0{2}= true /\
        Some m3{2} = r3{2} /\    
  r3{2} =
    Some (UC_Fw1.UC_FwAdv.epdp__fw_obs.`enc
          {| UC_Fw1.UC_FwAdv.fw_obs___func = _addr_Fw1 (oget UC_KESim.if_addr_opt{2});
            UC_Fw1.UC_FwAdv.fw_obs___adv = adv;
            UC_Fw1.UC_FwAdv.fw_obs__pt1 =
            _intport_Pt1 (oget UC_KESim.if_addr_opt{2});
            UC_Fw1.UC_FwAdv.fw_obs__pt2 =
            _intport_Pt2 (oget UC_KESim.if_addr_opt{2});
            UC_Fw1.UC_FwAdv.fw_obs__u =
          epdp_port_port_key_univ.`enc (pt1{2}, pt2{2}, g ^ q1{2}); |}) /\
        not_done{2} = true /\
        not_done{1} = true /\
    
    KEHybrid._st{1} = KEHybridStateWaitAdv1 pt1{1} pt2{1} q1{1} /\
        UC_KEIdeal._st{2} = _State_IF_WaitSim1 pt1{2} pt2{2} /\
        UC_KESim._st{2} = _State_SIM_WaitAdv1 q1{2} /\
    ={m, glob MI, q1} /\
         MakeInt.MI.func{2} = func' /\
         MakeInt.MI.in_guard{2} = in_guard' /\
         UC_KEIdeal._self{2} = MakeInt.MI.func{2} /\
         MSCore.MS.if_addr_opt{2} = Some UC_KEIdeal._self{2} /\
         UC_KESim.if_addr_opt{2} = Some UC_KEIdeal._self{2} /\
      KEHybrid._self{1} = MakeInt.MI.func{1} /\
      main_guard MakeInt.MI.func{1} MakeInt.MI.in_guard{1} m{1} /\
    
    pt1{2} = _x{2}.`UC_KEDir.Pt1.ke_req1__pt1 /\
    pt2{2} = _x{2}.`UC_KEDir.Pt1.ke_req1__pt2 /\
    pt1{1} = _x{1}.`UC_KEDir.Pt1.ke_req1__pt1 /\
    pt2{1} = _x{1}.`UC_KEDir.Pt1.ke_req1__pt2 /\
    UC_KEDir.Pt1.epdp__ke_req1.`dec m{2} = Some _x{2} /\
    UC_KEDir.Pt1.epdp__ke_req1.`dec m{1} = Some _x{1} /\
   envport KEHybrid._self{1} pt2{1}
  ).
  exlim r3{2} => r3R.
 call{2} (MSCore.MS_after_core_continue UC_KESim DummyAdv r3R).   
          skip. move => &1 &2 P. progress;smt(_adv_pi_begin_gt0 @UCListPO).
       
          rcondt{2} 0. auto;smt().
          rcondt{2} 0. auto;smt().
     
          inline{2} (1) invoke.
          sp 0 2.
          match None {2} 0. 
      move => &m0. skip. move => &hr P. 
          apply  dest_pi_gt0_implies_dec_epdp_da_from_env_fails.
      have H : m4{hr} = (UC_Fw1.UC_FwAdv.epdp__fw_obs.`enc
     {| UC_Fw1.UC_FwAdv.fw_obs___func = _addr_Fw1 (oget UC_KESim.if_addr_opt{hr});
       UC_Fw1.UC_FwAdv.fw_obs___adv = adv;
       UC_Fw1.UC_FwAdv.fw_obs__pt1 =
       _intport_Pt1 (oget UC_KESim.if_addr_opt{hr});
       UC_Fw1.UC_FwAdv.fw_obs__pt2 =
       _intport_Pt2 (oget UC_KESim.if_addr_opt{hr});
       UC_Fw1.UC_FwAdv.fw_obs__u =
       epdp_port_port_key_univ.`enc (pt1{hr}, pt2{hr}, g ^ q1{hr}); |}).
       have H : m4{hr} = m3{hr}. smt(). rewrite H. clear H. smt().
rewrite H. clear H.
       smt(UC_Fw1._adv_if_pi_gt0).
       rcondt{2} 0. move => &m0. skip. move => &hr P. 
have H : m4{hr} = (UC_Fw1.UC_FwAdv.epdp__fw_obs.`enc
     {| UC_Fw1.UC_FwAdv.fw_obs___func = _addr_Fw1 (oget UC_KESim.if_addr_opt{hr});
       UC_Fw1.UC_FwAdv.fw_obs___adv = adv;
       UC_Fw1.UC_FwAdv.fw_obs__pt1 =
       _intport_Pt1 (oget UC_KESim.if_addr_opt{hr});
       UC_Fw1.UC_FwAdv.fw_obs__pt2 =
       _intport_Pt2 (oget UC_KESim.if_addr_opt{hr});
       UC_Fw1.UC_FwAdv.fw_obs__u =
       epdp_port_port_key_univ.`enc (pt1{hr}, pt2{hr}, g ^ q1{hr}); |}).
       have H : m4{hr} = m3{hr}. smt(). rewrite H. clear H. smt().
rewrite H. clear H.
       smt(UC_Fw1._adv_if_pi_gt0).
   sp 0 2.
   
   seq 0 1 : (

  r0{1} =
      Some (UC_Fw1.UC_FwAdv.epdp__fw_obs.`enc
          {| UC_Fw1.UC_FwAdv.fw_obs___func = _addr_Fw1 KEHybrid._self{1};
            UC_Fw1.UC_FwAdv.fw_obs___adv = adv;
            UC_Fw1.UC_FwAdv.fw_obs__pt1 = _intport_Pt1 KEHybrid._self{1};
            UC_Fw1.UC_FwAdv.fw_obs__pt2 = _intport_Pt2 KEHybrid._self{1};
            UC_Fw1.UC_FwAdv.fw_obs__u =
            epdp_port_port_key_univ.`enc (pt1{1}, pt2{1}, g ^ q1{1}); |}) /\
    Some m0{1} = r0{1} /\    
not_done0{2}= false /\
        Some m3{2} = r3{2} /\    
  m4{2} =
    UC_Fw1.UC_FwAdv.epdp__fw_obs.`enc
          {| UC_Fw1.UC_FwAdv.fw_obs___func = _addr_Fw1 (oget UC_KESim.if_addr_opt{2});
            UC_Fw1.UC_FwAdv.fw_obs___adv = adv;
            UC_Fw1.UC_FwAdv.fw_obs__pt1 =
            _intport_Pt1 (oget UC_KESim.if_addr_opt{2});
            UC_Fw1.UC_FwAdv.fw_obs__pt2 =
            _intport_Pt2 (oget UC_KESim.if_addr_opt{2});
            UC_Fw1.UC_FwAdv.fw_obs__u =
            epdp_port_port_key_univ.`enc (pt1{2}, pt2{2}, g ^ q1{2}); |} /\

   r3{2} = Some (epdp_da_to_env.`enc
      {| dte_n = m4{2}.`2.`2; dte_pt = m4{2}.`3; dte_tag = m4{2}.`4; dte_u =
          m4{2}.`5; |}) /\
        not_done{2} = true /\
        not_done{1} = true /\
    
    KEHybrid._st{1} = KEHybridStateWaitAdv1 pt1{1} pt2{1} q1{1} /\
        UC_KEIdeal._st{2} = _State_IF_WaitSim1 pt1{2} pt2{2} /\
        UC_KESim._st{2} = _State_SIM_WaitAdv1 q1{2} /\
    ={m, glob MI, q1} /\
         MakeInt.MI.func{2} = func' /\
         MakeInt.MI.in_guard{2} = in_guard' /\
         UC_KEIdeal._self{2} = MakeInt.MI.func{2} /\
         MSCore.MS.if_addr_opt{2} = Some UC_KEIdeal._self{2} /\
         UC_KESim.if_addr_opt{2} = Some UC_KEIdeal._self{2} /\
      KEHybrid._self{1} = MakeInt.MI.func{1} /\
      main_guard MakeInt.MI.func{1} MakeInt.MI.in_guard{1} m{1} /\
    
    pt1{2} = _x{2}.`UC_KEDir.Pt1.ke_req1__pt1 /\
    pt2{2} = _x{2}.`UC_KEDir.Pt1.ke_req1__pt2 /\
    pt1{1} = _x{1}.`UC_KEDir.Pt1.ke_req1__pt1 /\
    pt2{1} = _x{1}.`UC_KEDir.Pt1.ke_req1__pt2 /\
    UC_KEDir.Pt1.epdp__ke_req1.`dec m{2} = Some _x{2} /\
    UC_KEDir.Pt1.epdp__ke_req1.`dec m{1} = Some _x{1} /\
   envport KEHybrid._self{1} pt2{1}
      ). exlim r3{2} => r3R.
          call{2} (MSCore.MS_after_adv_return UC_KESim DummyAdv r3R).
skip. move => &1 &2 P. progress;smt(@UCListPO).
   
          rcondf{2} 0. auto;smt().
      sp 0 2.

seq 0 1 : (
r0{1} =
      Some (UC_Fw1.UC_FwAdv.epdp__fw_obs.`enc
          {| UC_Fw1.UC_FwAdv.fw_obs___func = _addr_Fw1 KEHybrid._self{1};
            UC_Fw1.UC_FwAdv.fw_obs___adv = adv;
            UC_Fw1.UC_FwAdv.fw_obs__pt1 = _intport_Pt1 KEHybrid._self{1};
            UC_Fw1.UC_FwAdv.fw_obs__pt2 = _intport_Pt2 KEHybrid._self{1};
            UC_Fw1.UC_FwAdv.fw_obs__u =
            epdp_port_port_key_univ.`enc (pt1{1}, pt2{1}, g ^ q1{1}); |}) /\
 Some m0{1} = r0{1} /\       
not_done{2} = false /\
        Some m3{2} = r3{2} /\    
  m4{2} =
    UC_Fw1.UC_FwAdv.epdp__fw_obs.`enc
          {| UC_Fw1.UC_FwAdv.fw_obs___func = _addr_Fw1 (oget UC_KESim.if_addr_opt{2});
            UC_Fw1.UC_FwAdv.fw_obs___adv = adv;
            UC_Fw1.UC_FwAdv.fw_obs__pt1 =
            _intport_Pt1 (oget UC_KESim.if_addr_opt{2});
            UC_Fw1.UC_FwAdv.fw_obs__pt2 =
            _intport_Pt2 (oget UC_KESim.if_addr_opt{2});
            UC_Fw1.UC_FwAdv.fw_obs__u =
            epdp_port_port_key_univ.`enc (pt1{2}, pt2{2}, g ^ q1{2}); |} /\

   r0{2} = Some (epdp_da_to_env.`enc
      {| dte_n = m4{2}.`2.`2; dte_pt = m4{2}.`3; dte_tag = m4{2}.`4; dte_u =
          m4{2}.`5; |}) /\
    not_done{1} = true /\
    Some m0{2} = r0{2} /\
    
    KEHybrid._st{1} = KEHybridStateWaitAdv1 pt1{1} pt2{1} q1{1} /\
        UC_KEIdeal._st{2} = _State_IF_WaitSim1 pt1{2} pt2{2} /\
        UC_KESim._st{2} = _State_SIM_WaitAdv1 q1{2} /\
    ={m, glob MI, q1} /\
         MakeInt.MI.func{2} = func' /\
         MakeInt.MI.in_guard{2} = in_guard' /\
         UC_KEIdeal._self{2} = MakeInt.MI.func{2} /\
         MSCore.MS.if_addr_opt{2} = Some UC_KEIdeal._self{2} /\
         UC_KESim.if_addr_opt{2} = Some UC_KEIdeal._self{2} /\
      KEHybrid._self{1} = MakeInt.MI.func{1} /\
      main_guard MakeInt.MI.func{1} MakeInt.MI.in_guard{1} m{1} /\
    
    pt1{2} = _x{2}.`UC_KEDir.Pt1.ke_req1__pt1 /\
    pt2{2} = _x{2}.`UC_KEDir.Pt1.ke_req1__pt2 /\
    pt1{1} = _x{1}.`UC_KEDir.Pt1.ke_req1__pt1 /\
    pt2{1} = _x{1}.`UC_KEDir.Pt1.ke_req1__pt2 /\
    UC_KEDir.Pt1.epdp__ke_req1.`dec m{2} = Some _x{2} /\
    UC_KEDir.Pt1.epdp__ke_req1.`dec m{1} = Some _x{1} /\
   envport KEHybrid._self{1} pt2{1}
      ). exlim r0{2} => r0R.
 call{2} (MakeInt.MI_after_adv_to_env UC_KEIdeal (MSCore.MS(UC_KESim, DummyAdv)) r0R).   
          skip. move => &1 &2 P. progress.
          smt(). smt(). smt(). smt().  smt(@UCListPO). smt(@UCListPO).
          smt(). smt(). smt(). smt(). smt(). smt(). smt(). smt(). smt().
have Q : result.`1 = r3{2}. smt(). 
          smt(). smt(). smt(). smt(). smt(). smt(). smt(). smt().
          smt(). smt(). smt(). smt(). smt(). smt(). smt().
          smt(). smt(). smt(). smt(). smt(). smt(). smt().
      smt(). smt(). smt(). smt().
    
rcondf{2} 0. auto;smt().
          rcondt{1} 0. auto;smt().
          rcondf{1} 0. move => &m0. skip. move => &hr P.
          smt(@UCListPO).
          inline{1} (1) invoke.
      sp 2 0.
          match None {1} 0. 
      move => &m0. skip. move => &hr P. 
          apply  dest_pi_gt0_implies_dec_epdp_da_from_env_fails.
      have H : m2{hr} = (UC_Fw1.UC_FwAdv.epdp__fw_obs.`enc
     {| UC_Fw1.UC_FwAdv.fw_obs___func = _addr_Fw1 KEHybrid._self{hr};
       UC_Fw1.UC_FwAdv.fw_obs___adv = adv;
       UC_Fw1.UC_FwAdv.fw_obs__pt1 = _intport_Pt1 KEHybrid._self{hr};
       UC_Fw1.UC_FwAdv.fw_obs__pt2 = _intport_Pt2 KEHybrid._self{hr};
       UC_Fw1.UC_FwAdv.fw_obs__u =
       epdp_port_port_key_univ.`enc (pt1{hr}, pt2{hr}, g ^ q1{hr}); |}). 
       have H : m2{hr} = m0{hr}. smt(). rewrite H. clear H. smt().
       smt(UC_Fw1._adv_if_pi_gt0).
       rcondt{1} 0. move => &m0. skip. move => &hr P.
   have H : m2{hr} = (UC_Fw1.UC_FwAdv.epdp__fw_obs.`enc
     {| UC_Fw1.UC_FwAdv.fw_obs___func = _addr_Fw1 KEHybrid._self{hr};
         UC_Fw1.UC_FwAdv.fw_obs___adv = adv;
         UC_Fw1.UC_FwAdv.fw_obs__pt1 = _intport_Pt1 KEHybrid._self{hr};
       UC_Fw1.UC_FwAdv.fw_obs__pt2 = _intport_Pt2 KEHybrid._self{hr};
       UC_Fw1.UC_FwAdv.fw_obs__u =
       epdp_port_port_key_univ.`enc (pt1{hr}, pt2{hr}, g ^ q1{hr}); |}).
have H : m2{hr} = m0{hr}. smt(). rewrite H. clear H.
       smt().
       smt(UC_Fw1._adv_if_pi_gt0).
       sp 2 0.

       seq 1 0 : (
     
m2{1} = (UC_Fw1.UC_FwAdv.epdp__fw_obs.`enc
       {| UC_Fw1.UC_FwAdv.fw_obs___func = _addr_Fw1 KEHybrid._self{1};
         UC_Fw1.UC_FwAdv.fw_obs___adv = adv;
         UC_Fw1.UC_FwAdv.fw_obs__pt1 = _intport_Pt1 KEHybrid._self{1};
         UC_Fw1.UC_FwAdv.fw_obs__pt2 = _intport_Pt2 KEHybrid._self{1};
         UC_Fw1.UC_FwAdv.fw_obs__u =
          epdp_port_port_key_univ.`enc (pt1{1}, pt2{1}, g ^ q1{1}); |}) /\     
r0{1} = Some (epdp_da_to_env.`enc
      {| dte_n = m2{1}.`2.`2; dte_pt = m2{1}.`3; dte_tag = m2{1}.`4; dte_u =
          m2{1}.`5; |}) /\ 
    not_done{1} = false /\
    
  m4{2} =
    UC_Fw1.UC_FwAdv.epdp__fw_obs.`enc
          {| UC_Fw1.UC_FwAdv.fw_obs___func = _addr_Fw1 (oget UC_KESim.if_addr_opt{2});
            UC_Fw1.UC_FwAdv.fw_obs___adv = adv;
            UC_Fw1.UC_FwAdv.fw_obs__pt1 =
            _intport_Pt1 (oget UC_KESim.if_addr_opt{2});
            UC_Fw1.UC_FwAdv.fw_obs__pt2 =
            _intport_Pt2 (oget UC_KESim.if_addr_opt{2});
            UC_Fw1.UC_FwAdv.fw_obs__u =
            epdp_port_port_key_univ.`enc (pt1{2}, pt2{2}, g ^ q1{2}); |} /\
r0{2} = Some (epdp_da_to_env.`enc
      {| dte_n = m4{2}.`2.`2; dte_pt = m4{2}.`3; dte_tag = m4{2}.`4; dte_u =
          m4{2}.`5; |}) /\
    
    
    KEHybrid._st{1} = KEHybridStateWaitAdv1 pt1{1} pt2{1} q1{1} /\
        UC_KEIdeal._st{2} = _State_IF_WaitSim1 pt1{2} pt2{2} /\
        UC_KESim._st{2} = _State_SIM_WaitAdv1 q1{2} /\
    ={m, glob MI, q1} /\
         MakeInt.MI.func{2} = func' /\
         MakeInt.MI.in_guard{2} = in_guard' /\
         UC_KEIdeal._self{2} = MakeInt.MI.func{2} /\
         MSCore.MS.if_addr_opt{2} = Some UC_KEIdeal._self{2} /\
         UC_KESim.if_addr_opt{2} = Some UC_KEIdeal._self{2} /\
      KEHybrid._self{1} = MakeInt.MI.func{1} /\
      main_guard MakeInt.MI.func{1} MakeInt.MI.in_guard{1} m{1} /\
    
    pt1{2} = _x{2}.`UC_KEDir.Pt1.ke_req1__pt1 /\
    pt2{2} = _x{2}.`UC_KEDir.Pt1.ke_req1__pt2 /\
    pt1{1} = _x{1}.`UC_KEDir.Pt1.ke_req1__pt1 /\
    pt2{1} = _x{1}.`UC_KEDir.Pt1.ke_req1__pt2 /\
    UC_KEDir.Pt1.epdp__ke_req1.`dec m{2} = Some _x{2} /\
    UC_KEDir.Pt1.epdp__ke_req1.`dec m{1} = Some _x{1} /\
   envport KEHybrid._self{1} pt2{1}
      ). exlim r0{1} => r0L.
 call{1} (MakeInt.MI_after_adv_to_env KEHybrid DummyAdv r0L).   
          skip. move => &1 &2 P. progress; smt(@UCListPO).
       
          rcondf{1} 0. auto;smt().
          skip. move => &1 &2 P.
      have H :  ke_hybrid_ideal_sim_rel1
     {| ke_hybrid_ideal_sim_rel_func = func';
         ke_hybrid_ideal_sim_rel_in_guard = in_guard';
         ke_hybrid_ideal_sim_rel_st_hs = KEHybrid._st{1};
         ke_hybrid_ideal_sim_rel_st_hslf = KEHybrid._self{1};
         ke_hybrid_ideal_sim_rel_st_is = UC_KEIdeal._st{2};
         ke_hybrid_ideal_sim_rel_st_islf = UC_KEIdeal._self{2};
         ke_hybrid_ideal_sim_rel_st_ss = UC_KESim._st{2};
         ke_hybrid_ideal_sim_rel_sim_ao = UC_KESim.if_addr_opt{2};
         ke_hybrid_ideal_sim_rel_ms_ao = MSCore.MS.if_addr_opt{2};
         ke_hybrid_ideal_sim_rel_mi1_func = MakeInt.MI.func{1};
         ke_hybrid_ideal_sim_rel_mi1_in_guard = MakeInt.MI.in_guard{1};
         ke_hybrid_ideal_sim_rel_mi2_func = MakeInt.MI.func{2};
       ke_hybrid_ideal_sim_rel_mi2_in_guard = MakeInt.MI.in_guard{2}; |}
       pt1{1} pt2{1} q1{1}. smt().
       progress; smt(KEHybridIdealSimRel1).


 (*case when KEHybridIdealSimRel1*)    
     move => pt1 pt2 q1 ke_hi_s_rel1 //=.    

       rcondt{1} 0. auto;smt().
       rcondt{2} 0. auto;smt().
       if. auto;smt().
     (*msg from environment to functionality*)
       inline{1} (1) invoke.
     sp 2 0.
       match KEHybridStateWaitAdv1 {1}  0. auto;smt().
       if{1};last first.
     
       (*not Adv msg for Fw1*)
     sp 1 0. print main_guard.
seq 1 0 : (        
        r0{1} = None /\
        not_done{1} = false /\
     
          r0{2} = None /\
          not_done{2} = true /\
          m0{2} = m{2} /\
          ={m} /\
    ke_hybrid_ideal_sim_rel1
     {| ke_hybrid_ideal_sim_rel_func = func';
         ke_hybrid_ideal_sim_rel_in_guard = in_guard';
         ke_hybrid_ideal_sim_rel_st_hs = KEHybrid._st{1};
         ke_hybrid_ideal_sim_rel_st_hslf = KEHybrid._self{1};
         ke_hybrid_ideal_sim_rel_st_is = UC_KEIdeal._st{2};
         ke_hybrid_ideal_sim_rel_st_islf = UC_KEIdeal._self{2};
         ke_hybrid_ideal_sim_rel_st_ss = UC_KESim._st{2};
         ke_hybrid_ideal_sim_rel_sim_ao = UC_KESim.if_addr_opt{2};
         ke_hybrid_ideal_sim_rel_ms_ao = MSCore.MS.if_addr_opt{2};
         ke_hybrid_ideal_sim_rel_mi1_func = MakeInt.MI.func{1};
         ke_hybrid_ideal_sim_rel_mi1_in_guard = MakeInt.MI.in_guard{1};
         ke_hybrid_ideal_sim_rel_mi2_func = MakeInt.MI.func{2};
       ke_hybrid_ideal_sim_rel_mi2_in_guard = MakeInt.MI.in_guard{2}; |} pt1 pt2 q1 /\
    
     main_guard MakeInt.MI.func{1} MakeInt.MI.in_guard{1} m{1} /\
  
       MakeInt.MI.func{1} <= m{1}.`2.`1 /\
    ! (m{1}.`1 = UCBasicTypes.Adv /\
       m{1}.`3.`1 = adv /\ _addr_Fw1 KEHybrid._self{1} = m{1}.`2.`1)
      ).
          call{1} (MakeInt.MI_after_func_error KEHybrid DummyAdv). auto;progress;smt().
rcondf{1} 0. auto;smt().     
inline{2} (1) invoke.
          sp 0 2.
          if{2}.
          inline{2} (1) parties.
      sp 0 2.
match _State_IF_WaitSim1 {2} 0. auto;smt().
          match None {2} 0.
      move => &m0. skip. move => &hr P.
          have H : _m{hr}.`1 = Dir. smt(@UCListPO).
          smt(UC_KEI2S.eq_of_valid__ke_sim_rsp).      
          sp 0 2.
      seq 0 1 : (        
        r0{1} = None /\
        not_done{1} = false /\
     
          r0{2} = None /\
          not_done{2} = false /\
          ={m} /\
    ke_hybrid_ideal_sim_rel1
     {| ke_hybrid_ideal_sim_rel_func = func';
         ke_hybrid_ideal_sim_rel_in_guard = in_guard';
         ke_hybrid_ideal_sim_rel_st_hs = KEHybrid._st{1};
         ke_hybrid_ideal_sim_rel_st_hslf = KEHybrid._self{1};
         ke_hybrid_ideal_sim_rel_st_is = UC_KEIdeal._st{2};
         ke_hybrid_ideal_sim_rel_st_islf = UC_KEIdeal._self{2};
         ke_hybrid_ideal_sim_rel_st_ss = UC_KESim._st{2};
         ke_hybrid_ideal_sim_rel_sim_ao = UC_KESim.if_addr_opt{2};
         ke_hybrid_ideal_sim_rel_ms_ao = MSCore.MS.if_addr_opt{2};
         ke_hybrid_ideal_sim_rel_mi1_func = MakeInt.MI.func{1};
         ke_hybrid_ideal_sim_rel_mi1_in_guard = MakeInt.MI.in_guard{1};
         ke_hybrid_ideal_sim_rel_mi2_func = MakeInt.MI.func{2};
       ke_hybrid_ideal_sim_rel_mi2_in_guard = MakeInt.MI.in_guard{2}; |} pt1 pt2 q1 
      ).
          call{2} (MakeInt.MI_after_func_error UC_KEIdeal (MSCore.MS(UC_KESim, DummyAdv))). auto;progress;smt().
          rcondf{2} 0. auto;smt(). auto;smt(KEHybridIdealSimRel1).
          sp 0 1.
            seq 0 1 : (        
        r0{1} = None /\
        not_done{1} = false /\
     
          r0{2} = None /\
          not_done{2} = false /\
          ={m} /\
    ke_hybrid_ideal_sim_rel1
     {| ke_hybrid_ideal_sim_rel_func = func';
         ke_hybrid_ideal_sim_rel_in_guard = in_guard';
         ke_hybrid_ideal_sim_rel_st_hs = KEHybrid._st{1};
         ke_hybrid_ideal_sim_rel_st_hslf = KEHybrid._self{1};
         ke_hybrid_ideal_sim_rel_st_is = UC_KEIdeal._st{2};
         ke_hybrid_ideal_sim_rel_st_islf = UC_KEIdeal._self{2};
         ke_hybrid_ideal_sim_rel_st_ss = UC_KESim._st{2};
         ke_hybrid_ideal_sim_rel_sim_ao = UC_KESim.if_addr_opt{2};
         ke_hybrid_ideal_sim_rel_ms_ao = MSCore.MS.if_addr_opt{2};
         ke_hybrid_ideal_sim_rel_mi1_func = MakeInt.MI.func{1};
         ke_hybrid_ideal_sim_rel_mi1_in_guard = MakeInt.MI.in_guard{1};
         ke_hybrid_ideal_sim_rel_mi2_func = MakeInt.MI.func{2};
       ke_hybrid_ideal_sim_rel_mi2_in_guard = MakeInt.MI.in_guard{2}; |} pt1 pt2 q1 
      ).
          call{2} (MakeInt.MI_after_func_error UC_KEIdeal (MSCore.MS(UC_KESim, DummyAdv))). auto;progress;smt().
          rcondf{2} 0. auto;smt(). auto;smt(KEHybridIdealSimRel1).
          (*Adv msg for Fw1*)
      exfalso. smt(@UCListPO).
          (*msg from environment to adversary*)
      inline{1} (1) invoke.
          sp 2 0.
          match{1}.
      (*epdp_da_from_env.`dec m1 = None*)
      if{1}; last first.
          sp 1 0.
          seq 1 0 :(
        (epdp_da_from_env.`dec m{1} = None /\
     
    
     (state =
      {| ke_hybrid_ideal_sim_rel_func = func';
          ke_hybrid_ideal_sim_rel_in_guard = in_guard';
          ke_hybrid_ideal_sim_rel_st_hs = KEHybrid._st{1};
          ke_hybrid_ideal_sim_rel_st_hslf = KEHybrid._self{1};
          ke_hybrid_ideal_sim_rel_st_is = UC_KEIdeal._st{2};
          ke_hybrid_ideal_sim_rel_st_islf = UC_KEIdeal._self{2};
          ke_hybrid_ideal_sim_rel_st_ss = UC_KESim._st{2};
          ke_hybrid_ideal_sim_rel_sim_ao = UC_KESim.if_addr_opt{2};
          ke_hybrid_ideal_sim_rel_ms_ao = MSCore.MS.if_addr_opt{2};
          ke_hybrid_ideal_sim_rel_mi1_func = MakeInt.MI.func{1};
          ke_hybrid_ideal_sim_rel_mi1_in_guard = MakeInt.MI.in_guard{1};
          ke_hybrid_ideal_sim_rel_mi2_func = MakeInt.MI.func{2};
          ke_hybrid_ideal_sim_rel_mi2_in_guard = MakeInt.MI.in_guard{2}; |} /\
      m0{2} = m{2} /\
      r0{2} = None /\
      not_done{2} = true /\
      r0{1} = None /\
      not_done{1} = false /\
      (={m} /\
       ke_hybrid_ideal_sim_rel
         {| ke_hybrid_ideal_sim_rel_func = func';
             ke_hybrid_ideal_sim_rel_in_guard = in_guard';
             ke_hybrid_ideal_sim_rel_st_hs = KEHybrid._st{1};
             ke_hybrid_ideal_sim_rel_st_hslf = KEHybrid._self{1};
             ke_hybrid_ideal_sim_rel_st_is = UC_KEIdeal._st{2};
             ke_hybrid_ideal_sim_rel_st_islf = UC_KEIdeal._self{2};
             ke_hybrid_ideal_sim_rel_st_ss = UC_KESim._st{2};
             ke_hybrid_ideal_sim_rel_sim_ao = UC_KESim.if_addr_opt{2};
             ke_hybrid_ideal_sim_rel_ms_ao = MSCore.MS.if_addr_opt{2};
             ke_hybrid_ideal_sim_rel_mi1_func = MakeInt.MI.func{1};
             ke_hybrid_ideal_sim_rel_mi1_in_guard = MakeInt.MI.in_guard{1};
             ke_hybrid_ideal_sim_rel_mi2_func = MakeInt.MI.func{2};
             ke_hybrid_ideal_sim_rel_mi2_in_guard = MakeInt.MI.in_guard{2}; |}) /\
      main_guard MakeInt.MI.func{1} MakeInt.MI.in_guard{1} m{1}) /\
     ! MakeInt.MI.func{1} <= m{1}.`2.`1) /\
    ! 0 < m{1}.`2.`2

        ).
            call{1} (MakeInt.MI_after_adv_error KEHybrid DummyAdv).
            auto;progress;smt().
            rcondf{1} 0. auto;smt().
        inline{2} (1) invoke.
            sp 0 2.
            rcondf{2} 0. auto;smt(_adv_pi_begin_gt0).
            inline{2} (1) loop.
            sp 0 3.
            rcondt{2} 0. auto;smt().
          rcondt{2} 0.
        move => &m0. skip. move => &hr P.
            progress.
        print main_guard.
        have H :  m{m0}.`1 = Adv /\ m{m0}.`2.`1 = adv.
          smt(@UCListPO).
        smt().
          smt(_adv_pi_begin_gt0).
          inline{2} (1) invoke.
          sp 0 2.
          match None {2} 0. auto.
          rcondf{2} 0. auto;smt().
          sp 0 1.
          seq 0 1 :(
    r0{1} = None /\      
    r2{2} = None /\
    not_done0{2} = false /\
    m1{2} = m0{2} /\
    r1{2} = None /\
    (epdp_da_from_env.`dec m{1} = None /\
     (state =
      {| ke_hybrid_ideal_sim_rel_func = func';
          ke_hybrid_ideal_sim_rel_in_guard = in_guard';
          ke_hybrid_ideal_sim_rel_st_hs = KEHybrid._st{1};
          ke_hybrid_ideal_sim_rel_st_hslf = KEHybrid._self{1};
          ke_hybrid_ideal_sim_rel_st_is = UC_KEIdeal._st{2};
          ke_hybrid_ideal_sim_rel_st_islf = UC_KEIdeal._self{2};
          ke_hybrid_ideal_sim_rel_st_ss = UC_KESim._st{2};
          ke_hybrid_ideal_sim_rel_sim_ao = UC_KESim.if_addr_opt{2};
          ke_hybrid_ideal_sim_rel_ms_ao = MSCore.MS.if_addr_opt{2};
          ke_hybrid_ideal_sim_rel_mi1_func = MakeInt.MI.func{1};
          ke_hybrid_ideal_sim_rel_mi1_in_guard = MakeInt.MI.in_guard{1};
          ke_hybrid_ideal_sim_rel_mi2_func = MakeInt.MI.func{2};
          ke_hybrid_ideal_sim_rel_mi2_in_guard = MakeInt.MI.in_guard{2}; |} /\
      m0{2} = m{2} /\
      r0{2} = None /\
      not_done{2} = true /\
      not_done{1} = false /\
      (={m} /\
       ke_hybrid_ideal_sim_rel
         {| ke_hybrid_ideal_sim_rel_func = func';
             ke_hybrid_ideal_sim_rel_in_guard = in_guard';
             ke_hybrid_ideal_sim_rel_st_hs = KEHybrid._st{1};
             ke_hybrid_ideal_sim_rel_st_hslf = KEHybrid._self{1};
             ke_hybrid_ideal_sim_rel_st_is = UC_KEIdeal._st{2};
             ke_hybrid_ideal_sim_rel_st_islf = UC_KEIdeal._self{2};
             ke_hybrid_ideal_sim_rel_st_ss = UC_KESim._st{2};
             ke_hybrid_ideal_sim_rel_sim_ao = UC_KESim.if_addr_opt{2};
             ke_hybrid_ideal_sim_rel_ms_ao = MSCore.MS.if_addr_opt{2};
             ke_hybrid_ideal_sim_rel_mi1_func = MakeInt.MI.func{1};
             ke_hybrid_ideal_sim_rel_mi1_in_guard = MakeInt.MI.in_guard{1};
             ke_hybrid_ideal_sim_rel_mi2_func = MakeInt.MI.func{2};
             ke_hybrid_ideal_sim_rel_mi2_in_guard = MakeInt.MI.in_guard{2}; |}) /\
      main_guard MakeInt.MI.func{1} MakeInt.MI.in_guard{1} m{1}) /\
     ! MakeInt.MI.func{1} <= m{1}.`2.`1) /\
    ! 0 < m{1}.`2.`2
 ).
     call{2} (MSCore.MS_after_adv_error UC_KESim DummyAdv). auto;progress;smt().
     rcondf{2} 0. auto;smt().
     sp 0 2.
     seq 0 1 :(
  r0{1} = None /\
    r0{2} = None /\
    
    
    (epdp_da_from_env.`dec m{1} = None /\
     (state =
      {| ke_hybrid_ideal_sim_rel_func = func';
          ke_hybrid_ideal_sim_rel_in_guard = in_guard';
          ke_hybrid_ideal_sim_rel_st_hs = KEHybrid._st{1};
          ke_hybrid_ideal_sim_rel_st_hslf = KEHybrid._self{1};
          ke_hybrid_ideal_sim_rel_st_is = UC_KEIdeal._st{2};
          ke_hybrid_ideal_sim_rel_st_islf = UC_KEIdeal._self{2};
          ke_hybrid_ideal_sim_rel_st_ss = UC_KESim._st{2};
          ke_hybrid_ideal_sim_rel_sim_ao = UC_KESim.if_addr_opt{2};
          ke_hybrid_ideal_sim_rel_ms_ao = MSCore.MS.if_addr_opt{2};
          ke_hybrid_ideal_sim_rel_mi1_func = MakeInt.MI.func{1};
          ke_hybrid_ideal_sim_rel_mi1_in_guard = MakeInt.MI.in_guard{1};
          ke_hybrid_ideal_sim_rel_mi2_func = MakeInt.MI.func{2};
          ke_hybrid_ideal_sim_rel_mi2_in_guard = MakeInt.MI.in_guard{2}; |} /\
      
      
      not_done{2} = false /\
      not_done{1} = false /\
      (={m} /\
       ke_hybrid_ideal_sim_rel
         {| ke_hybrid_ideal_sim_rel_func = func';
             ke_hybrid_ideal_sim_rel_in_guard = in_guard';
             ke_hybrid_ideal_sim_rel_st_hs = KEHybrid._st{1};
             ke_hybrid_ideal_sim_rel_st_hslf = KEHybrid._self{1};
             ke_hybrid_ideal_sim_rel_st_is = UC_KEIdeal._st{2};
             ke_hybrid_ideal_sim_rel_st_islf = UC_KEIdeal._self{2};
             ke_hybrid_ideal_sim_rel_st_ss = UC_KESim._st{2};
             ke_hybrid_ideal_sim_rel_sim_ao = UC_KESim.if_addr_opt{2};
             ke_hybrid_ideal_sim_rel_ms_ao = MSCore.MS.if_addr_opt{2};
             ke_hybrid_ideal_sim_rel_mi1_func = MakeInt.MI.func{1};
             ke_hybrid_ideal_sim_rel_mi1_in_guard = MakeInt.MI.in_guard{1};
             ke_hybrid_ideal_sim_rel_mi2_func = MakeInt.MI.func{2};
             ke_hybrid_ideal_sim_rel_mi2_in_guard = MakeInt.MI.in_guard{2}; |}) /\
      main_guard MakeInt.MI.func{1} MakeInt.MI.in_guard{1} m{1}) /\
     ! MakeInt.MI.func{1} <= m{1}.`2.`1) /\
    ! 0 < m{1}.`2.`2
   ).
       call{2} (MakeInt.MI_after_adv_error UC_KEIdeal (MSCore.MS(UC_KESim, DummyAdv))). auto;progress;smt().
       rcondf{2} 0. auto;smt(). auto;smt().

       (*return message to env*)
       sp 2 0.
       seq 1 0 :(
     r0{1} =
    Some (epdp_da_to_env.`enc
      {| dte_n = m{1}.`2.`2; dte_pt = m{1}.`3; dte_tag = m{1}.`4; dte_u =
          m{1}.`5; |}) /\
    (epdp_da_from_env.`dec m{1} = None /\
     
     (state =
      {| ke_hybrid_ideal_sim_rel_func = func';
          ke_hybrid_ideal_sim_rel_in_guard = in_guard';
          ke_hybrid_ideal_sim_rel_st_hs = KEHybrid._st{1};
          ke_hybrid_ideal_sim_rel_st_hslf = KEHybrid._self{1};
          ke_hybrid_ideal_sim_rel_st_is = UC_KEIdeal._st{2};
          ke_hybrid_ideal_sim_rel_st_islf = UC_KEIdeal._self{2};
          ke_hybrid_ideal_sim_rel_st_ss = UC_KESim._st{2};
          ke_hybrid_ideal_sim_rel_sim_ao = UC_KESim.if_addr_opt{2};
          ke_hybrid_ideal_sim_rel_ms_ao = MSCore.MS.if_addr_opt{2};
          ke_hybrid_ideal_sim_rel_mi1_func = MakeInt.MI.func{1};
          ke_hybrid_ideal_sim_rel_mi1_in_guard = MakeInt.MI.in_guard{1};
          ke_hybrid_ideal_sim_rel_mi2_func = MakeInt.MI.func{2};
          ke_hybrid_ideal_sim_rel_mi2_in_guard = MakeInt.MI.in_guard{2}; |} /\
      m0{2} = m{2} /\
      r0{2} = None /\
      not_done{2} = true /\
      m0{1} = oget r0{1} /\
      not_done{1} = false /\
      (={m} /\
       ke_hybrid_ideal_sim_rel
         {| ke_hybrid_ideal_sim_rel_func = func';
             ke_hybrid_ideal_sim_rel_in_guard = in_guard';
             ke_hybrid_ideal_sim_rel_st_hs = KEHybrid._st{1};
             ke_hybrid_ideal_sim_rel_st_hslf = KEHybrid._self{1};
             ke_hybrid_ideal_sim_rel_st_is = UC_KEIdeal._st{2};
             ke_hybrid_ideal_sim_rel_st_islf = UC_KEIdeal._self{2};
             ke_hybrid_ideal_sim_rel_st_ss = UC_KESim._st{2};
             ke_hybrid_ideal_sim_rel_sim_ao = UC_KESim.if_addr_opt{2};
             ke_hybrid_ideal_sim_rel_ms_ao = MSCore.MS.if_addr_opt{2};
             ke_hybrid_ideal_sim_rel_mi1_func = MakeInt.MI.func{1};
             ke_hybrid_ideal_sim_rel_mi1_in_guard = MakeInt.MI.in_guard{1};
             ke_hybrid_ideal_sim_rel_mi2_func = MakeInt.MI.func{2};
             ke_hybrid_ideal_sim_rel_mi2_in_guard = MakeInt.MI.in_guard{2}; |}) /\
      main_guard MakeInt.MI.func{1} MakeInt.MI.in_guard{1} m{1}) /\
     ! MakeInt.MI.func{1} <= m{1}.`2.`1) /\
    0 < m{1}.`2.`2
     
 ).
 exlim r0{1} => r0L. 
     call{1} (MakeInt.MI_after_adv_to_env KEHybrid DummyAdv r0L).
     auto;progress;smt(eq_of_valid_da_to_env @UCListPO).
 rcondf{1} 0. auto;smt().
     inline{2} (1) invoke.
     sp 0 2.
 rcondf{2} 0.  auto;smt(@UCListPO mem_set mem_oflist mem_rangeset in_fsetU set1E in_fset1 mem_oflist oflist_cons mem_rangeset iota0 iota1 fset0U fsetU0 fsetUC in_fsetU set1E in_fset1 in_fsetU1 disjoint_with_union_implies_disjoint_with_first disjointP).
inline{2} (1) loop.
sp 0 3.
    rcondt{2} 0. auto;smt().
print main_guard.
rcondt{2} 0. auto;progress;smt(@UCListPO mem_set mem_oflist mem_rangeset in_fsetU set1E in_fset1 mem_oflist oflist_cons mem_rangeset iota0 iota1 fset0U fsetU0 fsetUC in_fsetU set1E in_fset1 in_fsetU1 disjoint_with_union_implies_disjoint_with_first disjointP).
inline{2} (1) invoke.
sp 0 2.
match None {2} 0. auto.
  rcondt{2} 0. auto.
sp 0 2.
  seq 0 1 : (
r2{2} =
    Some (epdp_da_to_env.`enc
      {| dte_n = m{2}.`2.`2; dte_pt = m{2}.`3; dte_tag = m{2}.`4; dte_u =
          m{2}.`5; |}) /\
    
    m2{2} = oget r2{2} /\
    
    not_done0{2} = false /\
    
    
    r0{1} =
    Some (epdp_da_to_env.`enc
      {| dte_n = m{1}.`2.`2; dte_pt = m{1}.`3; dte_tag = m{1}.`4; dte_u =
          m{1}.`5; |}) /\
    epdp_da_from_env.`dec m{1} = None /\
     state =
      {| ke_hybrid_ideal_sim_rel_func = func';
          ke_hybrid_ideal_sim_rel_in_guard = in_guard';
          ke_hybrid_ideal_sim_rel_st_hs = KEHybrid._st{1};
          ke_hybrid_ideal_sim_rel_st_hslf = KEHybrid._self{1};
          ke_hybrid_ideal_sim_rel_st_is = UC_KEIdeal._st{2};
          ke_hybrid_ideal_sim_rel_st_islf = UC_KEIdeal._self{2};
          ke_hybrid_ideal_sim_rel_st_ss = UC_KESim._st{2};
          ke_hybrid_ideal_sim_rel_sim_ao = UC_KESim.if_addr_opt{2};
          ke_hybrid_ideal_sim_rel_ms_ao = MSCore.MS.if_addr_opt{2};
          ke_hybrid_ideal_sim_rel_mi1_func = MakeInt.MI.func{1};
          ke_hybrid_ideal_sim_rel_mi1_in_guard = MakeInt.MI.in_guard{1};
          ke_hybrid_ideal_sim_rel_mi2_func = MakeInt.MI.func{2};
          ke_hybrid_ideal_sim_rel_mi2_in_guard = MakeInt.MI.in_guard{2}; |} /\
      not_done{2} = true /\
      m0{1} = oget r0{1} /\
      not_done{1} = false /\
      (={m} /\
       ke_hybrid_ideal_sim_rel
         {| ke_hybrid_ideal_sim_rel_func = func';
             ke_hybrid_ideal_sim_rel_in_guard = in_guard';
             ke_hybrid_ideal_sim_rel_st_hs = KEHybrid._st{1};
             ke_hybrid_ideal_sim_rel_st_hslf = KEHybrid._self{1};
             ke_hybrid_ideal_sim_rel_st_is = UC_KEIdeal._st{2};
             ke_hybrid_ideal_sim_rel_st_islf = UC_KEIdeal._self{2};
             ke_hybrid_ideal_sim_rel_st_ss = UC_KESim._st{2};
             ke_hybrid_ideal_sim_rel_sim_ao = UC_KESim.if_addr_opt{2};
             ke_hybrid_ideal_sim_rel_ms_ao = MSCore.MS.if_addr_opt{2};
             ke_hybrid_ideal_sim_rel_mi1_func = MakeInt.MI.func{1};
             ke_hybrid_ideal_sim_rel_mi1_in_guard = MakeInt.MI.in_guard{1};
             ke_hybrid_ideal_sim_rel_mi2_func = MakeInt.MI.func{2};
             ke_hybrid_ideal_sim_rel_mi2_in_guard = MakeInt.MI.in_guard{2}; |})

).
exlim r2{2} => r2R.
call{2} (MSCore.MS_after_adv_return UC_KESim DummyAdv r2R). auto;progress;smt(eq_of_valid_da_to_env @UCListPO).
rcondf{2} 0. auto.
    sp 0 2.
    seq 0 1 : (
  
  r0{2} =
  Some (epdp_da_to_env.`enc
    {| dte_n = m{2}.`2.`2; dte_pt = m{2}.`3; dte_tag = m{2}.`4; dte_u =
        m{2}.`5; |}) /\
  m0{2} = oget r0{2} /\
  
  r0{1} =
  Some (epdp_da_to_env.`enc
    {| dte_n = m{1}.`2.`2; dte_pt = m{1}.`3; dte_tag = m{1}.`4; dte_u =
        m{1}.`5; |}) /\
  m0{1} = oget r0{1} /\
  state =
  {| ke_hybrid_ideal_sim_rel_func = func'; ke_hybrid_ideal_sim_rel_in_guard =
      in_guard'; ke_hybrid_ideal_sim_rel_st_hs = KEHybrid._st{1};
      ke_hybrid_ideal_sim_rel_st_hslf = KEHybrid._self{1};
      ke_hybrid_ideal_sim_rel_st_is = UC_KEIdeal._st{2};
      ke_hybrid_ideal_sim_rel_st_islf = UC_KEIdeal._self{2};
      ke_hybrid_ideal_sim_rel_st_ss = UC_KESim._st{2};
      ke_hybrid_ideal_sim_rel_sim_ao = UC_KESim.if_addr_opt{2};
      ke_hybrid_ideal_sim_rel_ms_ao = MSCore.MS.if_addr_opt{2};
      ke_hybrid_ideal_sim_rel_mi1_func = MakeInt.MI.func{1};
      ke_hybrid_ideal_sim_rel_mi1_in_guard = MakeInt.MI.in_guard{1};
      ke_hybrid_ideal_sim_rel_mi2_func = MakeInt.MI.func{2};
      ke_hybrid_ideal_sim_rel_mi2_in_guard = MakeInt.MI.in_guard{2}; |} /\
  not_done{2} = false /\
  
  not_done{1} = false /\
  ={m} /\
  ke_hybrid_ideal_sim_rel
    {| ke_hybrid_ideal_sim_rel_func = func';
        ke_hybrid_ideal_sim_rel_in_guard = in_guard';
        ke_hybrid_ideal_sim_rel_st_hs = KEHybrid._st{1};
        ke_hybrid_ideal_sim_rel_st_hslf = KEHybrid._self{1};
        ke_hybrid_ideal_sim_rel_st_is = UC_KEIdeal._st{2};
        ke_hybrid_ideal_sim_rel_st_islf = UC_KEIdeal._self{2};
        ke_hybrid_ideal_sim_rel_st_ss = UC_KESim._st{2};
        ke_hybrid_ideal_sim_rel_sim_ao = UC_KESim.if_addr_opt{2};
        ke_hybrid_ideal_sim_rel_ms_ao = MSCore.MS.if_addr_opt{2};
        ke_hybrid_ideal_sim_rel_mi1_func = MakeInt.MI.func{1};
        ke_hybrid_ideal_sim_rel_mi1_in_guard = MakeInt.MI.in_guard{1};
        ke_hybrid_ideal_sim_rel_mi2_func = MakeInt.MI.func{2};
        ke_hybrid_ideal_sim_rel_mi2_in_guard = MakeInt.MI.in_guard{2}; |}

  ).
  exlim r0{2} => r0R.
   call{2} (MakeInt.MI_after_adv_to_env UC_KEIdeal (MSCore.MS(UC_KESim, DummyAdv)) r0R).
     auto;progress;smt(eq_of_valid_da_to_env @UCListPO).
      rcondf{2} 0. auto.
      skip. auto;progress;smt().
      if{1}; last first.
  sp 1 0.
      seq 1 0 :(
    r0{1} = r1{1} /\
    (epdp_da_from_env.`dec m{1} = Some x{1} /\
     
     r1{1} = None /\
     (state =
      {| ke_hybrid_ideal_sim_rel_func = func';
          ke_hybrid_ideal_sim_rel_in_guard = in_guard';
          ke_hybrid_ideal_sim_rel_st_hs = KEHybrid._st{1};
          ke_hybrid_ideal_sim_rel_st_hslf = KEHybrid._self{1};
          ke_hybrid_ideal_sim_rel_st_is = UC_KEIdeal._st{2};
          ke_hybrid_ideal_sim_rel_st_islf = UC_KEIdeal._self{2};
          ke_hybrid_ideal_sim_rel_st_ss = UC_KESim._st{2};
          ke_hybrid_ideal_sim_rel_sim_ao = UC_KESim.if_addr_opt{2};
          ke_hybrid_ideal_sim_rel_ms_ao = MSCore.MS.if_addr_opt{2};
          ke_hybrid_ideal_sim_rel_mi1_func = MakeInt.MI.func{1};
          ke_hybrid_ideal_sim_rel_mi1_in_guard = MakeInt.MI.in_guard{1};
          ke_hybrid_ideal_sim_rel_mi2_func = MakeInt.MI.func{2};
          ke_hybrid_ideal_sim_rel_mi2_in_guard = MakeInt.MI.in_guard{2}; |} /\
      m0{2} = m{2} /\
      r0{2} = None /\
      not_done{2} = true /\
      
      
      not_done{1} = false /\
      (={m} /\
       ke_hybrid_ideal_sim_rel
         {| ke_hybrid_ideal_sim_rel_func = func';
             ke_hybrid_ideal_sim_rel_in_guard = in_guard';
             ke_hybrid_ideal_sim_rel_st_hs = KEHybrid._st{1};
             ke_hybrid_ideal_sim_rel_st_hslf = KEHybrid._self{1};
             ke_hybrid_ideal_sim_rel_st_is = UC_KEIdeal._st{2};
             ke_hybrid_ideal_sim_rel_st_islf = UC_KEIdeal._self{2};
             ke_hybrid_ideal_sim_rel_st_ss = UC_KESim._st{2};
             ke_hybrid_ideal_sim_rel_sim_ao = UC_KESim.if_addr_opt{2};
             ke_hybrid_ideal_sim_rel_ms_ao = MSCore.MS.if_addr_opt{2};
             ke_hybrid_ideal_sim_rel_mi1_func = MakeInt.MI.func{1};
             ke_hybrid_ideal_sim_rel_mi1_in_guard = MakeInt.MI.in_guard{1};
             ke_hybrid_ideal_sim_rel_mi2_func = MakeInt.MI.func{2};
             ke_hybrid_ideal_sim_rel_mi2_in_guard = MakeInt.MI.in_guard{2}; |}) /\
      main_guard MakeInt.MI.func{1} MakeInt.MI.in_guard{1} m{1}) /\
     ! MakeInt.MI.func{1} <= m{1}.`2.`1) /\
    ! (0 < x{1}.`dfe_n /\
       x{1}.`dfe_pt <> env_root_port /\ ! adv <= x{1}.`dfe_pt.`1)
 ).
 call{1} (MakeInt.MI_after_adv_error KEHybrid DummyAdv).
auto;progress;smt().
     rcondf{1} 0. auto;smt().
 inline{2} (1) invoke  .
sp 0 2.
     rcondf{2} 0. 
     auto;progress;smt(@UCListPO _adv_pi_begin_gt0 mem_set mem_oflist mem_rangeset in_fsetU set1E in_fset1 mem_oflist oflist_cons mem_rangeset iota0 iota1 fset0U fsetU0 fsetUC in_fsetU set1E in_fset1 in_fsetU1 disjoint_with_union_implies_disjoint_with_first disjointP).
inline{2} (1) loop.
sp 0 3.
    rcondt{2} 0. auto;smt().
print main_guard.
rcondt{2} 0. auto;progress;smt(@UCListPO _adv_pi_begin_gt0 mem_set mem_oflist mem_rangeset in_fsetU set1E in_fset1 mem_oflist oflist_cons mem_rangeset iota0 iota1 fset0U fsetU0 fsetUC in_fsetU set1E in_fset1 in_fsetU1 disjoint_with_union_implies_disjoint_with_first disjointP).
inline{2} (1) invoke.
sp 0 2.
  match Some {2} 0. auto;progress;smt().
  rcondf{2} 0. auto;progress;smt().
sp 0 1.

  seq 0 1 :(
  r2{2} = None /\
    epdp_da_from_env.`dec m{2} = Some x{2} /\
    
    not_done0{2} = false /\
    m1{2} = m0{2} /\
    r1{2} = None /\
    r0{1} = r1{1} /\
    (epdp_da_from_env.`dec m{1} = Some x{1} /\
     r1{1} = None /\
     (state =
      {| ke_hybrid_ideal_sim_rel_func = func';
          ke_hybrid_ideal_sim_rel_in_guard = in_guard';
          ke_hybrid_ideal_sim_rel_st_hs = KEHybrid._st{1};
          ke_hybrid_ideal_sim_rel_st_hslf = KEHybrid._self{1};
          ke_hybrid_ideal_sim_rel_st_is = UC_KEIdeal._st{2};
          ke_hybrid_ideal_sim_rel_st_islf = UC_KEIdeal._self{2};
          ke_hybrid_ideal_sim_rel_st_ss = UC_KESim._st{2};
          ke_hybrid_ideal_sim_rel_sim_ao = UC_KESim.if_addr_opt{2};
          ke_hybrid_ideal_sim_rel_ms_ao = MSCore.MS.if_addr_opt{2};
          ke_hybrid_ideal_sim_rel_mi1_func = MakeInt.MI.func{1};
          ke_hybrid_ideal_sim_rel_mi1_in_guard = MakeInt.MI.in_guard{1};
          ke_hybrid_ideal_sim_rel_mi2_func = MakeInt.MI.func{2};
          ke_hybrid_ideal_sim_rel_mi2_in_guard = MakeInt.MI.in_guard{2}; |} /\
      m0{2} = m{2} /\
      r0{2} = None /\
      not_done{2} = true /\
      not_done{1} = false /\
      (={m} /\
       ke_hybrid_ideal_sim_rel
         {| ke_hybrid_ideal_sim_rel_func = func';
             ke_hybrid_ideal_sim_rel_in_guard = in_guard';
             ke_hybrid_ideal_sim_rel_st_hs = KEHybrid._st{1};
             ke_hybrid_ideal_sim_rel_st_hslf = KEHybrid._self{1};
             ke_hybrid_ideal_sim_rel_st_is = UC_KEIdeal._st{2};
             ke_hybrid_ideal_sim_rel_st_islf = UC_KEIdeal._self{2};
             ke_hybrid_ideal_sim_rel_st_ss = UC_KESim._st{2};
             ke_hybrid_ideal_sim_rel_sim_ao = UC_KESim.if_addr_opt{2};
             ke_hybrid_ideal_sim_rel_ms_ao = MSCore.MS.if_addr_opt{2};
             ke_hybrid_ideal_sim_rel_mi1_func = MakeInt.MI.func{1};
             ke_hybrid_ideal_sim_rel_mi1_in_guard = MakeInt.MI.in_guard{1};
             ke_hybrid_ideal_sim_rel_mi2_func = MakeInt.MI.func{2};
             ke_hybrid_ideal_sim_rel_mi2_in_guard = MakeInt.MI.in_guard{2}; |}) /\
      main_guard MakeInt.MI.func{1} MakeInt.MI.in_guard{1} m{1}) /\
     ! MakeInt.MI.func{1} <= m{1}.`2.`1) /\
    ! (0 < x{1}.`dfe_n /\
       x{1}.`dfe_pt <> env_root_port /\ ! adv <= x{1}.`dfe_pt.`1)

  ).
      call{2} (MSCore.MS_after_adv_error UC_KESim DummyAdv). auto;progress;smt().
  rcondf{2} 0. auto.
      sp 0 2.
      seq 0 1 :(
    
    r0{2} = None /\
    r0{1} = None /\
    state =
      {| ke_hybrid_ideal_sim_rel_func = func';
          ke_hybrid_ideal_sim_rel_in_guard = in_guard';
          ke_hybrid_ideal_sim_rel_st_hs = KEHybrid._st{1};
          ke_hybrid_ideal_sim_rel_st_hslf = KEHybrid._self{1};
          ke_hybrid_ideal_sim_rel_st_is = UC_KEIdeal._st{2};
          ke_hybrid_ideal_sim_rel_st_islf = UC_KEIdeal._self{2};
          ke_hybrid_ideal_sim_rel_st_ss = UC_KESim._st{2};
          ke_hybrid_ideal_sim_rel_sim_ao = UC_KESim.if_addr_opt{2};
          ke_hybrid_ideal_sim_rel_ms_ao = MSCore.MS.if_addr_opt{2};
          ke_hybrid_ideal_sim_rel_mi1_func = MakeInt.MI.func{1};
          ke_hybrid_ideal_sim_rel_mi1_in_guard = MakeInt.MI.in_guard{1};
          ke_hybrid_ideal_sim_rel_mi2_func = MakeInt.MI.func{2};
          ke_hybrid_ideal_sim_rel_mi2_in_guard = MakeInt.MI.in_guard{2}; |} /\
      not_done{2} = false /\
      not_done{1} = false /\
      (={m} /\
       ke_hybrid_ideal_sim_rel
         {| ke_hybrid_ideal_sim_rel_func = func';
             ke_hybrid_ideal_sim_rel_in_guard = in_guard';
             ke_hybrid_ideal_sim_rel_st_hs = KEHybrid._st{1};
             ke_hybrid_ideal_sim_rel_st_hslf = KEHybrid._self{1};
             ke_hybrid_ideal_sim_rel_st_is = UC_KEIdeal._st{2};
             ke_hybrid_ideal_sim_rel_st_islf = UC_KEIdeal._self{2};
             ke_hybrid_ideal_sim_rel_st_ss = UC_KESim._st{2};
             ke_hybrid_ideal_sim_rel_sim_ao = UC_KESim.if_addr_opt{2};
             ke_hybrid_ideal_sim_rel_ms_ao = MSCore.MS.if_addr_opt{2};
             ke_hybrid_ideal_sim_rel_mi1_func = MakeInt.MI.func{1};
             ke_hybrid_ideal_sim_rel_mi1_in_guard = MakeInt.MI.in_guard{1};
             ke_hybrid_ideal_sim_rel_mi2_func = MakeInt.MI.func{2};
             ke_hybrid_ideal_sim_rel_mi2_in_guard = MakeInt.MI.in_guard{2}; |})
    ).
  call{2} (MakeInt.MI_after_adv_error UC_KEIdeal (MSCore.MS(UC_KESim, DummyAdv))). auto;progress;smt().
        rcondf{2} 0. auto;smt(). auto;smt().
    print main_guard.
      sp 2 0.
    case (!MakeInt.MI.func{1} <= x{1}.`dfe_pt.`1). (*error*)
        seq 1 0 :(
    
    r0{1} = Some
      (UCBasicTypes.Adv, x{1}.`dfe_pt, (adv, x{1}.`dfe_n), x{1}.`dfe_tag,
        x{1}.`dfe_u) /\
    (epdp_da_from_env.`dec m{1} = Some x{1} /\
     m0{1} = oget r0{1} /\
     (state =
      {| ke_hybrid_ideal_sim_rel_func = func';
          ke_hybrid_ideal_sim_rel_in_guard = in_guard';
          ke_hybrid_ideal_sim_rel_st_hs = KEHybrid._st{1};
          ke_hybrid_ideal_sim_rel_st_hslf = KEHybrid._self{1};
          ke_hybrid_ideal_sim_rel_st_is = UC_KEIdeal._st{2};
          ke_hybrid_ideal_sim_rel_st_islf = UC_KEIdeal._self{2};
          ke_hybrid_ideal_sim_rel_st_ss = UC_KESim._st{2};
          ke_hybrid_ideal_sim_rel_sim_ao = UC_KESim.if_addr_opt{2};
          ke_hybrid_ideal_sim_rel_ms_ao = MSCore.MS.if_addr_opt{2};
          ke_hybrid_ideal_sim_rel_mi1_func = MakeInt.MI.func{1};
          ke_hybrid_ideal_sim_rel_mi1_in_guard = MakeInt.MI.in_guard{1};
          ke_hybrid_ideal_sim_rel_mi2_func = MakeInt.MI.func{2};
          ke_hybrid_ideal_sim_rel_mi2_in_guard = MakeInt.MI.in_guard{2}; |} /\
      m0{2} = m{2} /\
      r0{2} = None /\
      not_done{2} = true /\
      not_done{1} = false /\
      (={m} /\
       ke_hybrid_ideal_sim_rel
         {| ke_hybrid_ideal_sim_rel_func = func';
             ke_hybrid_ideal_sim_rel_in_guard = in_guard';
             ke_hybrid_ideal_sim_rel_st_hs = KEHybrid._st{1};
             ke_hybrid_ideal_sim_rel_st_hslf = KEHybrid._self{1};
             ke_hybrid_ideal_sim_rel_st_is = UC_KEIdeal._st{2};
             ke_hybrid_ideal_sim_rel_st_islf = UC_KEIdeal._self{2};
             ke_hybrid_ideal_sim_rel_st_ss = UC_KESim._st{2};
             ke_hybrid_ideal_sim_rel_sim_ao = UC_KESim.if_addr_opt{2};
             ke_hybrid_ideal_sim_rel_ms_ao = MSCore.MS.if_addr_opt{2};
             ke_hybrid_ideal_sim_rel_mi1_func = MakeInt.MI.func{1};
             ke_hybrid_ideal_sim_rel_mi1_in_guard = MakeInt.MI.in_guard{1};
             ke_hybrid_ideal_sim_rel_mi2_func = MakeInt.MI.func{2};
             ke_hybrid_ideal_sim_rel_mi2_in_guard = MakeInt.MI.in_guard{2}; |}) /\
      main_guard MakeInt.MI.func{1} MakeInt.MI.in_guard{1} m{1}) /\
     ! MakeInt.MI.func{1} <= m{1}.`2.`1) /\
    0 < x{1}.`dfe_n /\
    x{1}.`dfe_pt <> env_root_port /\ ! adv <= x{1}.`dfe_pt.`1 /\
  ! MakeInt.MI.func{1} <= x{1}.`dfe_pt.`1
      ).
      exlim r0{1} => r0L.
          call{1} (MakeInt.MI_after_adv_to_env KEHybrid DummyAdv  r0L). auto;progress;smt().
          rcondf{1} 0. auto.
      inline{2} (1) invoke.
sp 0 2.
          rcondf{2} 0. auto;smt(@UCListPO _adv_pi_begin_gt0 mem_set mem_oflist mem_rangeset in_fsetU set1E in_fset1 mem_oflist oflist_cons mem_rangeset iota0 iota1 fset0U fsetU0 fsetUC in_fsetU set1E in_fset1 in_fsetU1 disjoint_with_union_implies_disjoint_with_first disjointP).
inline{2} (1) loop.
          sp 0 3.
      rcondt{2} 0. auto.
          rcondt{2} 0. auto;progress;smt(valid_epdp_da_from_env eq_of_valid_da_from_env @UCListPO _adv_pi_begin_gt0 mem_set mem_oflist mem_rangeset in_fsetU set1E in_fset1 mem_oflist oflist_cons mem_rangeset iota0 iota1 fset0U fsetU0 fsetUC in_fsetU set1E in_fset1 in_fsetU1 disjoint_with_union_implies_disjoint_with_first disjointP).
inline{2} (1) invoke.
          sp 0 2.
          match Some {2} 0. auto;progress;smt().
      rcondt{2} 0. auto;smt(valid_epdp_da_from_env eq_of_valid_da_from_env @UCListPO _adv_pi_begin_gt0 mem_set mem_oflist mem_rangeset in_fsetU set1E in_fset1 mem_oflist oflist_cons mem_rangeset iota0 iota1 fset0U fsetU0 fsetUC in_fsetU set1E in_fset1 in_fsetU1 disjoint_with_union_implies_disjoint_with_first disjointP).
          sp 0 2.
          seq 0 1 :(
        r2{2} =
    Some
      (UCBasicTypes.Adv, x{2}.`dfe_pt, (adv, x{2}.`dfe_n), x{2}.`dfe_tag,
       x{2}.`dfe_u) /\
    
    epdp_da_from_env.`dec m{2} = Some x{2} /\
    m2{2} = oget r2{2}  /\
    not_done0{2} = false /\
    r1{2} = None /\
    r0{1} =
    Some
      (UCBasicTypes.Adv, x{1}.`dfe_pt, (adv, x{1}.`dfe_n), x{1}.`dfe_tag,
       x{1}.`dfe_u) /\
    (epdp_da_from_env.`dec m{1} = Some x{1} /\
     m0{1} = oget r0{1} /\
     (state =
      {| ke_hybrid_ideal_sim_rel_func = func';
          ke_hybrid_ideal_sim_rel_in_guard = in_guard';
          ke_hybrid_ideal_sim_rel_st_hs = KEHybrid._st{1};
          ke_hybrid_ideal_sim_rel_st_hslf = KEHybrid._self{1};
          ke_hybrid_ideal_sim_rel_st_is = UC_KEIdeal._st{2};
          ke_hybrid_ideal_sim_rel_st_islf = UC_KEIdeal._self{2};
          ke_hybrid_ideal_sim_rel_st_ss = UC_KESim._st{2};
          ke_hybrid_ideal_sim_rel_sim_ao = UC_KESim.if_addr_opt{2};
          ke_hybrid_ideal_sim_rel_ms_ao = MSCore.MS.if_addr_opt{2};
          ke_hybrid_ideal_sim_rel_mi1_func = MakeInt.MI.func{1};
          ke_hybrid_ideal_sim_rel_mi1_in_guard = MakeInt.MI.in_guard{1};
          ke_hybrid_ideal_sim_rel_mi2_func = MakeInt.MI.func{2};
          ke_hybrid_ideal_sim_rel_mi2_in_guard = MakeInt.MI.in_guard{2}; |} /\
      m0{2} = m{2} /\
      r0{2} = None /\
      not_done{2} = true /\
      not_done{1} = false /\
      (={m} /\
       ke_hybrid_ideal_sim_rel
         {| ke_hybrid_ideal_sim_rel_func = func';
             ke_hybrid_ideal_sim_rel_in_guard = in_guard';
             ke_hybrid_ideal_sim_rel_st_hs = KEHybrid._st{1};
             ke_hybrid_ideal_sim_rel_st_hslf = KEHybrid._self{1};
             ke_hybrid_ideal_sim_rel_st_is = UC_KEIdeal._st{2};
             ke_hybrid_ideal_sim_rel_st_islf = UC_KEIdeal._self{2};
             ke_hybrid_ideal_sim_rel_st_ss = UC_KESim._st{2};
             ke_hybrid_ideal_sim_rel_sim_ao = UC_KESim.if_addr_opt{2};
             ke_hybrid_ideal_sim_rel_ms_ao = MSCore.MS.if_addr_opt{2};
             ke_hybrid_ideal_sim_rel_mi1_func = MakeInt.MI.func{1};
             ke_hybrid_ideal_sim_rel_mi1_in_guard = MakeInt.MI.in_guard{1};
             ke_hybrid_ideal_sim_rel_mi2_func = MakeInt.MI.func{2};
             ke_hybrid_ideal_sim_rel_mi2_in_guard = MakeInt.MI.in_guard{2}; |}) /\
      main_guard MakeInt.MI.func{1} MakeInt.MI.in_guard{1} m{1}) /\
     ! MakeInt.MI.func{1} <= m{1}.`2.`1) /\
    0 < x{1}.`dfe_n /\
    x{1}.`dfe_pt <> env_root_port /\ ! adv <= x{1}.`dfe_pt.`1 /\
  ! MakeInt.MI.func{1} <= x{1}.`dfe_pt.`1

 ).
 exlim r2{2} => r2R.
     call{2} (MSCore.MS_after_adv_return UC_KESim  DummyAdv r2R). auto;progress;smt(valid_epdp_da_from_env eq_of_valid_da_from_env @UCListPO _adv_pi_begin_gt0 mem_set mem_oflist mem_rangeset in_fsetU set1E in_fset1 mem_oflist oflist_cons mem_rangeset iota0 iota1 fset0U fsetU0 fsetUC in_fsetU set1E in_fset1 in_fsetU1 disjoint_with_union_implies_disjoint_with_first disjointP).
     rcondf{2} 0. auto.
 sp 0 2.
     seq 0 1 :(
    r0{2} =
    Some
      (UCBasicTypes.Adv, x{2}.`dfe_pt, (adv, x{2}.`dfe_n), x{2}.`dfe_tag,
       x{2}.`dfe_u) /\
    epdp_da_from_env.`dec m{2} = Some x{2} /\
    r0{1} =
    Some
      (UCBasicTypes.Adv, x{1}.`dfe_pt, (adv, x{1}.`dfe_n), x{1}.`dfe_tag,
       x{1}.`dfe_u) /\
    (epdp_da_from_env.`dec m{1} = Some x{1} /\
     m0{1} = oget r0{1} /\
     (state =
      {| ke_hybrid_ideal_sim_rel_func = func';
          ke_hybrid_ideal_sim_rel_in_guard = in_guard';
          ke_hybrid_ideal_sim_rel_st_hs = KEHybrid._st{1};
          ke_hybrid_ideal_sim_rel_st_hslf = KEHybrid._self{1};
          ke_hybrid_ideal_sim_rel_st_is = UC_KEIdeal._st{2};
          ke_hybrid_ideal_sim_rel_st_islf = UC_KEIdeal._self{2};
          ke_hybrid_ideal_sim_rel_st_ss = UC_KESim._st{2};
          ke_hybrid_ideal_sim_rel_sim_ao = UC_KESim.if_addr_opt{2};
          ke_hybrid_ideal_sim_rel_ms_ao = MSCore.MS.if_addr_opt{2};
          ke_hybrid_ideal_sim_rel_mi1_func = MakeInt.MI.func{1};
          ke_hybrid_ideal_sim_rel_mi1_in_guard = MakeInt.MI.in_guard{1};
          ke_hybrid_ideal_sim_rel_mi2_func = MakeInt.MI.func{2};
          ke_hybrid_ideal_sim_rel_mi2_in_guard = MakeInt.MI.in_guard{2}; |} /\
      
      not_done{2} = false /\
      not_done{1} = false /\
      (={m} /\
       ke_hybrid_ideal_sim_rel
         {| ke_hybrid_ideal_sim_rel_func = func';
             ke_hybrid_ideal_sim_rel_in_guard = in_guard';
             ke_hybrid_ideal_sim_rel_st_hs = KEHybrid._st{1};
             ke_hybrid_ideal_sim_rel_st_hslf = KEHybrid._self{1};
             ke_hybrid_ideal_sim_rel_st_is = UC_KEIdeal._st{2};
             ke_hybrid_ideal_sim_rel_st_islf = UC_KEIdeal._self{2};
             ke_hybrid_ideal_sim_rel_st_ss = UC_KESim._st{2};
             ke_hybrid_ideal_sim_rel_sim_ao = UC_KESim.if_addr_opt{2};
             ke_hybrid_ideal_sim_rel_ms_ao = MSCore.MS.if_addr_opt{2};
             ke_hybrid_ideal_sim_rel_mi1_func = MakeInt.MI.func{1};
             ke_hybrid_ideal_sim_rel_mi1_in_guard = MakeInt.MI.in_guard{1};
             ke_hybrid_ideal_sim_rel_mi2_func = MakeInt.MI.func{2};
             ke_hybrid_ideal_sim_rel_mi2_in_guard = MakeInt.MI.in_guard{2}; |}) /\
      main_guard MakeInt.MI.func{1} MakeInt.MI.in_guard{1} m{1}) /\
     ! MakeInt.MI.func{1} <= m{1}.`2.`1) /\
    0 < x{1}.`dfe_n /\
    x{1}.`dfe_pt <> env_root_port /\
    ! adv <= x{1}.`dfe_pt.`1 /\ ! MakeInt.MI.func{1} <= x{1}.`dfe_pt.`1
 ).
 exlim r0{2} => r0R.
          call{2} (MakeInt.MI_after_adv_to_env UC_KEIdeal (MSCore.MS(UC_KESim, DummyAdv)) r0R). auto;progress;smt(valid_epdp_da_from_env eq_of_valid_da_from_env @UCListPO _adv_pi_begin_gt0 mem_set mem_oflist mem_rangeset in_fsetU set1E in_fset1 mem_oflist oflist_cons mem_rangeset iota0 iota1 fset0U fsetU0 fsetUC in_fsetU set1E in_fset1 in_fsetU1 disjoint_with_union_implies_disjoint_with_first disjointP).
     rcondf{2} 0. auto. auto;smt().
     simplify.

     seq 1 0 :(
   r0{1} =
     Some
       (UCBasicTypes.Adv, x{1}.`dfe_pt, (adv, x{1}.`dfe_n), x{1}.`dfe_tag,
        x{1}.`dfe_u) /\
     
     epdp_da_from_env.`dec m{1} = Some x{1} /\
      m0{1} = oget r0{1} /\
      
      state =
       {| ke_hybrid_ideal_sim_rel_func = func';
           ke_hybrid_ideal_sim_rel_in_guard = in_guard';
           ke_hybrid_ideal_sim_rel_st_hs = KEHybrid._st{1};
           ke_hybrid_ideal_sim_rel_st_hslf = KEHybrid._self{1};
           ke_hybrid_ideal_sim_rel_st_is = UC_KEIdeal._st{2};
           ke_hybrid_ideal_sim_rel_st_islf = UC_KEIdeal._self{2};
           ke_hybrid_ideal_sim_rel_st_ss = UC_KESim._st{2};
           ke_hybrid_ideal_sim_rel_sim_ao = UC_KESim.if_addr_opt{2};
           ke_hybrid_ideal_sim_rel_ms_ao = MSCore.MS.if_addr_opt{2};
           ke_hybrid_ideal_sim_rel_mi1_func = MakeInt.MI.func{1};
           ke_hybrid_ideal_sim_rel_mi1_in_guard = MakeInt.MI.in_guard{1};
           ke_hybrid_ideal_sim_rel_mi2_func = MakeInt.MI.func{2};
           ke_hybrid_ideal_sim_rel_mi2_in_guard = MakeInt.MI.in_guard{2}; |} /\
       m0{2} = m{2} /\
       r0{2} = None /\
       not_done{2} = true /\
       
       
       not_done{1} = true /\
       (={m} /\
        ke_hybrid_ideal_sim_rel
          {| ke_hybrid_ideal_sim_rel_func = func';
              ke_hybrid_ideal_sim_rel_in_guard = in_guard';
              ke_hybrid_ideal_sim_rel_st_hs = KEHybrid._st{1};
              ke_hybrid_ideal_sim_rel_st_hslf = KEHybrid._self{1};
              ke_hybrid_ideal_sim_rel_st_is = UC_KEIdeal._st{2};
              ke_hybrid_ideal_sim_rel_st_islf = UC_KEIdeal._self{2};
              ke_hybrid_ideal_sim_rel_st_ss = UC_KESim._st{2};
              ke_hybrid_ideal_sim_rel_sim_ao = UC_KESim.if_addr_opt{2};
              ke_hybrid_ideal_sim_rel_ms_ao = MSCore.MS.if_addr_opt{2};
              ke_hybrid_ideal_sim_rel_mi1_func = MakeInt.MI.func{1};
              ke_hybrid_ideal_sim_rel_mi1_in_guard = MakeInt.MI.in_guard{1};
              ke_hybrid_ideal_sim_rel_mi2_func = MakeInt.MI.func{2};
              ke_hybrid_ideal_sim_rel_mi2_in_guard = MakeInt.MI.in_guard{2}; |}) /\
       main_guard MakeInt.MI.func{1} MakeInt.MI.in_guard{1} m{1} /\
      ! MakeInt.MI.func{1} <= m{1}.`2.`1 /\
     0 < x{1}.`dfe_n /\
     x{1}.`dfe_pt <> env_root_port /\ ! adv <= x{1}.`dfe_pt.`1 /\
  MakeInt.MI.func{1} <= x{1}.`dfe_pt.`1
      ).
      exlim r0{1} => r0L.
          call{1} (MakeInt.MI_after_adv_to_func KEHybrid DummyAdv r0L). auto;progress;smt().
          rcondt{1} 0. auto.
          rcondt{1} 0. auto.
          inline{1} (1) invoke.
      sp 2 0.
          match  KEHybridStateWaitAdv1 {1} 0. auto;smt().
      inline {2} (1) invoke.
          sp 0 2. rcondf{2} 0.
      
          auto;progress;smt(valid_epdp_da_from_env eq_of_valid_da_from_env @UCListPO _adv_pi_begin_gt0 mem_set mem_oflist mem_rangeset in_fsetU set1E in_fset1 mem_oflist oflist_cons mem_rangeset iota0 iota1 fset0U fsetU0 fsetUC in_fsetU set1E in_fset1 in_fsetU1 disjoint_with_union_implies_disjoint_with_first disjointP).

      inline{2} (1) loop.
sp 0 3.      
          rcondt{2} 0. auto.
      rcondt{2} 0. auto;progress;smt(valid_epdp_da_from_env eq_of_valid_da_from_env @UCListPO _adv_pi_begin_gt0 mem_set mem_oflist mem_rangeset in_fsetU set1E in_fset1 mem_oflist oflist_cons mem_rangeset iota0 iota1 fset0U fsetU0 fsetUC in_fsetU set1E in_fset1 in_fsetU1 disjoint_with_union_implies_disjoint_with_first disjointP).
inline{2} (1) invoke.
sp 0 2.
match Some {2} 0. auto;smt(valid_epdp_da_from_env eq_of_valid_da_from_env @UCListPO _adv_pi_begin_gt0 mem_set mem_oflist mem_rangeset in_fsetU set1E in_fset1 mem_oflist oflist_cons mem_rangeset iota0 iota1 fset0U fsetU0 fsetUC in_fsetU set1E in_fset1 in_fsetU1 disjoint_with_union_implies_disjoint_with_first disjointP).
rcondt{2} 0. auto;smt(valid_epdp_da_from_env eq_of_valid_da_from_env @UCListPO _adv_pi_begin_gt0 mem_set mem_oflist mem_rangeset in_fsetU set1E in_fset1 mem_oflist oflist_cons mem_rangeset iota0 iota1 fset0U fsetU0 fsetUC in_fsetU set1E in_fset1 in_fsetU1 disjoint_with_union_implies_disjoint_with_first disjointP).
sp 0 2.
          seq 0 1 :(
         r2{2} =
    Some
      (UCBasicTypes.Adv, x{2}.`dfe_pt, (adv, x{2}.`dfe_n), x{2}.`dfe_tag,
       x{2}.`dfe_u) /\
    
    epdp_da_from_env.`dec m{2} = Some x{2} /\
    
    m2{2} = oget r2{2} /\
    
    not_done0{2} = true /\
    
    r1{2} = None /\
    KEHybrid._st{1} = KEHybridStateWaitAdv1 pt1{!1} pt2{!1} q1{!1} /\
    m2{1} = m0{1} /\
    r2{1} = None /\
    r0{1} =
    Some
      (UCBasicTypes.Adv, x{1}.`dfe_pt, (adv, x{1}.`dfe_n), x{1}.`dfe_tag,
       x{1}.`dfe_u) /\
    epdp_da_from_env.`dec m{1} = Some x{1} /\
    m0{1} = oget r0{1} /\
    state =
    {| ke_hybrid_ideal_sim_rel_func = func';
        ke_hybrid_ideal_sim_rel_in_guard = in_guard';
        ke_hybrid_ideal_sim_rel_st_hs = KEHybrid._st{1};
        ke_hybrid_ideal_sim_rel_st_hslf = KEHybrid._self{1};
        ke_hybrid_ideal_sim_rel_st_is = UC_KEIdeal._st{2};
        ke_hybrid_ideal_sim_rel_st_islf = UC_KEIdeal._self{2};
        ke_hybrid_ideal_sim_rel_st_ss = UC_KESim._st{2};
        ke_hybrid_ideal_sim_rel_sim_ao = UC_KESim.if_addr_opt{2};
        ke_hybrid_ideal_sim_rel_ms_ao = MSCore.MS.if_addr_opt{2};
        ke_hybrid_ideal_sim_rel_mi1_func = MakeInt.MI.func{1};
        ke_hybrid_ideal_sim_rel_mi1_in_guard = MakeInt.MI.in_guard{1};
        ke_hybrid_ideal_sim_rel_mi2_func = MakeInt.MI.func{2};
        ke_hybrid_ideal_sim_rel_mi2_in_guard = MakeInt.MI.in_guard{2}; |} /\
    m0{2} = m{2} /\
    r0{2} = None /\
    not_done{2} = true /\
    not_done{1} = true /\
    (={m} /\
     ke_hybrid_ideal_sim_rel
       {| ke_hybrid_ideal_sim_rel_func = func';
           ke_hybrid_ideal_sim_rel_in_guard = in_guard';
           ke_hybrid_ideal_sim_rel_st_hs = KEHybrid._st{1};
           ke_hybrid_ideal_sim_rel_st_hslf = KEHybrid._self{1};
           ke_hybrid_ideal_sim_rel_st_is = UC_KEIdeal._st{2};
           ke_hybrid_ideal_sim_rel_st_islf = UC_KEIdeal._self{2};
           ke_hybrid_ideal_sim_rel_st_ss = UC_KESim._st{2};
           ke_hybrid_ideal_sim_rel_sim_ao = UC_KESim.if_addr_opt{2};
           ke_hybrid_ideal_sim_rel_ms_ao = MSCore.MS.if_addr_opt{2};
           ke_hybrid_ideal_sim_rel_mi1_func = MakeInt.MI.func{1};
           ke_hybrid_ideal_sim_rel_mi1_in_guard = MakeInt.MI.in_guard{1};
           ke_hybrid_ideal_sim_rel_mi2_func = MakeInt.MI.func{2};
           ke_hybrid_ideal_sim_rel_mi2_in_guard = MakeInt.MI.in_guard{2}; |}) /\
    main_guard MakeInt.MI.func{1} MakeInt.MI.in_guard{1} m{1} /\
    ! MakeInt.MI.func{1} <= m{1}.`2.`1 /\
    0 < x{1}.`dfe_n /\
    x{1}.`dfe_pt <> env_root_port /\
    ! adv <= x{1}.`dfe_pt.`1 /\ MakeInt.MI.func{1} <= x{1}.`dfe_pt.`1
   ).
   exlim r2{2} => r2R.
       call{2} (MSCore.MS_after_adv_continue UC_KESim DummyAdv r2R).
   auto;progress;smt(valid_epdp_da_from_env eq_of_valid_da_from_env @UCListPO _adv_pi_begin_gt0 mem_set mem_oflist mem_rangeset in_fsetU set1E in_fset1 mem_oflist oflist_cons mem_rangeset iota0 iota1 fset0U fsetU0 fsetUC in_fsetU set1E in_fset1 in_fsetU1 disjoint_with_union_implies_disjoint_with_first disjointP).
       rcondt{2} 0. auto.
       rcondf{2} 0. auto;smt(valid_epdp_da_from_env eq_of_valid_da_from_env @UCListPO _adv_pi_begin_gt0 mem_set mem_oflist mem_rangeset in_fsetU set1E in_fset1 mem_oflist oflist_cons mem_rangeset iota0 iota1 fset0U fsetU0 fsetUC in_fsetU set1E in_fset1 in_fsetU1 disjoint_with_union_implies_disjoint_with_first disjointP).
   inline{2} (1) invoke.
       sp 0 2.
       rcondf{2} 0. auto;smt().
       match _State_SIM_WaitAdv1 {2} 0. auto;smt().
       if{1}.
   match{1}.
rcondf{2} 0. auto;smt().   
sp 0 1.
       seq 0 1 :(
     
    r2{2} = None /\
    UC_Fw1.UC_FwAdv.epdp__fw_ok.`dec m2{1} = None /\
    (UC_KESim._st{2} = _State_SIM_WaitAdv1 q1{!2} /\
     epdp_da_from_env.`dec m{2} = Some x{2} /\
     not_done0{2} = false /\
     r1{2} = None /\
     KEHybrid._st{1} = KEHybridStateWaitAdv1 pt1{!1} pt2{!1} q1{!1} /\
     m2{1} = m0{1} /\
     r2{1} = None /\
     r0{1} =
     Some
       (UCBasicTypes.Adv, x{1}.`dfe_pt, (adv, x{1}.`dfe_n), x{1}.`dfe_tag,
        x{1}.`dfe_u) /\
     epdp_da_from_env.`dec m{1} = Some x{1} /\
     m0{1} = oget r0{1} /\
     state =
     {| ke_hybrid_ideal_sim_rel_func = func';
         ke_hybrid_ideal_sim_rel_in_guard = in_guard';
         ke_hybrid_ideal_sim_rel_st_hs = KEHybrid._st{1};
         ke_hybrid_ideal_sim_rel_st_hslf = KEHybrid._self{1};
         ke_hybrid_ideal_sim_rel_st_is = UC_KEIdeal._st{2};
         ke_hybrid_ideal_sim_rel_st_islf = UC_KEIdeal._self{2};
         ke_hybrid_ideal_sim_rel_st_ss = UC_KESim._st{2};
         ke_hybrid_ideal_sim_rel_sim_ao = UC_KESim.if_addr_opt{2};
         ke_hybrid_ideal_sim_rel_ms_ao = MSCore.MS.if_addr_opt{2};
         ke_hybrid_ideal_sim_rel_mi1_func = MakeInt.MI.func{1};
         ke_hybrid_ideal_sim_rel_mi1_in_guard = MakeInt.MI.in_guard{1};
         ke_hybrid_ideal_sim_rel_mi2_func = MakeInt.MI.func{2};
         ke_hybrid_ideal_sim_rel_mi2_in_guard = MakeInt.MI.in_guard{2}; |} /\
     m0{2} = m{2} /\
     r0{2} = None /\
     not_done{2} = true /\
     not_done{1} = true /\
     (={m} /\
      ke_hybrid_ideal_sim_rel
        {| ke_hybrid_ideal_sim_rel_func = func';
            ke_hybrid_ideal_sim_rel_in_guard = in_guard';
            ke_hybrid_ideal_sim_rel_st_hs = KEHybrid._st{1};
            ke_hybrid_ideal_sim_rel_st_hslf = KEHybrid._self{1};
            ke_hybrid_ideal_sim_rel_st_is = UC_KEIdeal._st{2};
            ke_hybrid_ideal_sim_rel_st_islf = UC_KEIdeal._self{2};
            ke_hybrid_ideal_sim_rel_st_ss = UC_KESim._st{2};
            ke_hybrid_ideal_sim_rel_sim_ao = UC_KESim.if_addr_opt{2};
            ke_hybrid_ideal_sim_rel_ms_ao = MSCore.MS.if_addr_opt{2};
            ke_hybrid_ideal_sim_rel_mi1_func = MakeInt.MI.func{1};
            ke_hybrid_ideal_sim_rel_mi1_in_guard = MakeInt.MI.in_guard{1};
            ke_hybrid_ideal_sim_rel_mi2_func = MakeInt.MI.func{2};
            ke_hybrid_ideal_sim_rel_mi2_in_guard = MakeInt.MI.in_guard{2}; |}) /\
     main_guard MakeInt.MI.func{1} MakeInt.MI.in_guard{1} m{1} /\
     ! MakeInt.MI.func{1} <= m{1}.`2.`1 /\
     0 < x{1}.`dfe_n /\
     x{1}.`dfe_pt <> env_root_port /\
     ! adv <= x{1}.`dfe_pt.`1 /\ MakeInt.MI.func{1} <= x{1}.`dfe_pt.`1) /\
    m2{1}.`1 = UCBasicTypes.Adv /\
    m2{1}.`3.`1 = adv /\ _addr_Fw1 KEHybrid._self{1} = m2{1}.`2.`1
     ).
         call{2} (MSCore.MS_after_core_error UC_KESim DummyAdv).
     auto;progress;smt().
         rcondf{2} 0. auto.
         sp 1 2.
         seq 1 1 :(
       r0{2} = None /\
    
      r0{1} = None /\
      
      UC_KESim._st{2} = _State_SIM_WaitAdv1 q1{!2} /\
       KEHybrid._st{1} = KEHybridStateWaitAdv1 pt1{!1} pt2{!1} q1{!1} /\
       state =
       {| ke_hybrid_ideal_sim_rel_func = func';
           ke_hybrid_ideal_sim_rel_in_guard = in_guard';
           ke_hybrid_ideal_sim_rel_st_hs = KEHybrid._st{1};
           ke_hybrid_ideal_sim_rel_st_hslf = KEHybrid._self{1};
           ke_hybrid_ideal_sim_rel_st_is = UC_KEIdeal._st{2};
           ke_hybrid_ideal_sim_rel_st_islf = UC_KEIdeal._self{2};
           ke_hybrid_ideal_sim_rel_st_ss = UC_KESim._st{2};
           ke_hybrid_ideal_sim_rel_sim_ao = UC_KESim.if_addr_opt{2};
           ke_hybrid_ideal_sim_rel_ms_ao = MSCore.MS.if_addr_opt{2};
           ke_hybrid_ideal_sim_rel_mi1_func = MakeInt.MI.func{1};
           ke_hybrid_ideal_sim_rel_mi1_in_guard = MakeInt.MI.in_guard{1};
           ke_hybrid_ideal_sim_rel_mi2_func = MakeInt.MI.func{2};
           ke_hybrid_ideal_sim_rel_mi2_in_guard = MakeInt.MI.in_guard{2}; |} /\
       not_done{2} = false /\
       not_done{1} = false /\
      
        ke_hybrid_ideal_sim_rel
          {| ke_hybrid_ideal_sim_rel_func = func';
              ke_hybrid_ideal_sim_rel_in_guard = in_guard';
              ke_hybrid_ideal_sim_rel_st_hs = KEHybrid._st{1};
              ke_hybrid_ideal_sim_rel_st_hslf = KEHybrid._self{1};
              ke_hybrid_ideal_sim_rel_st_is = UC_KEIdeal._st{2};
              ke_hybrid_ideal_sim_rel_st_islf = UC_KEIdeal._self{2};
              ke_hybrid_ideal_sim_rel_st_ss = UC_KESim._st{2};
              ke_hybrid_ideal_sim_rel_sim_ao = UC_KESim.if_addr_opt{2};
              ke_hybrid_ideal_sim_rel_ms_ao = MSCore.MS.if_addr_opt{2};
              ke_hybrid_ideal_sim_rel_mi1_func = MakeInt.MI.func{1};
              ke_hybrid_ideal_sim_rel_mi1_in_guard = MakeInt.MI.in_guard{1};
              ke_hybrid_ideal_sim_rel_mi2_func = MakeInt.MI.func{2};
              ke_hybrid_ideal_sim_rel_mi2_in_guard = MakeInt.MI.in_guard{2}; |} 
        ).
            call{1} (MakeInt.MI_after_func_error KEHybrid DummyAdv).
            call{2} (MakeInt.MI_after_adv_error UC_KEIdeal (MSCore.MS(UC_KESim, DummyAdv))).
            auto;progress;smt().
            rcondf{1} 0. auto.
            rcondf{2} 0. auto. auto.
            rcondt{2} 0. auto;progress;smt().
            inline _State_KEHybridStateWaitAdv1__Fw1_FwAdv__fw_ok.
            inline UC_KESim._State_SIM_WaitAdv1__KEReal__Fw1__FwAdv__fw_ok.
            sp 4 2.
            rcondt{1} 0. auto;smt().
        seq 1 1 : (#pre /\ ={q2}).
rnd. auto;smt().
sp 0 4.
            seq 0 1 :(
            exists (_st_R : _state_SIM),
          _st_R = _State_SIM_WaitAdv1 q1{!2} /\
    r2{2} = Some (UC_KEI2S.epdp__ke_sim_rsp.`enc
            {| UC_KEI2S.ke_sim_rsp___func = oget UC_KESim.if_addr_opt{2};
              UC_KEI2S.ke_sim_rsp___adv = adv; |}) /\
    q10{2} = q1{!2} /\
     pt10{1} = pt1{!1} /\
     pt20{1} = pt2{!1} /\
     q10{1} = q1{!1} /\
     _r{1} = None /\
     m2{2}=oget r2{2} /\
      not_done0{2} = false /\
      r1{2} = None /\
              KEHybrid._st{1} = KEHybridStateWaitAdv1 pt1{!1} pt2{!1} q1{!1} /\
          UC_KESim._st{2} = _State_SIM_WaitReq2 q10{2} q2{2} /\
      m2{1} = m0{1} /\
      r2{1} = None /\
      r0{1} =
      Some
        (UCBasicTypes.Adv, x{1}.`dfe_pt, (adv, x{1}.`dfe_n), x{1}.`dfe_tag,
         x{1}.`dfe_u) /\
      epdp_da_from_env.`dec m{1} = Some x{1} /\
      m0{1} = oget r0{1} /\
      state =
      {| ke_hybrid_ideal_sim_rel_func = func';
          ke_hybrid_ideal_sim_rel_in_guard = in_guard';
          ke_hybrid_ideal_sim_rel_st_hs = KEHybrid._st{1};
          ke_hybrid_ideal_sim_rel_st_hslf = KEHybrid._self{1};
          ke_hybrid_ideal_sim_rel_st_is = UC_KEIdeal._st{2};
          ke_hybrid_ideal_sim_rel_st_islf = UC_KEIdeal._self{2};
          ke_hybrid_ideal_sim_rel_st_ss =  _st_R;
          ke_hybrid_ideal_sim_rel_sim_ao = UC_KESim.if_addr_opt{2};
          ke_hybrid_ideal_sim_rel_ms_ao = MSCore.MS.if_addr_opt{2};
          ke_hybrid_ideal_sim_rel_mi1_func = MakeInt.MI.func{1};
          ke_hybrid_ideal_sim_rel_mi1_in_guard = MakeInt.MI.in_guard{1};
          ke_hybrid_ideal_sim_rel_mi2_func = MakeInt.MI.func{2};
          ke_hybrid_ideal_sim_rel_mi2_in_guard = MakeInt.MI.in_guard{2}; |} /\
      m0{2} = m{2} /\
      r0{2} = None /\
      not_done{2} = true /\
      not_done{1} = true /\
      ={m} /\
       ke_hybrid_ideal_sim_rel
         {| ke_hybrid_ideal_sim_rel_func = func';
             ke_hybrid_ideal_sim_rel_in_guard = in_guard';
             ke_hybrid_ideal_sim_rel_st_hs = KEHybrid._st{1};
             ke_hybrid_ideal_sim_rel_st_hslf = KEHybrid._self{1};
             ke_hybrid_ideal_sim_rel_st_is = UC_KEIdeal._st{2};
             ke_hybrid_ideal_sim_rel_st_islf = UC_KEIdeal._self{2};
             ke_hybrid_ideal_sim_rel_st_ss =  _st_R;
             ke_hybrid_ideal_sim_rel_sim_ao = UC_KESim.if_addr_opt{2};
             ke_hybrid_ideal_sim_rel_ms_ao = MSCore.MS.if_addr_opt{2};
             ke_hybrid_ideal_sim_rel_mi1_func = MakeInt.MI.func{1};
             ke_hybrid_ideal_sim_rel_mi1_in_guard = MakeInt.MI.in_guard{1};
             ke_hybrid_ideal_sim_rel_mi2_func = MakeInt.MI.func{2};
             ke_hybrid_ideal_sim_rel_mi2_in_guard = MakeInt.MI.in_guard{2}; |} /\
    ={q2}          
  ).
  exlim r2{2} => r2R.
      call{2} (MSCore.MS_after_core_return UC_KESim DummyAdv r2R).
  auto;progress;smt().
      rcondf{2} 0. auto.
      sp 0 2.
      seq 0 1 :(
   
      r0{2} =
      Some (UC_KEI2S.epdp__ke_sim_rsp.`enc
        {| UC_KEI2S.ke_sim_rsp___func = oget UC_KESim.if_addr_opt{2};
            UC_KEI2S.ke_sim_rsp___adv = adv; |}) /\
      q10{2} = q1{!2} /\
      pt10{1} = pt1{!1} /\
      pt20{1} = pt2{!1} /\
      q10{1} = q1{!1} /\
      _r{1} = None /\
      KEHybrid._st{1} = KEHybridStateWaitAdv1 pt1{!1} pt2{!1} q1{!1} /\
      UC_KESim._st{2} = _State_SIM_WaitReq2 q10{2} q2{2} /\
      m2{1} = m0{1} /\
      r2{1} = None /\
      r0{1} =
      Some
        (UCBasicTypes.Adv, x{1}.`dfe_pt, (adv, x{1}.`dfe_n), x{1}.`dfe_tag,
         x{1}.`dfe_u) /\
      epdp_da_from_env.`dec m{1} = Some x{1} /\
      m0{1} = oget r0{1} /\
      state =
      {| ke_hybrid_ideal_sim_rel_func = func';
          ke_hybrid_ideal_sim_rel_in_guard = in_guard';
          ke_hybrid_ideal_sim_rel_st_hs = KEHybrid._st{1};
          ke_hybrid_ideal_sim_rel_st_hslf = KEHybrid._self{1};
          ke_hybrid_ideal_sim_rel_st_is = UC_KEIdeal._st{2};
          ke_hybrid_ideal_sim_rel_st_islf = UC_KEIdeal._self{2};
          ke_hybrid_ideal_sim_rel_st_ss = _State_SIM_WaitAdv1 q1{!2};
          ke_hybrid_ideal_sim_rel_sim_ao = UC_KESim.if_addr_opt{2};
          ke_hybrid_ideal_sim_rel_ms_ao = MSCore.MS.if_addr_opt{2};
          ke_hybrid_ideal_sim_rel_mi1_func = MakeInt.MI.func{1};
          ke_hybrid_ideal_sim_rel_mi1_in_guard = MakeInt.MI.in_guard{1};
          ke_hybrid_ideal_sim_rel_mi2_func = MakeInt.MI.func{2};
          ke_hybrid_ideal_sim_rel_mi2_in_guard = MakeInt.MI.in_guard{2}; |} /\
      m0{2} = oget r0{2} /\
      not_done{2} = true /\
      not_done{1} = true /\
      ={m} /\
      ke_hybrid_ideal_sim_rel
        {| ke_hybrid_ideal_sim_rel_func = func';
            ke_hybrid_ideal_sim_rel_in_guard = in_guard';
            ke_hybrid_ideal_sim_rel_st_hs = KEHybrid._st{1};
            ke_hybrid_ideal_sim_rel_st_hslf = KEHybrid._self{1};
            ke_hybrid_ideal_sim_rel_st_is = UC_KEIdeal._st{2};
            ke_hybrid_ideal_sim_rel_st_islf = UC_KEIdeal._self{2};
            ke_hybrid_ideal_sim_rel_st_ss = _State_SIM_WaitAdv1 q1{!2};
            ke_hybrid_ideal_sim_rel_sim_ao = UC_KESim.if_addr_opt{2};
            ke_hybrid_ideal_sim_rel_ms_ao = MSCore.MS.if_addr_opt{2};
            ke_hybrid_ideal_sim_rel_mi1_func = MakeInt.MI.func{1};
            ke_hybrid_ideal_sim_rel_mi1_in_guard = MakeInt.MI.in_guard{1};
            ke_hybrid_ideal_sim_rel_mi2_func = MakeInt.MI.func{2};
            ke_hybrid_ideal_sim_rel_mi2_in_guard = MakeInt.MI.in_guard{2}; |} /\
      ={q2}
    ).
    exlim r0{2} => r0R.
        call{2} (MakeInt.MI_after_adv_to_func UC_KEIdeal (MSCore.MS(UC_KESim, DummyAdv)) r0R).
    auto;progress;smt(@UCListPO _adv_pi_begin_gt0).
rcondt{2} 0. auto.
        rcondt{2} 0. auto;smt(@UCListPO).
        inline{2} (1) invoke.
        sp 0 2.
        rcondt{2} 0. auto;progress;smt(UC_KEI2S.valid_epdp__ke_sim_rsp).
inline{2} (1) parties.
sp 0 2.
match _State_IF_WaitSim1 {2} 0. auto;progress;smt().
        match Some {2} 0. auto;progress;smt().
        inline UC_KEIdeal._State_IF_WaitSim1__KEI2S__ke_sim_rsp.
        sp 0 3.
    seq 1 1 : (#pre /\ q3{1} = q{2}).
        rnd. auto;smt().
        rcondt{2} 0. auto; smt().
        sp 4 5.
        seq 1 1 :(
      pt10{2} = pt1{!2} /\
  pt20{2} = pt2{!2} /\
    r0{2} =
    Some (UC_KEDir.Pt2.epdp__ke_rsp1.`enc
        {| UC_KEDir.Pt2.ke_rsp1___func = UC_KEIdeal._self{2};
          UC_KEDir.Pt2.ke_rsp1__pt2 = pt20{2};
          UC_KEDir.Pt2.ke_rsp1__pt1 = pt10{2};
          UC_KEDir.Pt2.ke_rsp1__k = g ^ q{2}; |}) /\
    UC_KEIdeal._st{2} = _State_IF_WaitReq2 pt10{2} pt20{2} q{2} /\
      r0{1} =
      Some (UC_KEDir.Pt2.epdp__ke_rsp1.`enc
        {| UC_KEDir.Pt2.ke_rsp1___func = KEHybrid._self{1};
          UC_KEDir.Pt2.ke_rsp1__pt2 = pt20{1};
          UC_KEDir.Pt2.ke_rsp1__pt1 = pt10{1};
          UC_KEDir.Pt2.ke_rsp1__k = g ^ q3{1}; |}) /\
      KEHybrid._st{1} =
      KEHybridStateWaitReq2 pt10{1} pt20{1} q10{1} q2{1} q3{1} /\
       q10{2} = q1{!2} /\
       pt10{1} = pt1{!1} /\
       pt20{1} = pt2{!1} /\
       q10{1} = q1{!1} /\
       UC_KESim._st{2} = _State_SIM_WaitReq2 q10{2} q2{2} /\
       state =
       {| ke_hybrid_ideal_sim_rel_func = func';
           ke_hybrid_ideal_sim_rel_in_guard = in_guard';
           ke_hybrid_ideal_sim_rel_st_hs = KEHybridStateWaitAdv1 pt1{!1} pt2{!1} q1{!1};
           ke_hybrid_ideal_sim_rel_st_hslf = KEHybrid._self{1};
           ke_hybrid_ideal_sim_rel_st_is = _State_IF_WaitSim1 pt1{!2} pt2{!2};
           ke_hybrid_ideal_sim_rel_st_islf = UC_KEIdeal._self{2};
           ke_hybrid_ideal_sim_rel_st_ss = _State_SIM_WaitAdv1 q1{!2};
           ke_hybrid_ideal_sim_rel_sim_ao = UC_KESim.if_addr_opt{2};
           ke_hybrid_ideal_sim_rel_ms_ao = MSCore.MS.if_addr_opt{2};
           ke_hybrid_ideal_sim_rel_mi1_func = MakeInt.MI.func{1};
           ke_hybrid_ideal_sim_rel_mi1_in_guard = MakeInt.MI.in_guard{1};
           ke_hybrid_ideal_sim_rel_mi2_func = MakeInt.MI.func{2};
           ke_hybrid_ideal_sim_rel_mi2_in_guard = MakeInt.MI.in_guard{2}; |} /\
       not_done{2} = false /\
       not_done{1} = false /\
       ke_hybrid_ideal_sim_rel
         {| ke_hybrid_ideal_sim_rel_func = func';
             ke_hybrid_ideal_sim_rel_in_guard = in_guard';
             ke_hybrid_ideal_sim_rel_st_hs = KEHybrid._st{1};
             ke_hybrid_ideal_sim_rel_st_hslf = KEHybrid._self{1};
             ke_hybrid_ideal_sim_rel_st_is = UC_KEIdeal._st{2};
             ke_hybrid_ideal_sim_rel_st_islf = UC_KEIdeal._self{2};
             ke_hybrid_ideal_sim_rel_st_ss = UC_KESim._st{2};
             ke_hybrid_ideal_sim_rel_sim_ao = UC_KESim.if_addr_opt{2};
             ke_hybrid_ideal_sim_rel_ms_ao = MSCore.MS.if_addr_opt{2};
             ke_hybrid_ideal_sim_rel_mi1_func = MakeInt.MI.func{1};
             ke_hybrid_ideal_sim_rel_mi1_in_guard = MakeInt.MI.in_guard{1};
             ke_hybrid_ideal_sim_rel_mi2_func = MakeInt.MI.func{2};
             ke_hybrid_ideal_sim_rel_mi2_in_guard = MakeInt.MI.in_guard{2}; |} /\
       ={q2} /\
      q3{1} = q{2}
      ).
      exlim r0{1} => r0L.
          call{1} (MakeInt.MI_after_func_to_env KEHybrid DummyAdv r0L).
      exlim r0{2} => r0R.
          call{2} (MakeInt.MI_after_func_to_env UC_KEIdeal (MSCore.MS(UC_KESim, DummyAdv)) r0R).
          skip. move=> &1 &2 P.
have H :  ke_hybrid_ideal_sim_rel2
     {| ke_hybrid_ideal_sim_rel_func = func';
         ke_hybrid_ideal_sim_rel_in_guard = in_guard';
         ke_hybrid_ideal_sim_rel_st_hs = KEHybrid._st{1};
         ke_hybrid_ideal_sim_rel_st_hslf = KEHybrid._self{1};
         ke_hybrid_ideal_sim_rel_st_is = UC_KEIdeal._st{2};
         ke_hybrid_ideal_sim_rel_st_islf = UC_KEIdeal._self{2};
         ke_hybrid_ideal_sim_rel_st_ss = UC_KESim._st{2};
         ke_hybrid_ideal_sim_rel_sim_ao = UC_KESim.if_addr_opt{2};
         ke_hybrid_ideal_sim_rel_ms_ao = MSCore.MS.if_addr_opt{2};
         ke_hybrid_ideal_sim_rel_mi1_func = MakeInt.MI.func{1};
         ke_hybrid_ideal_sim_rel_mi1_in_guard = MakeInt.MI.in_guard{1};
         ke_hybrid_ideal_sim_rel_mi2_func = MakeInt.MI.func{2};
       ke_hybrid_ideal_sim_rel_mi2_in_guard = MakeInt.MI.in_guard{2}; |}
       pt1{1} pt2{1} q1{1} q2{1} q3{1}. progress;smt(@UCListPO).
       smt(KEHybridIdealSimRel2).
       rcondf{1} 0. auto.
       rcondf{2} 0. auto.
       auto;progress;smt().
     
     sp 1 0.
       seq 1 0 :(
 r0{1} = None /\
    (UC_KESim._st{2} = _State_SIM_WaitAdv1 q1{!2} /\
     _m{2} = m2{2} /\
     _r{2} = None /\
     r2{2} =
     Some
       (UCBasicTypes.Adv, x{2}.`dfe_pt, (adv, x{2}.`dfe_n), x{2}.`dfe_tag,
        x{2}.`dfe_u) /\
     epdp_da_from_env.`dec m{2} = Some x{2} /\
     m2{2} = oget r2{2} /\
     not_done0{2} = true /\
     r1{2} = None /\
     KEHybrid._st{1} = KEHybridStateWaitAdv1 pt1{!1} pt2{!1} q1{!1} /\
     
     r2{1} = None /\
    
     state =
     {| ke_hybrid_ideal_sim_rel_func = func';
         ke_hybrid_ideal_sim_rel_in_guard = in_guard';
         ke_hybrid_ideal_sim_rel_st_hs = KEHybrid._st{1};
         ke_hybrid_ideal_sim_rel_st_hslf = KEHybrid._self{1};
         ke_hybrid_ideal_sim_rel_st_is = UC_KEIdeal._st{2};
         ke_hybrid_ideal_sim_rel_st_islf = UC_KEIdeal._self{2};
         ke_hybrid_ideal_sim_rel_st_ss = UC_KESim._st{2};
         ke_hybrid_ideal_sim_rel_sim_ao = UC_KESim.if_addr_opt{2};
         ke_hybrid_ideal_sim_rel_ms_ao = MSCore.MS.if_addr_opt{2};
         ke_hybrid_ideal_sim_rel_mi1_func = MakeInt.MI.func{1};
         ke_hybrid_ideal_sim_rel_mi1_in_guard = MakeInt.MI.in_guard{1};
         ke_hybrid_ideal_sim_rel_mi2_func = MakeInt.MI.func{2};
         ke_hybrid_ideal_sim_rel_mi2_in_guard = MakeInt.MI.in_guard{2}; |} /\
     m0{2} = m{2} /\
     r0{2} = None /\
     not_done{2} = true /\
     not_done{1} = false /\
     (={m} /\
      ke_hybrid_ideal_sim_rel
        {| ke_hybrid_ideal_sim_rel_func = func';
            ke_hybrid_ideal_sim_rel_in_guard = in_guard';
            ke_hybrid_ideal_sim_rel_st_hs = KEHybrid._st{1};
            ke_hybrid_ideal_sim_rel_st_hslf = KEHybrid._self{1};
            ke_hybrid_ideal_sim_rel_st_is = UC_KEIdeal._st{2};
            ke_hybrid_ideal_sim_rel_st_islf = UC_KEIdeal._self{2};
            ke_hybrid_ideal_sim_rel_st_ss = UC_KESim._st{2};
            ke_hybrid_ideal_sim_rel_sim_ao = UC_KESim.if_addr_opt{2};
            ke_hybrid_ideal_sim_rel_ms_ao = MSCore.MS.if_addr_opt{2};
            ke_hybrid_ideal_sim_rel_mi1_func = MakeInt.MI.func{1};
            ke_hybrid_ideal_sim_rel_mi1_in_guard = MakeInt.MI.in_guard{1};
            ke_hybrid_ideal_sim_rel_mi2_func = MakeInt.MI.func{2};
            ke_hybrid_ideal_sim_rel_mi2_in_guard = MakeInt.MI.in_guard{2}; |}) /\
     main_guard MakeInt.MI.func{1} MakeInt.MI.in_guard{1} m{1} /\
     ! MakeInt.MI.func{1} <= m{1}.`2.`1 /\
     0 < x{1}.`dfe_n /\
     x{1}.`dfe_pt <> env_root_port /\
     ! adv <= x{1}.`dfe_pt.`1 /\ MakeInt.MI.func{1} <= x{1}.`dfe_pt.`1) /\
    ! (m2{2}.`1 = UCBasicTypes.Adv /\
       m2{2}.`3.`1 = adv /\ _addr_Fw1 KEHybrid._self{1} = m2{2}.`2.`1)

     ).
         call{1} (MakeInt.MI_after_func_error KEHybrid DummyAdv).
     auto;progress;smt().
     rcondf{1} 0. auto.
         rcondf{2} 0. auto;smt().
sp 0 1.
         seq 0 1 :(
       r2{2} = None /\
    r0{1} = None /\
    UC_KESim._st{2} = _State_SIM_WaitAdv1 q1{!2} /\ 
     
     epdp_da_from_env.`dec m{2} = Some x{2} /\
     not_done0{2} = false /\
     r1{2} = None /\
     KEHybrid._st{1} = KEHybridStateWaitAdv1 pt1{!1} pt2{!1} q1{!1} /\
     r2{1} = None /\
     state =
     {| ke_hybrid_ideal_sim_rel_func = func';
         ke_hybrid_ideal_sim_rel_in_guard = in_guard';
         ke_hybrid_ideal_sim_rel_st_hs = KEHybrid._st{1};
         ke_hybrid_ideal_sim_rel_st_hslf = KEHybrid._self{1};
         ke_hybrid_ideal_sim_rel_st_is = UC_KEIdeal._st{2};
         ke_hybrid_ideal_sim_rel_st_islf = UC_KEIdeal._self{2};
         ke_hybrid_ideal_sim_rel_st_ss = UC_KESim._st{2};
         ke_hybrid_ideal_sim_rel_sim_ao = UC_KESim.if_addr_opt{2};
         ke_hybrid_ideal_sim_rel_ms_ao = MSCore.MS.if_addr_opt{2};
         ke_hybrid_ideal_sim_rel_mi1_func = MakeInt.MI.func{1};
         ke_hybrid_ideal_sim_rel_mi1_in_guard = MakeInt.MI.in_guard{1};
         ke_hybrid_ideal_sim_rel_mi2_func = MakeInt.MI.func{2};
         ke_hybrid_ideal_sim_rel_mi2_in_guard = MakeInt.MI.in_guard{2}; |} /\
     m0{2} = m{2} /\
     r0{2} = None /\
     not_done{2} = true /\
     not_done{1} = false /\
     (={m} /\
      ke_hybrid_ideal_sim_rel
        {| ke_hybrid_ideal_sim_rel_func = func';
            ke_hybrid_ideal_sim_rel_in_guard = in_guard';
            ke_hybrid_ideal_sim_rel_st_hs = KEHybrid._st{1};
            ke_hybrid_ideal_sim_rel_st_hslf = KEHybrid._self{1};
            ke_hybrid_ideal_sim_rel_st_is = UC_KEIdeal._st{2};
            ke_hybrid_ideal_sim_rel_st_islf = UC_KEIdeal._self{2};
            ke_hybrid_ideal_sim_rel_st_ss = UC_KESim._st{2};
            ke_hybrid_ideal_sim_rel_sim_ao = UC_KESim.if_addr_opt{2};
            ke_hybrid_ideal_sim_rel_ms_ao = MSCore.MS.if_addr_opt{2};
            ke_hybrid_ideal_sim_rel_mi1_func = MakeInt.MI.func{1};
            ke_hybrid_ideal_sim_rel_mi1_in_guard = MakeInt.MI.in_guard{1};
            ke_hybrid_ideal_sim_rel_mi2_func = MakeInt.MI.func{2};
            ke_hybrid_ideal_sim_rel_mi2_in_guard = MakeInt.MI.in_guard{2}; |}) /\
     main_guard MakeInt.MI.func{1} MakeInt.MI.in_guard{1} m{1} /\
     ! MakeInt.MI.func{1} <= m{1}.`2.`1 

     ).
         call{2} (MSCore.MS_after_core_error UC_KESim DummyAdv). auto;progress;smt().
     rcondf{2} 0. auto.
sp 0 2.
         seq 0 1 :(
    r0{2} = None /\
    r0{1} = None /\
    UC_KESim._st{2} = _State_SIM_WaitAdv1 q1{!2} /\
    epdp_da_from_env.`dec m{2} = Some x{2} /\
    KEHybrid._st{1} = KEHybridStateWaitAdv1 pt1{!1} pt2{!1} q1{!1} /\
    state =
    {| ke_hybrid_ideal_sim_rel_func = func';
        ke_hybrid_ideal_sim_rel_in_guard = in_guard';
        ke_hybrid_ideal_sim_rel_st_hs = KEHybrid._st{1};
        ke_hybrid_ideal_sim_rel_st_hslf = KEHybrid._self{1};
        ke_hybrid_ideal_sim_rel_st_is = UC_KEIdeal._st{2};
        ke_hybrid_ideal_sim_rel_st_islf = UC_KEIdeal._self{2};
        ke_hybrid_ideal_sim_rel_st_ss = UC_KESim._st{2};
        ke_hybrid_ideal_sim_rel_sim_ao = UC_KESim.if_addr_opt{2};
        ke_hybrid_ideal_sim_rel_ms_ao = MSCore.MS.if_addr_opt{2};
        ke_hybrid_ideal_sim_rel_mi1_func = MakeInt.MI.func{1};
        ke_hybrid_ideal_sim_rel_mi1_in_guard = MakeInt.MI.in_guard{1};
        ke_hybrid_ideal_sim_rel_mi2_func = MakeInt.MI.func{2};
        ke_hybrid_ideal_sim_rel_mi2_in_guard = MakeInt.MI.in_guard{2}; |} /\
    not_done{2} = false /\
    not_done{1} = false /\
    (={m} /\
     ke_hybrid_ideal_sim_rel
       {| ke_hybrid_ideal_sim_rel_func = func';
           ke_hybrid_ideal_sim_rel_in_guard = in_guard';
           ke_hybrid_ideal_sim_rel_st_hs = KEHybrid._st{1};
           ke_hybrid_ideal_sim_rel_st_hslf = KEHybrid._self{1};
           ke_hybrid_ideal_sim_rel_st_is = UC_KEIdeal._st{2};
           ke_hybrid_ideal_sim_rel_st_islf = UC_KEIdeal._self{2};
           ke_hybrid_ideal_sim_rel_st_ss = UC_KESim._st{2};
           ke_hybrid_ideal_sim_rel_sim_ao = UC_KESim.if_addr_opt{2};
           ke_hybrid_ideal_sim_rel_ms_ao = MSCore.MS.if_addr_opt{2};
           ke_hybrid_ideal_sim_rel_mi1_func = MakeInt.MI.func{1};
           ke_hybrid_ideal_sim_rel_mi1_in_guard = MakeInt.MI.in_guard{1};
           ke_hybrid_ideal_sim_rel_mi2_func = MakeInt.MI.func{2};
           ke_hybrid_ideal_sim_rel_mi2_in_guard = MakeInt.MI.in_guard{2}; |}) /\
    main_guard MakeInt.MI.func{1} MakeInt.MI.in_guard{1} m{1} /\
    ! MakeInt.MI.func{1} <= m{1}.`2.`1

   ).
   call{2} (MakeInt.MI_after_adv_error UC_KEIdeal (MSCore.MS(UC_KESim, DummyAdv))).
auto;progress;smt().
       rcondf{2} 0. auto.
       auto.

   move => pt1 pt2 q1 q2 q3 ke_hybrid_ideal_sim_rel2_st.
       rcondt{1} 0. auto.
       rcondt{2} 0. auto.
   if. auto;smt().
       inline{1} (1) invoke.
       sp 2 0.
       match KEHybridStateWaitReq2 {1} 0. auto;smt().
       if{1}.
   inline{2} (1) invoke.
     sp 0 2.
   rcondt{2} 0. auto;progress;smt().
   inline{2} (1) parties.
     sp 0 2.
     match _State_IF_WaitReq2 {2} 0. auto;smt().
 match. auto;smt(). auto;smt().
       sp 1 2.
       seq 1 1 :(
    r0{2} = None /\
      r0{1} = None /\
      UC_KEDir.Pt2.epdp__ke_req2.`dec m{1} = None /\
      UC_KEDir.Pt2.epdp__ke_req2.`dec m{2} = None /\
      UC_KEIdeal._st{2} = _State_IF_WaitReq2 pt1{!2} pt2{!2} q{2} /\
      (KEHybrid._st{1} =
       KEHybridStateWaitReq2 pt1{!1} pt2{!1} q1{!1} q2{!1} q3{!1} /\
       (state =
        {| ke_hybrid_ideal_sim_rel_func = func';
            ke_hybrid_ideal_sim_rel_in_guard = in_guard';
            ke_hybrid_ideal_sim_rel_st_hs = KEHybrid._st{1};
            ke_hybrid_ideal_sim_rel_st_hslf = KEHybrid._self{1};
            ke_hybrid_ideal_sim_rel_st_is = UC_KEIdeal._st{2};
            ke_hybrid_ideal_sim_rel_st_islf = UC_KEIdeal._self{2};
            ke_hybrid_ideal_sim_rel_st_ss = UC_KESim._st{2};
            ke_hybrid_ideal_sim_rel_sim_ao = UC_KESim.if_addr_opt{2};
            ke_hybrid_ideal_sim_rel_ms_ao = MSCore.MS.if_addr_opt{2};
            ke_hybrid_ideal_sim_rel_mi1_func = MakeInt.MI.func{1};
            ke_hybrid_ideal_sim_rel_mi1_in_guard = MakeInt.MI.in_guard{1};
            ke_hybrid_ideal_sim_rel_mi2_func = MakeInt.MI.func{2};
            ke_hybrid_ideal_sim_rel_mi2_in_guard = MakeInt.MI.in_guard{2}; |} /\
        not_done{2} = false /\
        not_done{1} = false /\
        (={m} /\
         ke_hybrid_ideal_sim_rel
           {| ke_hybrid_ideal_sim_rel_func = func';
               ke_hybrid_ideal_sim_rel_in_guard = in_guard';
               ke_hybrid_ideal_sim_rel_st_hs = KEHybrid._st{1};
               ke_hybrid_ideal_sim_rel_st_hslf = KEHybrid._self{1};
               ke_hybrid_ideal_sim_rel_st_is = UC_KEIdeal._st{2};
               ke_hybrid_ideal_sim_rel_st_islf = UC_KEIdeal._self{2};
               ke_hybrid_ideal_sim_rel_st_ss = UC_KESim._st{2};
               ke_hybrid_ideal_sim_rel_sim_ao = UC_KESim.if_addr_opt{2};
               ke_hybrid_ideal_sim_rel_ms_ao = MSCore.MS.if_addr_opt{2};
               ke_hybrid_ideal_sim_rel_mi1_func = MakeInt.MI.func{1};
               ke_hybrid_ideal_sim_rel_mi1_in_guard = MakeInt.MI.in_guard{1};
               ke_hybrid_ideal_sim_rel_mi2_func = MakeInt.MI.func{2};
               ke_hybrid_ideal_sim_rel_mi2_in_guard = MakeInt.MI.in_guard{2}; |}) /\
        main_guard MakeInt.MI.func{1} MakeInt.MI.in_guard{1} m{1}) /\
       MakeInt.MI.func{1} <= m{1}.`2.`1) /\
      m{1}.`1 = Dir /\
      envport KEHybrid._self{1} m{1}.`3 /\
      m{1}.`2 = _extport_Pt2 KEHybrid._self{1}
 ).
     call{1} (MakeInt.MI_after_func_error KEHybrid DummyAdv).
 call{2} (MakeInt.MI_after_func_error UC_KEIdeal (MSCore.MS(UC_KESim, DummyAdv))).

     auto;progress;smt().
     rcondf{1} 0. auto.
     rcondf{2} 0. auto.
 auto;progress;smt().

 move => _x _x0.
     inline _State_KEHybridStateWaitReq2__KEDir__Pt2__ke_req2.
     inline _State_IF_WaitReq2__KEDir__Pt2__ke_req2.
 sp 9 5.
     if. auto;smt().
sp 5 0.
     seq 1 0 :(
    u{1} = epdp_key_univ.`enc (g ^ q20{1}) /\
    KEHybrid._st{1} =
    KEHybridStateWaitAdv2 pt10{1} pt20{1} q10{1} q20{1} q30{1} /\
    r0{1} = Some (UC_Fw2.UC_FwAdv.epdp__fw_obs.`enc
     {| UC_Fw2.UC_FwAdv.fw_obs___func = _addr_Fw2 KEHybrid._self{1};
       UC_Fw2.UC_FwAdv.fw_obs___adv = adv;
       UC_Fw2.UC_FwAdv.fw_obs__pt1 = _pt1{1};
       UC_Fw2.UC_FwAdv.fw_obs__pt2 = _pt2{1};
       UC_Fw2.UC_FwAdv.fw_obs__u = u{1}; |}) /\
    m0{1} = oget r0{1} /\
    (pt10{2} = pt1{!2} /\
     pt20{2} = pt2{!2} /\
     q0{2} = q{2} /\
     pt2'{2} = _x0.`UC_KEDir.Pt2.ke_req2__pt2 /\
     _r0{2} = None /\
     pt10{1} = pt1{!1} /\
     pt20{1} = pt2{!1} /\
     pt2'{1} = _x.`UC_KEDir.Pt2.ke_req2__pt2 /\
     q10{1} = q1{!1} /\
     q20{1} = q2{!1} /\
     q30{1} = q3{!1} /\
     _pt1{1} = _intport_Pt2 KEHybrid._self{1} /\
     _pt2{1} = _intport_Pt1 KEHybrid._self{1} /\
     UC_KEDir.Pt2.epdp__ke_req2.`dec m{1} = Some _x /\
      UC_KEDir.Pt2.epdp__ke_req2.`dec m{2} = Some _x0 /\
      _x = _x0 /\
     UC_KEIdeal._st{2} = _State_IF_WaitReq2 pt1{!2} pt2{!2} q{2} /\
     _m{2} = m1{2} /\
     _r{2} = None /\
     m1{2} = m0{2} /\
     r1{2} = None /\
     (
      (state =
       {| ke_hybrid_ideal_sim_rel_func = func';
           ke_hybrid_ideal_sim_rel_in_guard = in_guard';
           ke_hybrid_ideal_sim_rel_st_hs = KEHybridStateWaitReq2 pt1{!1} pt2{!1} q1{!1} q2{!1} q3{!1};
           ke_hybrid_ideal_sim_rel_st_hslf = KEHybrid._self{1};
           ke_hybrid_ideal_sim_rel_st_is = UC_KEIdeal._st{2};
           ke_hybrid_ideal_sim_rel_st_islf = UC_KEIdeal._self{2};
           ke_hybrid_ideal_sim_rel_st_ss = UC_KESim._st{2};
           ke_hybrid_ideal_sim_rel_sim_ao = UC_KESim.if_addr_opt{2};
           ke_hybrid_ideal_sim_rel_ms_ao = MSCore.MS.if_addr_opt{2};
           ke_hybrid_ideal_sim_rel_mi1_func = MakeInt.MI.func{1};
           ke_hybrid_ideal_sim_rel_mi1_in_guard = MakeInt.MI.in_guard{1};
           ke_hybrid_ideal_sim_rel_mi2_func = MakeInt.MI.func{2};
           ke_hybrid_ideal_sim_rel_mi2_in_guard = MakeInt.MI.in_guard{2}; |} /\
       m0{2} = m{2} /\
       r0{2} = None /\
       not_done{2} = true /\
       not_done{1} = true /\
       (={m} /\
        ke_hybrid_ideal_sim_rel
          {| ke_hybrid_ideal_sim_rel_func = func';
              ke_hybrid_ideal_sim_rel_in_guard = in_guard';
              ke_hybrid_ideal_sim_rel_st_hs = KEHybridStateWaitReq2 pt1{!1} pt2{!1} q1{!1} q2{!1} q3{!1};
              ke_hybrid_ideal_sim_rel_st_hslf = KEHybrid._self{1};
              ke_hybrid_ideal_sim_rel_st_is = UC_KEIdeal._st{2};
              ke_hybrid_ideal_sim_rel_st_islf = UC_KEIdeal._self{2};
              ke_hybrid_ideal_sim_rel_st_ss = UC_KESim._st{2};
              ke_hybrid_ideal_sim_rel_sim_ao = UC_KESim.if_addr_opt{2};
              ke_hybrid_ideal_sim_rel_ms_ao = MSCore.MS.if_addr_opt{2};
              ke_hybrid_ideal_sim_rel_mi1_func = MakeInt.MI.func{1};
              ke_hybrid_ideal_sim_rel_mi1_in_guard = MakeInt.MI.in_guard{1};
              ke_hybrid_ideal_sim_rel_mi2_func = MakeInt.MI.func{2};
              ke_hybrid_ideal_sim_rel_mi2_in_guard = MakeInt.MI.in_guard{2}; |}) /\
       main_guard MakeInt.MI.func{1} MakeInt.MI.in_guard{1} m{1}) /\
      MakeInt.MI.func{1} <= m{1}.`2.`1) /\
     m{1}.`1 = Dir /\
     envport KEHybrid._self{1} m{1}.`3 /\
     m{1}.`2 = _extport_Pt2 KEHybrid._self{1}) /\
    pt2'{1} = pt20{1}

 ). 
 exlim r0{1} => r0L.
     call{1} (MakeInt.MI_after_func_to_adv KEHybrid DummyAdv r0L).
 auto;progress;smt(_adv_pi_begin_gt0 @UCListPO).

rcondt{1} 0. auto.
     rcondf{1} 0. auto;smt(@UCListPO).
 inline{1} (1) invoke.
sp 2 0.
match None {1} 0. auto;smt(eq_of_valid_da_from_env).
rcondt{1} 0. auto;smt(UC_Fw2.UC_FwAdv.eq_of_valid__fw_obs _adv_pi_begin_gt0).
     sp 2 0.
 print UC_Fw2.
     seq 1 0 :(
    r0{1} =
    Some (epdp_da_to_env.`enc
     {| dte_n = _adv_pi_begin + 2;
       dte_pt = (_addr_Fw2 KEHybrid._self{1},UC_Fw2.UC_FwAdv.pi);
       dte_tag = UC_Fw2.UC_FwAdv._tag__fw_obs;
       dte_u = (epdp_tuple3_univ (epdp_port_univ) (epdp_port_univ) (Top.UCEncoding.epdp_id)).`enc
(_pt1{1}, _pt2{1}, u{1}); |}) /\
    m0{1} = oget r0{1} /\
    u{1} = epdp_key_univ.`enc (g ^ q20{1}) /\
    KEHybrid._st{1} =
    KEHybridStateWaitAdv2 pt10{1} pt20{1} q10{1} q20{1} q30{1} /\
    
    (pt10{2} = pt1{!2} /\
     pt20{2} = pt2{!2} /\
     q0{2} = q{2} /\
     pt2'{2} = _x0.`UC_KEDir.Pt2.ke_req2__pt2 /\
     _r0{2} = None /\
     pt10{1} = pt1{!1} /\
     pt20{1} = pt2{!1} /\
     pt2'{1} = _x.`UC_KEDir.Pt2.ke_req2__pt2 /\
     q10{1} = q1{!1} /\
     q20{1} = q2{!1} /\
     q30{1} = q3{!1} /\
     _pt1{1} = _intport_Pt2 KEHybrid._self{1} /\
     _pt2{1} = _intport_Pt1 KEHybrid._self{1} /\
     UC_KEDir.Pt2.epdp__ke_req2.`dec m{1} = Some _x /\
     UC_KEDir.Pt2.epdp__ke_req2.`dec m{2} = Some _x0 /\
     _x = _x0 /\
     UC_KEIdeal._st{2} = _State_IF_WaitReq2 pt1{!2} pt2{!2} q{2} /\
     _m{2} = m1{2} /\
     _r{2} = None /\
     m1{2} = m0{2} /\
     r1{2} = None /\
     ((state =
       {| ke_hybrid_ideal_sim_rel_func = func';
           ke_hybrid_ideal_sim_rel_in_guard = in_guard';
           ke_hybrid_ideal_sim_rel_st_hs =
           KEHybridStateWaitReq2 pt1{!1} pt2{!1} q1{!1} q2{!1} q3{!1};
           ke_hybrid_ideal_sim_rel_st_hslf = KEHybrid._self{1};
           ke_hybrid_ideal_sim_rel_st_is = UC_KEIdeal._st{2};
           ke_hybrid_ideal_sim_rel_st_islf = UC_KEIdeal._self{2};
           ke_hybrid_ideal_sim_rel_st_ss = UC_KESim._st{2};
           ke_hybrid_ideal_sim_rel_sim_ao = UC_KESim.if_addr_opt{2};
           ke_hybrid_ideal_sim_rel_ms_ao = MSCore.MS.if_addr_opt{2};
           ke_hybrid_ideal_sim_rel_mi1_func = MakeInt.MI.func{1};
           ke_hybrid_ideal_sim_rel_mi1_in_guard = MakeInt.MI.in_guard{1};
           ke_hybrid_ideal_sim_rel_mi2_func = MakeInt.MI.func{2};
           ke_hybrid_ideal_sim_rel_mi2_in_guard = MakeInt.MI.in_guard{2}; |} /\
       m0{2} = m{2} /\
       r0{2} = None /\
       not_done{2} = true /\
       not_done{1} = false /\
       (={m} /\
        ke_hybrid_ideal_sim_rel
          {| ke_hybrid_ideal_sim_rel_func = func';
              ke_hybrid_ideal_sim_rel_in_guard = in_guard';
              ke_hybrid_ideal_sim_rel_st_hs =
              KEHybridStateWaitReq2 pt1{!1} pt2{!1} q1{!1} q2{!1} q3{!1};
              ke_hybrid_ideal_sim_rel_st_hslf = KEHybrid._self{1};
              ke_hybrid_ideal_sim_rel_st_is = UC_KEIdeal._st{2};
              ke_hybrid_ideal_sim_rel_st_islf = UC_KEIdeal._self{2};
              ke_hybrid_ideal_sim_rel_st_ss = UC_KESim._st{2};
              ke_hybrid_ideal_sim_rel_sim_ao = UC_KESim.if_addr_opt{2};
              ke_hybrid_ideal_sim_rel_ms_ao = MSCore.MS.if_addr_opt{2};
              ke_hybrid_ideal_sim_rel_mi1_func = MakeInt.MI.func{1};
              ke_hybrid_ideal_sim_rel_mi1_in_guard = MakeInt.MI.in_guard{1};
              ke_hybrid_ideal_sim_rel_mi2_func = MakeInt.MI.func{2};
              ke_hybrid_ideal_sim_rel_mi2_in_guard = MakeInt.MI.in_guard{2}; |}) /\
       main_guard MakeInt.MI.func{1} MakeInt.MI.in_guard{1} m{1}) /\
      MakeInt.MI.func{1} <= m{1}.`2.`1) /\
     m{1}.`1 = Dir /\
     envport KEHybrid._self{1} m{1}.`3 /\
     m{1}.`2 = _extport_Pt2 KEHybrid._self{1}) /\
    pt2'{1} = pt20{1}
 ).
 exlim r0{1} => r0L.
     call{1} (MakeInt.MI_after_adv_to_env KEHybrid DummyAdv r0L).
 auto;progress;smt(@UCListPO).
 rcondf{1} 0. auto.
sp 0 5.
     seq 0 1 :(
    r0{2} =
    Some (UC_KEI2S.epdp__ke_sim_req2.`enc
     {| UC_KEI2S.ke_sim_req2___func = UC_KEIdeal._self{2};
       UC_KEI2S.ke_sim_req2___adv = adv; |}) /\
   m0{2} = oget r0{2} /\
    UC_KEIdeal._st{2} = _State_IF_WaitSim2 pt10{2} pt20{2} q0{2} /\
    r0{1} =
    Some (epdp_da_to_env.`enc
    {| dte_n = _adv_pi_begin + 2; dte_pt =
        (_addr_Fw2 KEHybrid._self{1}, UC_Fw2.UC_FwAdv.pi); dte_tag =
        UC_Fw2.UC_FwAdv._tag__fw_obs; dte_u =
        (epdp_tuple3_univ epdp_port_univ epdp_port_univ epdp_id).`enc
        (_pt1{1}, _pt2{1}, u{1}); |}) /\
    m0{1} = oget r0{1} /\
    u{1} = epdp_key_univ.`enc (g ^ q20{1}) /\
    KEHybrid._st{1} =
    KEHybridStateWaitAdv2 pt10{1} pt20{1} q10{1} q20{1} q30{1} /\
    (pt10{2} = pt1{!2} /\
     pt20{2} = pt2{!2} /\
     q0{2} = q{2} /\
     pt2'{2} = _x0.`UC_KEDir.Pt2.ke_req2__pt2 /\
     pt10{1} = pt1{!1} /\
     pt20{1} = pt2{!1} /\
     pt2'{1} = _x.`UC_KEDir.Pt2.ke_req2__pt2 /\
     q10{1} = q1{!1} /\
     q20{1} = q2{!1} /\
     q30{1} = q3{!1} /\
     _pt1{1} = _intport_Pt2 KEHybrid._self{1} /\
     _pt2{1} = _intport_Pt1 KEHybrid._self{1} /\
     UC_KEDir.Pt2.epdp__ke_req2.`dec m{1} = Some _x /\
     UC_KEDir.Pt2.epdp__ke_req2.`dec m{2} = Some _x0 /\
     _x = _x0 /\
     ((state =
       {| ke_hybrid_ideal_sim_rel_func = func';
           ke_hybrid_ideal_sim_rel_in_guard = in_guard';
           ke_hybrid_ideal_sim_rel_st_hs =
           KEHybridStateWaitReq2 pt1{!1} pt2{!1} q1{!1} q2{!1} q3{!1};
           ke_hybrid_ideal_sim_rel_st_hslf = KEHybrid._self{1};
           ke_hybrid_ideal_sim_rel_st_is = _State_IF_WaitReq2 pt1{!2} pt2{!2} q{2};
           ke_hybrid_ideal_sim_rel_st_islf = UC_KEIdeal._self{2};
           ke_hybrid_ideal_sim_rel_st_ss = UC_KESim._st{2};
           ke_hybrid_ideal_sim_rel_sim_ao = UC_KESim.if_addr_opt{2};
           ke_hybrid_ideal_sim_rel_ms_ao = MSCore.MS.if_addr_opt{2};
           ke_hybrid_ideal_sim_rel_mi1_func = MakeInt.MI.func{1};
           ke_hybrid_ideal_sim_rel_mi1_in_guard = MakeInt.MI.in_guard{1};
           ke_hybrid_ideal_sim_rel_mi2_func = MakeInt.MI.func{2};
           ke_hybrid_ideal_sim_rel_mi2_in_guard = MakeInt.MI.in_guard{2}; |} /\
       m0{2} = oget r0{2} /\
       not_done{2} = true /\
       not_done{1} = false /\
       (={m} /\
        ke_hybrid_ideal_sim_rel
          {| ke_hybrid_ideal_sim_rel_func = func';
              ke_hybrid_ideal_sim_rel_in_guard = in_guard';
              ke_hybrid_ideal_sim_rel_st_hs =
              KEHybridStateWaitReq2 pt1{!1} pt2{!1} q1{!1} q2{!1} q3{!1};
              ke_hybrid_ideal_sim_rel_st_hslf = KEHybrid._self{1};
              ke_hybrid_ideal_sim_rel_st_is = _State_IF_WaitReq2 pt1{!2} pt2{!2} q{2};
              ke_hybrid_ideal_sim_rel_st_islf = UC_KEIdeal._self{2};
              ke_hybrid_ideal_sim_rel_st_ss = UC_KESim._st{2};
              ke_hybrid_ideal_sim_rel_sim_ao = UC_KESim.if_addr_opt{2};
              ke_hybrid_ideal_sim_rel_ms_ao = MSCore.MS.if_addr_opt{2};
              ke_hybrid_ideal_sim_rel_mi1_func = MakeInt.MI.func{1};
              ke_hybrid_ideal_sim_rel_mi1_in_guard = MakeInt.MI.in_guard{1};
              ke_hybrid_ideal_sim_rel_mi2_func = MakeInt.MI.func{2};
              ke_hybrid_ideal_sim_rel_mi2_in_guard = MakeInt.MI.in_guard{2}; |}) /\
       main_guard MakeInt.MI.func{1} MakeInt.MI.in_guard{1} m{1}) /\
      MakeInt.MI.func{1} <= m{1}.`2.`1) /\
     m{1}.`1 = Dir /\
     envport KEHybrid._self{1} m{1}.`3 /\
     m{1}.`2 = _extport_Pt2 KEHybrid._self{1}) /\
    pt2'{1} = pt20{1}

 ).
 exlim r0{2} => r0R.
     call{2} (MakeInt.MI_after_func_to_adv UC_KEIdeal (MSCore.MS(UC_KESim, DummyAdv)) r0R). auto;progress;smt(_adv_pi_begin_gt0).
     rcondt{2} 0. auto.
 rcondf{2} 0. auto;smt(@UCListPO).
     inline{2} (1) invoke.
     sp 0 2.
 rcondt{2} 0. auto;smt().
rcondf{2} 0. auto;smt().     
rcondt{2} 0. auto;progress;smt().
inline{2} (1) loop.
     sp 0 3.
     rcondt{2} 0. auto.
     rcondf{2} 0. auto;smt().
 inline{2} (1) invoke.
     sp 0 2.
     rcondf{2} 0. auto;smt().
     match _State_SIM_WaitReq2 {2} 0. auto;smt().
     rcondt{2} 0. auto;progress;smt().
 inline _State_SIM_WaitReq2__KEI2S__ke_sim_req2.
     sp 0 7.
     seq 0 1 :(
    q10{2} = q1{!2} /\
    q20{2} = q2{!2} /\
    UC_KESim._st{2} = _State_SIM_WaitAdv2 q10{2} q20{2} /\
    r3{2} = Some (UC_Fw2.UC_FwAdv.epdp__fw_obs.`enc
      {| UC_Fw2.UC_FwAdv.fw_obs___func = _addr_Fw2 (oget UC_KESim.if_addr_opt{2});
        UC_Fw2.UC_FwAdv.fw_obs___adv = adv;
        UC_Fw2.UC_FwAdv.fw_obs__pt1 =
        _intport_Pt2 (oget UC_KESim.if_addr_opt{2});
        UC_Fw2.UC_FwAdv.fw_obs__pt2 =
        _intport_Pt1 (oget UC_KESim.if_addr_opt{2});
        UC_Fw2.UC_FwAdv.fw_obs__u =
          epdp_key_univ.`enc (g ^ q20{2}); |}) /\
    m3{2} = oget r3{2} /\
    not_done0{2} = true /\
    UC_KEIdeal._st{2} = _State_IF_WaitSim2 pt10{2} pt20{2} q0{2} /\
    r0{1} =
    Some (epdp_da_to_env.`enc
      {| dte_n = _adv_pi_begin + 2; dte_pt =
          (_addr_Fw2 KEHybrid._self{1}, UC_Fw2.UC_FwAdv.pi); dte_tag =
          UC_Fw2.UC_FwAdv._tag__fw_obs; dte_u =
          (epdp_tuple3_univ epdp_port_univ epdp_port_univ epdp_id).`enc
          (_pt1{1}, _pt2{1}, u{1}); |}) /\
    u{1} = epdp_key_univ.`enc (g ^ q20{1}) /\
    KEHybrid._st{1} =
    KEHybridStateWaitAdv2 pt10{1} pt20{1} q10{1} q20{1} q30{1} /\
    pt10{2} = pt1{!2} /\
     pt20{2} = pt2{!2} /\
     q0{2} = q{2} /\
     pt2'{2} = _x0.`UC_KEDir.Pt2.ke_req2__pt2 /\
     pt10{1} = pt1{!1} /\
     pt20{1} = pt2{!1} /\
     pt2'{1} = _x.`UC_KEDir.Pt2.ke_req2__pt2 /\
     q10{1} = q1{!1} /\
     q20{1} = q2{!1} /\
     q30{1} = q3{!1} /\
     _pt1{1} = _intport_Pt2 KEHybrid._self{1} /\
     _pt2{1} = _intport_Pt1 KEHybrid._self{1} /\
     UC_KEDir.Pt2.epdp__ke_req2.`dec m{1} = Some _x /\
     UC_KEDir.Pt2.epdp__ke_req2.`dec m{2} = Some _x0 /\
     _x = _x0 /\
     state =
       {| ke_hybrid_ideal_sim_rel_func = func';
           ke_hybrid_ideal_sim_rel_in_guard = in_guard';
           ke_hybrid_ideal_sim_rel_st_hs =
           KEHybridStateWaitReq2 pt1{!1} pt2{!1} q1{!1} q2{!1} q3{!1};
           ke_hybrid_ideal_sim_rel_st_hslf = KEHybrid._self{1};
           ke_hybrid_ideal_sim_rel_st_is =
           _State_IF_WaitReq2 pt1{!2} pt2{!2} q{2};
           ke_hybrid_ideal_sim_rel_st_islf = UC_KEIdeal._self{2};
           ke_hybrid_ideal_sim_rel_st_ss = _State_SIM_WaitReq2 q1{!2} q2{!2};
           ke_hybrid_ideal_sim_rel_sim_ao = UC_KESim.if_addr_opt{2};
           ke_hybrid_ideal_sim_rel_ms_ao = MSCore.MS.if_addr_opt{2};
           ke_hybrid_ideal_sim_rel_mi1_func = MakeInt.MI.func{1};
           ke_hybrid_ideal_sim_rel_mi1_in_guard = MakeInt.MI.in_guard{1};
           ke_hybrid_ideal_sim_rel_mi2_func = MakeInt.MI.func{2};
           ke_hybrid_ideal_sim_rel_mi2_in_guard = MakeInt.MI.in_guard{2}; |} /\
       not_done{2} = true /\
       (={m} /\
        ke_hybrid_ideal_sim_rel
          {| ke_hybrid_ideal_sim_rel_func = func';
              ke_hybrid_ideal_sim_rel_in_guard = in_guard';
              ke_hybrid_ideal_sim_rel_st_hs =
              KEHybridStateWaitReq2 pt1{!1} pt2{!1} q1{!1} q2{!1} q3{!1};
              ke_hybrid_ideal_sim_rel_st_hslf = KEHybrid._self{1};
              ke_hybrid_ideal_sim_rel_st_is =
              _State_IF_WaitReq2 pt1{!2} pt2{!2} q{2};
              ke_hybrid_ideal_sim_rel_st_islf = UC_KEIdeal._self{2};
              ke_hybrid_ideal_sim_rel_st_ss = _State_SIM_WaitReq2 q1{!2} q2{!2};
              ke_hybrid_ideal_sim_rel_sim_ao = UC_KESim.if_addr_opt{2};
              ke_hybrid_ideal_sim_rel_ms_ao = MSCore.MS.if_addr_opt{2};
              ke_hybrid_ideal_sim_rel_mi1_func = MakeInt.MI.func{1};
              ke_hybrid_ideal_sim_rel_mi1_in_guard = MakeInt.MI.in_guard{1};
              ke_hybrid_ideal_sim_rel_mi2_func = MakeInt.MI.func{2};
              ke_hybrid_ideal_sim_rel_mi2_in_guard = MakeInt.MI.in_guard{2}; |}) /\
    pt2'{1} = pt20{1}

      ).
      exlim r3{2} => r3R.
      call{2} (MSCore.MS_after_core_continue UC_KESim DummyAdv r3R).   
         auto;progress;smt(_adv_pi_begin_gt0 @UCListPO).
          rcondt{2} 0. auto.
          rcondt{2} 0. auto;smt().
          inline{2} (1) invoke.
          sp 0 2.
          match None {2} 0. auto;smt(eq_of_valid_da_from_env).
      rcondt{2} 0. auto;smt(_adv_pi_begin_gt0 UC_Fw2.UC_FwAdv.eq_of_valid__fw_obs).
          sp 0 2.
          seq 0 1:(
        
    r3{2} =
    Some (epdp_da_to_env.`enc
          {| dte_n = _adv_pi_begin + 2;
            dte_pt = (_addr_Fw2 (oget UC_KESim.if_addr_opt{2}),UC_Fw2.UC_FwAdv.pi);
            dte_tag = UC_Fw2.UC_FwAdv._tag__fw_obs;
            dte_u =(epdp_tuple3_univ epdp_port_univ epdp_port_univ epdp_id).`enc
          (_intport_Pt2 (oget UC_KESim.if_addr_opt{2}), _intport_Pt1 (oget UC_KESim.if_addr_opt{2}), u{1}); |}) /\
    
   m3{2} = oget r3{2} /\
    
    q10{2} = q1{!2} /\
    q20{2} = q2{!2} /\
    UC_KESim._st{2} = _State_SIM_WaitAdv2 q10{2} q20{2} /\
    
    not_done0{2} = false /\
    UC_KEIdeal._st{2} = _State_IF_WaitSim2 pt10{2} pt20{2} q0{2} /\
    r0{1} =
    Some (epdp_da_to_env.`enc
      {| dte_n = _adv_pi_begin + 2; dte_pt =
          (_addr_Fw2 KEHybrid._self{1}, UC_Fw2.UC_FwAdv.pi); dte_tag =
          UC_Fw2.UC_FwAdv._tag__fw_obs; dte_u =
          (epdp_tuple3_univ epdp_port_univ epdp_port_univ epdp_id).`enc
          (_pt1{1}, _pt2{1}, u{1}); |}) /\
    u{1} = epdp_key_univ.`enc (g ^ q20{1}) /\
    KEHybrid._st{1} =
    KEHybridStateWaitAdv2 pt10{1} pt20{1} q10{1} q20{1} q30{1} /\
    pt10{2} = pt1{!2} /\
    pt20{2} = pt2{!2} /\
    q0{2} = q{2} /\
    pt2'{2} = _x0.`UC_KEDir.Pt2.ke_req2__pt2 /\
    pt10{1} = pt1{!1} /\
    pt20{1} = pt2{!1} /\
    pt2'{1} = _x.`UC_KEDir.Pt2.ke_req2__pt2 /\
    q10{1} = q1{!1} /\
    q20{1} = q2{!1} /\
    q30{1} = q3{!1} /\
    _pt1{1} = _intport_Pt2 KEHybrid._self{1} /\
    _pt2{1} = _intport_Pt1 KEHybrid._self{1} /\
    UC_KEDir.Pt2.epdp__ke_req2.`dec m{1} = Some _x /\
    UC_KEDir.Pt2.epdp__ke_req2.`dec m{2} = Some _x0 /\
    _x = _x0 /\
    state =
    {| ke_hybrid_ideal_sim_rel_func = func';
        ke_hybrid_ideal_sim_rel_in_guard = in_guard';
        ke_hybrid_ideal_sim_rel_st_hs =
        KEHybridStateWaitReq2 pt1{!1} pt2{!1} q1{!1} q2{!1} q3{!1};
        ke_hybrid_ideal_sim_rel_st_hslf = KEHybrid._self{1};
        ke_hybrid_ideal_sim_rel_st_is =
        _State_IF_WaitReq2 pt1{!2} pt2{!2} q{2};
        ke_hybrid_ideal_sim_rel_st_islf = UC_KEIdeal._self{2};
        ke_hybrid_ideal_sim_rel_st_ss = _State_SIM_WaitReq2 q1{!2} q2{!2};
        ke_hybrid_ideal_sim_rel_sim_ao = UC_KESim.if_addr_opt{2};
        ke_hybrid_ideal_sim_rel_ms_ao = MSCore.MS.if_addr_opt{2};
        ke_hybrid_ideal_sim_rel_mi1_func = MakeInt.MI.func{1};
        ke_hybrid_ideal_sim_rel_mi1_in_guard = MakeInt.MI.in_guard{1};
        ke_hybrid_ideal_sim_rel_mi2_func = MakeInt.MI.func{2};
        ke_hybrid_ideal_sim_rel_mi2_in_guard = MakeInt.MI.in_guard{2}; |} /\
    not_done{2} = true /\
    (={m} /\
     ke_hybrid_ideal_sim_rel
       {| ke_hybrid_ideal_sim_rel_func = func';
           ke_hybrid_ideal_sim_rel_in_guard = in_guard';
           ke_hybrid_ideal_sim_rel_st_hs =
           KEHybridStateWaitReq2 pt1{!1} pt2{!1} q1{!1} q2{!1} q3{!1};
           ke_hybrid_ideal_sim_rel_st_hslf = KEHybrid._self{1};
           ke_hybrid_ideal_sim_rel_st_is =
           _State_IF_WaitReq2 pt1{!2} pt2{!2} q{2};
           ke_hybrid_ideal_sim_rel_st_islf = UC_KEIdeal._self{2};
           ke_hybrid_ideal_sim_rel_st_ss = _State_SIM_WaitReq2 q1{!2} q2{!2};
           ke_hybrid_ideal_sim_rel_sim_ao = UC_KESim.if_addr_opt{2};
           ke_hybrid_ideal_sim_rel_ms_ao = MSCore.MS.if_addr_opt{2};
           ke_hybrid_ideal_sim_rel_mi1_func = MakeInt.MI.func{1};
           ke_hybrid_ideal_sim_rel_mi1_in_guard = MakeInt.MI.in_guard{1};
           ke_hybrid_ideal_sim_rel_mi2_func = MakeInt.MI.func{2};
           ke_hybrid_ideal_sim_rel_mi2_in_guard = MakeInt.MI.in_guard{2}; |}) /\
    pt2'{1} = pt20{1}

      ).
exlim r3{2} => r3R.
 call{2} (MSCore.MS_after_adv_return UC_KESim  DummyAdv r3R).
   auto;progress;smt(eq_of_valid_da_to_env @UCListPO).
          rcondf{2} 0. auto.
          sp 0 2.
          seq 0 1 :(
        
  r0{2} =
  Some (epdp_da_to_env.`enc
    {| dte_n = _adv_pi_begin + 2; dte_pt =
        (_addr_Fw2 (oget UC_KESim.if_addr_opt{2}), UC_Fw2.UC_FwAdv.pi);
        dte_tag = UC_Fw2.UC_FwAdv._tag__fw_obs; dte_u =
        (epdp_tuple3_univ epdp_port_univ epdp_port_univ epdp_id).`enc
        (_intport_Pt2 (oget UC_KESim.if_addr_opt{2}),
         _intport_Pt1 (oget UC_KESim.if_addr_opt{2}), u{1}); |}) /\
  m0{2} = oget r0{2} /\
  q10{2} = q1{!2} /\
  q20{2} = q2{!2} /\
  UC_KESim._st{2} = _State_SIM_WaitAdv2 q10{2} q20{2} /\
  not_done0{2} = false /\
  UC_KEIdeal._st{2} = _State_IF_WaitSim2 pt10{2} pt20{2} q0{2} /\
  r0{1} =
  Some (epdp_da_to_env.`enc
    {| dte_n = _adv_pi_begin + 2; dte_pt =
        (_addr_Fw2 KEHybrid._self{1}, UC_Fw2.UC_FwAdv.pi); dte_tag =
        UC_Fw2.UC_FwAdv._tag__fw_obs; dte_u =
        (epdp_tuple3_univ epdp_port_univ epdp_port_univ epdp_id).`enc
        (_pt1{1}, _pt2{1}, u{1}); |}) /\
  u{1} = epdp_key_univ.`enc (g ^ q20{1}) /\
  KEHybrid._st{1} =
  KEHybridStateWaitAdv2 pt10{1} pt20{1} q10{1} q20{1} q30{1} /\
  pt10{2} = pt1{!2} /\
  pt20{2} = pt2{!2} /\
  q0{2} = q{2} /\
  pt2'{2} = _x0.`UC_KEDir.Pt2.ke_req2__pt2 /\
  pt10{1} = pt1{!1} /\
  pt20{1} = pt2{!1} /\
  pt2'{1} = _x.`UC_KEDir.Pt2.ke_req2__pt2 /\
  q10{1} = q1{!1} /\
  q20{1} = q2{!1} /\
  q30{1} = q3{!1} /\
  _pt1{1} = _intport_Pt2 KEHybrid._self{1} /\
  _pt2{1} = _intport_Pt1 KEHybrid._self{1} /\
  state =
  {| ke_hybrid_ideal_sim_rel_func = func'; ke_hybrid_ideal_sim_rel_in_guard =
      in_guard'; ke_hybrid_ideal_sim_rel_st_hs =
      KEHybridStateWaitReq2 pt1{!1} pt2{!1} q1{!1} q2{!1} q3{!1};
      ke_hybrid_ideal_sim_rel_st_hslf = KEHybrid._self{1};
      ke_hybrid_ideal_sim_rel_st_is =
      _State_IF_WaitReq2 pt1{!2} pt2{!2} q{2};
      ke_hybrid_ideal_sim_rel_st_islf = UC_KEIdeal._self{2};
      ke_hybrid_ideal_sim_rel_st_ss = _State_SIM_WaitReq2 q1{!2} q2{!2};
      ke_hybrid_ideal_sim_rel_sim_ao = UC_KESim.if_addr_opt{2};
      ke_hybrid_ideal_sim_rel_ms_ao = MSCore.MS.if_addr_opt{2};
      ke_hybrid_ideal_sim_rel_mi1_func = MakeInt.MI.func{1};
      ke_hybrid_ideal_sim_rel_mi1_in_guard = MakeInt.MI.in_guard{1};
      ke_hybrid_ideal_sim_rel_mi2_func = MakeInt.MI.func{2};
      ke_hybrid_ideal_sim_rel_mi2_in_guard = MakeInt.MI.in_guard{2}; |} /\
  not_done{2} = false /\
  (
   ke_hybrid_ideal_sim_rel
     {| ke_hybrid_ideal_sim_rel_func = func';
         ke_hybrid_ideal_sim_rel_in_guard = in_guard';
         ke_hybrid_ideal_sim_rel_st_hs =
         KEHybridStateWaitReq2 pt1{!1} pt2{!1} q1{!1} q2{!1} q3{!1};
         ke_hybrid_ideal_sim_rel_st_hslf = KEHybrid._self{1};
         ke_hybrid_ideal_sim_rel_st_is =
         _State_IF_WaitReq2 pt1{!2} pt2{!2} q{2};
         ke_hybrid_ideal_sim_rel_st_islf = UC_KEIdeal._self{2};
         ke_hybrid_ideal_sim_rel_st_ss = _State_SIM_WaitReq2 q1{!2} q2{!2};
         ke_hybrid_ideal_sim_rel_sim_ao = UC_KESim.if_addr_opt{2};
         ke_hybrid_ideal_sim_rel_ms_ao = MSCore.MS.if_addr_opt{2};
         ke_hybrid_ideal_sim_rel_mi1_func = MakeInt.MI.func{1};
         ke_hybrid_ideal_sim_rel_mi1_in_guard = MakeInt.MI.in_guard{1};
         ke_hybrid_ideal_sim_rel_mi2_func = MakeInt.MI.func{2};
         ke_hybrid_ideal_sim_rel_mi2_in_guard = MakeInt.MI.in_guard{2}; |}) /\
  pt2'{1} = pt20{1}
 ).
exlim r0{2} => r0R.
     call{2} (MakeInt.MI_after_adv_to_env UC_KEIdeal (MSCore.MS(UC_KESim, DummyAdv)) r0R). auto;progress;smt(_adv_pi_begin_gt0 @UCListPO).
     rcondf{2} 0. auto.
 skip. move => &1 &2 P.
 have H :  ke_hybrid_ideal_sim_rel3
     {| ke_hybrid_ideal_sim_rel_func = func';
         ke_hybrid_ideal_sim_rel_in_guard = in_guard';
         ke_hybrid_ideal_sim_rel_st_hs = KEHybrid._st{1};
         ke_hybrid_ideal_sim_rel_st_hslf = KEHybrid._self{1};
         ke_hybrid_ideal_sim_rel_st_is = UC_KEIdeal._st{2};
         ke_hybrid_ideal_sim_rel_st_islf = UC_KEIdeal._self{2};
         ke_hybrid_ideal_sim_rel_st_ss = UC_KESim._st{2};
         ke_hybrid_ideal_sim_rel_sim_ao = UC_KESim.if_addr_opt{2};
         ke_hybrid_ideal_sim_rel_ms_ao = MSCore.MS.if_addr_opt{2};
         ke_hybrid_ideal_sim_rel_mi1_func = MakeInt.MI.func{1};
         ke_hybrid_ideal_sim_rel_mi1_in_guard = MakeInt.MI.in_guard{1};
         ke_hybrid_ideal_sim_rel_mi2_func = MakeInt.MI.func{2};
       ke_hybrid_ideal_sim_rel_mi2_in_guard = MakeInt.MI.in_guard{2}; |}
       pt1{1} pt2{1} q1{1} q2{1} q3{1}. progress;smt(@UCListPO).
       smt(KEHybridIdealSimRel3).

sp 2 4.     
       seq 1 1 :(

    r0{2} = None /\
      r0{1} = None /\
       UC_KEIdeal._st{2} = _State_IF_WaitReq2 pt1{!2} pt2{!2} q{2} /\
       KEHybrid._st{1} =
        KEHybridStateWaitReq2 pt1{!1} pt2{!1} q1{!1} q2{!1} q3{!1} /\
        state =
         {| ke_hybrid_ideal_sim_rel_func = func';
             ke_hybrid_ideal_sim_rel_in_guard = in_guard';
             ke_hybrid_ideal_sim_rel_st_hs = KEHybrid._st{1};
             ke_hybrid_ideal_sim_rel_st_hslf = KEHybrid._self{1};
             ke_hybrid_ideal_sim_rel_st_is = UC_KEIdeal._st{2};
             ke_hybrid_ideal_sim_rel_st_islf = UC_KEIdeal._self{2};
             ke_hybrid_ideal_sim_rel_st_ss = UC_KESim._st{2};
             ke_hybrid_ideal_sim_rel_sim_ao = UC_KESim.if_addr_opt{2};
             ke_hybrid_ideal_sim_rel_ms_ao = MSCore.MS.if_addr_opt{2};
             ke_hybrid_ideal_sim_rel_mi1_func = MakeInt.MI.func{1};
             ke_hybrid_ideal_sim_rel_mi1_in_guard = MakeInt.MI.in_guard{1};
             ke_hybrid_ideal_sim_rel_mi2_func = MakeInt.MI.func{2};
             ke_hybrid_ideal_sim_rel_mi2_in_guard = MakeInt.MI.in_guard{2}; |} /\
         not_done{2} = false /\
         not_done{1} = false /\
         ke_hybrid_ideal_sim_rel
            {| ke_hybrid_ideal_sim_rel_func = func';
                ke_hybrid_ideal_sim_rel_in_guard = in_guard';
                ke_hybrid_ideal_sim_rel_st_hs = KEHybrid._st{1};
                ke_hybrid_ideal_sim_rel_st_hslf = KEHybrid._self{1};
                ke_hybrid_ideal_sim_rel_st_is = UC_KEIdeal._st{2};
                ke_hybrid_ideal_sim_rel_st_islf = UC_KEIdeal._self{2};
                ke_hybrid_ideal_sim_rel_st_ss = UC_KESim._st{2};
                ke_hybrid_ideal_sim_rel_sim_ao = UC_KESim.if_addr_opt{2};
                ke_hybrid_ideal_sim_rel_ms_ao = MSCore.MS.if_addr_opt{2};
                ke_hybrid_ideal_sim_rel_mi1_func = MakeInt.MI.func{1};
              ke_hybrid_ideal_sim_rel_mi1_in_guard = MakeInt.MI.in_guard{1};
              ke_hybrid_ideal_sim_rel_mi2_func = MakeInt.MI.func{2};
              ke_hybrid_ideal_sim_rel_mi2_in_guard = MakeInt.MI.in_guard{2}; |}
          ).
              call{1} (MakeInt.MI_after_func_error KEHybrid DummyAdv).
              call{2} (MakeInt.MI_after_func_error UC_KEIdeal (MSCore.MS(UC_KESim, DummyAdv))).
          auto;progress;smt().
              rcondf{1} 0. auto.
              rcondf{2} 0. auto.
              auto;progress;smt().
              sp 1 0.
              seq 1 0 :(
    (KEHybrid._st{1} =
     KEHybridStateWaitReq2 pt1{!1} pt2{!1} q1{!1} q2{!1} q3{!1} /\
     r0{1} = None /\
     (state =
      {| ke_hybrid_ideal_sim_rel_func = func';
          ke_hybrid_ideal_sim_rel_in_guard = in_guard';
          ke_hybrid_ideal_sim_rel_st_hs = KEHybrid._st{1};
          ke_hybrid_ideal_sim_rel_st_hslf = KEHybrid._self{1};
          ke_hybrid_ideal_sim_rel_st_is = UC_KEIdeal._st{2};
          ke_hybrid_ideal_sim_rel_st_islf = UC_KEIdeal._self{2};
          ke_hybrid_ideal_sim_rel_st_ss = UC_KESim._st{2};
          ke_hybrid_ideal_sim_rel_sim_ao = UC_KESim.if_addr_opt{2};
          ke_hybrid_ideal_sim_rel_ms_ao = MSCore.MS.if_addr_opt{2};
          ke_hybrid_ideal_sim_rel_mi1_func = MakeInt.MI.func{1};
          ke_hybrid_ideal_sim_rel_mi1_in_guard = MakeInt.MI.in_guard{1};
          ke_hybrid_ideal_sim_rel_mi2_func = MakeInt.MI.func{2};
          ke_hybrid_ideal_sim_rel_mi2_in_guard = MakeInt.MI.in_guard{2}; |} /\
      m0{2} = m{2} /\
      r0{2} = None /\
      not_done{2} = true /\
      not_done{1} = false /\
      (={m} /\
       ke_hybrid_ideal_sim_rel
         {| ke_hybrid_ideal_sim_rel_func = func';
             ke_hybrid_ideal_sim_rel_in_guard = in_guard';
             ke_hybrid_ideal_sim_rel_st_hs = KEHybrid._st{1};
             ke_hybrid_ideal_sim_rel_st_hslf = KEHybrid._self{1};
             ke_hybrid_ideal_sim_rel_st_is = UC_KEIdeal._st{2};
             ke_hybrid_ideal_sim_rel_st_islf = UC_KEIdeal._self{2};
             ke_hybrid_ideal_sim_rel_st_ss = UC_KESim._st{2};
             ke_hybrid_ideal_sim_rel_sim_ao = UC_KESim.if_addr_opt{2};
             ke_hybrid_ideal_sim_rel_ms_ao = MSCore.MS.if_addr_opt{2};
             ke_hybrid_ideal_sim_rel_mi1_func = MakeInt.MI.func{1};
             ke_hybrid_ideal_sim_rel_mi1_in_guard = MakeInt.MI.in_guard{1};
             ke_hybrid_ideal_sim_rel_mi2_func = MakeInt.MI.func{2};
             ke_hybrid_ideal_sim_rel_mi2_in_guard = MakeInt.MI.in_guard{2}; |}) /\
      main_guard MakeInt.MI.func{1} MakeInt.MI.in_guard{1} m{1}) /\
     MakeInt.MI.func{1} <= m{1}.`2.`1) /\
    ! (m{1}.`1 = Dir /\
       envport KEHybrid._self{1} m{1}.`3 /\
       m{1}.`2 = _extport_Pt2 KEHybrid._self{1})
 ).
 call{1} (MakeInt.MI_after_func_error KEHybrid DummyAdv). auto;progress;smt().
     rcondf{1} 0. auto.
 inline{2} (1) invoke.
     sp 0 2.
     if{2}.
     inline parties.
     sp 0 2.
     match _State_IF_WaitReq2 {2} 0. auto;smt().
 match None {2} 0. auto;progress;smt(UC_KEDir.Pt2.eq_of_valid__ke_req2).
sp 0 2.
seq 0 1 :(

    r0{2} = None /\
      r0{1} = None /\
       UC_KEIdeal._st{2} = _State_IF_WaitReq2 pt1{!2} pt2{!2} q{2} /\
       KEHybrid._st{1} =
        KEHybridStateWaitReq2 pt1{!1} pt2{!1} q1{!1} q2{!1} q3{!1} /\
        state =
         {| ke_hybrid_ideal_sim_rel_func = func';
             ke_hybrid_ideal_sim_rel_in_guard = in_guard';
             ke_hybrid_ideal_sim_rel_st_hs = KEHybrid._st{1};
             ke_hybrid_ideal_sim_rel_st_hslf = KEHybrid._self{1};
             ke_hybrid_ideal_sim_rel_st_is = UC_KEIdeal._st{2};
             ke_hybrid_ideal_sim_rel_st_islf = UC_KEIdeal._self{2};
             ke_hybrid_ideal_sim_rel_st_ss = UC_KESim._st{2};
             ke_hybrid_ideal_sim_rel_sim_ao = UC_KESim.if_addr_opt{2};
             ke_hybrid_ideal_sim_rel_ms_ao = MSCore.MS.if_addr_opt{2};
             ke_hybrid_ideal_sim_rel_mi1_func = MakeInt.MI.func{1};
             ke_hybrid_ideal_sim_rel_mi1_in_guard = MakeInt.MI.in_guard{1};
             ke_hybrid_ideal_sim_rel_mi2_func = MakeInt.MI.func{2};
             ke_hybrid_ideal_sim_rel_mi2_in_guard = MakeInt.MI.in_guard{2}; |} /\
         not_done{2} = false /\
         not_done{1} = false /\
         ke_hybrid_ideal_sim_rel
            {| ke_hybrid_ideal_sim_rel_func = func';
                ke_hybrid_ideal_sim_rel_in_guard = in_guard';
                ke_hybrid_ideal_sim_rel_st_hs = KEHybrid._st{1};
                ke_hybrid_ideal_sim_rel_st_hslf = KEHybrid._self{1};
                ke_hybrid_ideal_sim_rel_st_is = UC_KEIdeal._st{2};
                ke_hybrid_ideal_sim_rel_st_islf = UC_KEIdeal._self{2};
                ke_hybrid_ideal_sim_rel_st_ss = UC_KESim._st{2};
                ke_hybrid_ideal_sim_rel_sim_ao = UC_KESim.if_addr_opt{2};
                ke_hybrid_ideal_sim_rel_ms_ao = MSCore.MS.if_addr_opt{2};
                ke_hybrid_ideal_sim_rel_mi1_func = MakeInt.MI.func{1};
              ke_hybrid_ideal_sim_rel_mi1_in_guard = MakeInt.MI.in_guard{1};
              ke_hybrid_ideal_sim_rel_mi2_func = MakeInt.MI.func{2};
              ke_hybrid_ideal_sim_rel_mi2_in_guard = MakeInt.MI.in_guard{2}; |}
          ).
              call{2} (MakeInt.MI_after_func_error UC_KEIdeal (MSCore.MS(UC_KESim, DummyAdv))).
              auto;progress;smt().
          rcondf{2} 0. auto.
              auto;progress;smt().
          sp 0 1.
seq 0 1 :(

    r0{2} = None /\
      r0{1} = None /\
       
       KEHybrid._st{1} =
        KEHybridStateWaitReq2 pt1{!1} pt2{!1} q1{!1} q2{!1} q3{!1} /\
        state =
         {| ke_hybrid_ideal_sim_rel_func = func';
             ke_hybrid_ideal_sim_rel_in_guard = in_guard';
             ke_hybrid_ideal_sim_rel_st_hs = KEHybrid._st{1};
             ke_hybrid_ideal_sim_rel_st_hslf = KEHybrid._self{1};
             ke_hybrid_ideal_sim_rel_st_is = UC_KEIdeal._st{2};
             ke_hybrid_ideal_sim_rel_st_islf = UC_KEIdeal._self{2};
             ke_hybrid_ideal_sim_rel_st_ss = UC_KESim._st{2};
             ke_hybrid_ideal_sim_rel_sim_ao = UC_KESim.if_addr_opt{2};
             ke_hybrid_ideal_sim_rel_ms_ao = MSCore.MS.if_addr_opt{2};
             ke_hybrid_ideal_sim_rel_mi1_func = MakeInt.MI.func{1};
             ke_hybrid_ideal_sim_rel_mi1_in_guard = MakeInt.MI.in_guard{1};
             ke_hybrid_ideal_sim_rel_mi2_func = MakeInt.MI.func{2};
             ke_hybrid_ideal_sim_rel_mi2_in_guard = MakeInt.MI.in_guard{2}; |} /\
         not_done{2} = false /\
         not_done{1} = false /\
         ke_hybrid_ideal_sim_rel
            {| ke_hybrid_ideal_sim_rel_func = func';
                ke_hybrid_ideal_sim_rel_in_guard = in_guard';
                ke_hybrid_ideal_sim_rel_st_hs = KEHybrid._st{1};
                ke_hybrid_ideal_sim_rel_st_hslf = KEHybrid._self{1};
                ke_hybrid_ideal_sim_rel_st_is = UC_KEIdeal._st{2};
                ke_hybrid_ideal_sim_rel_st_islf = UC_KEIdeal._self{2};
                ke_hybrid_ideal_sim_rel_st_ss = UC_KESim._st{2};
                ke_hybrid_ideal_sim_rel_sim_ao = UC_KESim.if_addr_opt{2};
                ke_hybrid_ideal_sim_rel_ms_ao = MSCore.MS.if_addr_opt{2};
                ke_hybrid_ideal_sim_rel_mi1_func = MakeInt.MI.func{1};
              ke_hybrid_ideal_sim_rel_mi1_in_guard = MakeInt.MI.in_guard{1};
              ke_hybrid_ideal_sim_rel_mi2_func = MakeInt.MI.func{2};
              ke_hybrid_ideal_sim_rel_mi2_in_guard = MakeInt.MI.in_guard{2}; |}
          ).
              call{2} (MakeInt.MI_after_func_error UC_KEIdeal (MSCore.MS(UC_KESim, DummyAdv))).
              auto;progress;smt().
          rcondf{2} 0. auto.
              auto;progress;smt().
          
              inline{1} (1) invoke.
              inline{2} (1) invoke.
              sp 2 2.
          rcondf{2} 0. auto;smt. auto;smt(valid_epdp_da_from_env eq_of_valid_da_from_env @UCListPO _adv_pi_begin_gt0 mem_set mem_oflist mem_rangeset in_fsetU set1E in_fset1 mem_oflist oflist_cons mem_rangeset iota0 iota1 fset0U fsetU0 fsetUC in_fsetU set1E in_fset1 in_fsetU1 disjoint_with_union_implies_disjoint_with_first disjointP).
          print main_guard.
              (*do ovdje*)
   
qed.

print MSCore.dummy_adversary.

local lemma Exper_KEHybrid_KEIdeal_KESim
            (func' : addr, in_guard' : int fset) &m :
            exper_pre func' =>
            disjoint in_guard' (fset1 _adv_if_pi) =>
  `|Pr[Exper(MI(KEHybrid, Adv), Env).main
       (func', in_guard') @ &m : res] -
  Pr[Exper(MI(UC_KEIdeal, SIM(Adv)), Env).main
       (func', in_guard') @ &m : res]| <= 0%r.
     proof.
     move => pre disj.

       apply (MSCore.dummy_adversary
       Env Adv
       KEHybrid
       UC_KEIdeal
       UC_KESim
       _invar_KEHybrid _metric_KEHybrid
       _invar_IF _metric_IF
       _invar_UC_KESim _metric_UC_KESim
       func' in_guard' 0%r &m
     ).
         apply _metric_KEHybrid_good.
         rewrite /_invar_KEHybrid. rewrite /predT. trivial.
     rewrite /_invar_KEHybrid.
         rewrite /predT. simplify.
     move => n.
     by conseq (KEHybrid_invoke n);smt().
         apply IF_metric_good.
         rewrite /_invar_IF /predT //.
     move => n.
       by conseq (IF_invoke n);smt(set1E in_fset1).
         apply UC_KESim_metric_good.
         rewrite /_invar_UC_KESim /predT //.
         apply UC_KESim_invoke.
         trivial.
     trivial.
       apply (Exper_KEHybrid_KEIdeal_KESim_dummy_adversary
     (MSCore.CombEnvAdv(Env, Adv))
     func' in_guard' &m
   ).
   trivial.
trivial.      
   qed.

lemma ke_sec (func': addr, in_guard' : int fset) &m :
    exper_pre func' =>
    disjoint in_guard' (adv_pis_rf_info rf_info) =>
  DDH_Adv_globs.func{m} = func' =>
  DDH_Adv_globs.in_guard{m} = in_guard' =>
  `|Pr[Exper(MI(RFIP, Adv), Env).main
         (func', in_guard') @ &m : res] -
    Pr[Exper(MI(UC_KEIdeal, SIM(Adv)), Env).main
         (func', in_guard') @ &m : res]| <=
  `|Pr[DDH1(DDH_Adv(Env, Adv)).main() @ &m : res] -
    Pr[DDH2(DDH_Adv(Env, Adv)).main() @ &m : res]|.
proof.
move => pre disj func'_eq in_guard'_eq.
  rewrite (Exper_KEReal_KERealSimp func' in_guard' &m) 1:/#.
  trivial.
rewrite (Exper_KERealSimp_GOptHashing_KERealSimpHashingAdv
  func' in_guard' &m).
trivial. trivial.
  rewrite
           -(RH.GNonOptHashing_GOptHashing KERealSimpHashingAdv &m).
  rewrite (KERealSimpHashingAdv_NonOptHashing_DDH1_DDH_Adv
  func' in_guard' &m).
  trivial. trivial.
  have H :
Pr[Exper(MI(UC_KEIdeal, SIM(Adv)), Env).main(func', in_guard') @ &m : res]
=
Pr[Exper(MI(KEHybrid, Adv), Env).main (func', in_guard') @ &m : res].
  have H :
`|Pr[Exper(MI(KEHybrid, Adv), Env).main
       (func', in_guard') @ &m : res] -
  Pr[Exper(MI(UC_KEIdeal, SIM(Adv)), Env).main
    (func', in_guard') @ &m : res]| <= 0%r.
      apply Exper_KEHybrid_KEIdeal_KESim. trivial.
      rewrite /adv_pis_rf_info in disj.
      rewrite /_adv_if_pi.
      rewrite /rf_info in disj.
      move : disj. move => /> disj.
      rewrite /_adv_pi_num in disj.
  print rangeset.
  search rangeset.
  search oflist.
    rewrite /rangeset /range in disj.
  search iota_.
  have H : _adv_pi_begin \in (oflist (iota_ _adv_pi_begin (_adv_pi_begin + 3 - _adv_pi_begin))).
    smt(mem_oflist oflist_cons mem_rangeset iota0 iota1 fset0U fsetU0 fsetUC in_fsetU set1E in_fset1 in_fsetU1 disjoint_with_union_implies_disjoint_with_first disjointP).
  print disjoint.
  search (`&`).
  print disjoint.
  search fset0.
    have Q: _adv_pi_begin \notin in_guard'.
  search (`&`).
    smt(mem_oflist oflist_cons mem_rangeset iota0 iota1 fset0U fsetU0 fsetUC in_fsetU set1E in_fset1 in_fsetU1 disjoint_with_union_implies_disjoint_with_first disjointP).
  smt(mem_oflist oflist_cons mem_rangeset iota0 iota1 fset0U fsetU0 fsetUC in_fsetU set1E in_fset1 in_fsetU1 disjoint_with_union_implies_disjoint_with_first disjointP).
    smt().
  rewrite H. clear H.
rewrite (Exper_KEHybrid_KEHybridHashingAdv_OptHashing func' in_guard' &m). trivial. trivial.
rewrite -(RH.GNonOptHashing_GOptHashing KEHybridHashingAdv &m). rewrite -(KEHybridHashingAdv_NonOptHashing_DDH2_DDH_Adv
  func' in_guard' &m).
  trivial. trivial.
trivial.
qed.
      
 end section.
     
lemma KeyExchange_RFIP_IF_advantage
    (Env <: ENV{-MI, -RFIP, -IF, -SIM, -DDH_Adv, -DDH_Adv_globs, -MSCore.CombEnvAdv})
    (Adv <: ADV{-MI, -RFIP, -IF, -SIM, -DDH_Adv, -DDH_Adv_globs, -MSCore.CombEnvAdv, -Env})
    (func' : addr, in_guard' : int fset) &m :
    exper_pre func' =>
    disjoint in_guard' (adv_pis_rf_info rf_info) =>
    DDH_Adv_globs.func{m} = func' =>
  DDH_Adv_globs.in_guard{m} = in_guard' =>
      (*adv pis of KE are disj. from in_guard'*)    
 `|Pr[Exper(MI(RFIP, Adv), Env)
         .main(func', in_guard')
           @ &m : res] -
    Pr[Exper(MI(IF, SIM(Adv)), Env)
         .main(func', in_guard')
      @ &m : res]| <=
`|Pr[DDH.DDH1(DDH_Adv(Env, Adv)).main() @ &m : res] -
Pr[DDH.DDH2(DDH_Adv(Env, Adv)).main() @ &m : res]|
      .
    proof.
      move => pre disj func'_eq in_guard'_eq.
by apply (ke_sec Adv Env func' in_guard' &m).
    qed.
