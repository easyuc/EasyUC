(* partially idealized use of SMC2 - first SMC is idealized,
   second SMC uses idealized key exchange

   assertions are identical in real and ideal *)

load SMC2.
functionality
  SMC2.SMC2Real
  (SMC.SMCIdeal,
   SMC.SMCReal(KeyExchange.KEIdeal)).

var text1 : text.
var text2 : text.
var pt1 : port.
var pt2 : port.
assumption envport_pt1 : envport func adv pt1.
assumption envport_pt2 : envport func adv pt2.

(* experiment with real world *)
real.
send pt1@SMC2.SMC2Dir.Pt1.smc_req(pt2, text1)$func.
run.
assert msg_out
((func ++ [3], 1))@
Forwarding.FwAdv.fw_obs
((func, 1), (func, 2),
 (epdp_port_port_univ).`enc (pt1, pt2))
@((adv, 2))
ctrl_adv.
send ((adv, 2))@Forwarding.FwAdv.fw_ok$(func ++ [3]).
run.
assert msg_out
((func ++ [4], 1))@
Forwarding.FwAdv.fw_obs((func, 2), (func, 1), [])
@((adv, 3))
ctrl_adv.
send ((adv, 3))@Forwarding.FwAdv.fw_ok$((func ++ [4])).
run.
assert msg_out
((func ++ [1], 1))@SMC.SMC2Sim.sim_req((func, 1), (func, 2))@((adv, 4))
ctrl_adv.
send ((adv, 4))@SMC.SMC2Sim.sim_rsp$((func ++ [1])).
run.
assert msg_out
((func, 2))@SMC2.SMC2Dir.Pt2.smc_rsp(pt1, text1)@pt2
ctrl_env.
send pt2@SMC2.SMC2Dir.Pt2.smc_req(text2)$func.
run.
assert msg_out
((func ++ [2; 1], 1))@
KeyExchange.KEI2S.ke_sim_req1
((func ++ [2], 1), (func ++ [2], 2))
@((adv, 8))
ctrl_adv.
send ((adv, 8))@KeyExchange.KEI2S.ke_sim_rsp$(func ++ [2; 1]).
run.
assert msg_out
((func ++ [2; 1], 1))@KeyExchange.KEI2S.ke_sim_req2@((adv, 8))
ctrl_adv.
send ((adv, 8))@KeyExchange.KEI2S.ke_sim_rsp$(func ++ [2; 1]).
run.
assert msg_out
((func ++ [2; 2], 1))@
Forwarding.FwAdv.fw_obs
((func ++ [2], 1), (func ++ [2], 2),
 epdp_port_port_key_univ.`enc
 ((func, 2), (func, 1), epdp_text_key.`enc text2 ^^ (g ^ rand)))
@((adv, 7))
ctrl_adv.
send ((adv, 7))@Forwarding.FwAdv.fw_ok$(func ++ [2; 2]).
run.
assert msg_out
((func, 1))@SMC2.SMC2Dir.Pt1.smc_rsp(text2)@pt1
ctrl_env.
finish.

ideal.
send pt1@SMC2.SMC2Dir.Pt1.smc_req(pt2, text1)$func.
run.
assert msg_out
((func ++ [3], 1))@
Forwarding.FwAdv.fw_obs
((func, 1), (func, 2),
 (epdp_port_port_univ).`enc (pt1, pt2))
@((adv, 2))
ctrl_adv.
send ((adv, 2))@Forwarding.FwAdv.fw_ok$((func ++ [3])).
run.
assert msg_out
((func ++ [4], 1))@
Forwarding.FwAdv.fw_obs((func, 2), (func, 1), [])
@((adv, 3))
ctrl_adv.
send ((adv, 3))@Forwarding.FwAdv.fw_ok$((func ++ [4])).
run.
assert msg_out
((func ++ [1], 1))@SMC.SMC2Sim.sim_req((func, 1), (func, 2))@((adv, 4))
ctrl_adv.
send ((adv, 4))@SMC.SMC2Sim.sim_rsp$(func ++ [1]).
run.
assert msg_out
((func, 2))@SMC2.SMC2Dir.Pt2.smc_rsp(pt1, text1)@pt2
ctrl_env.
send pt2@SMC2.SMC2Dir.Pt2.smc_req(text2)$func.
run.
assert msg_out
((func ++ [2; 1], 1))@
KeyExchange.KEI2S.ke_sim_req1
((func ++ [2], 1), (func ++ [2], 2))
@((adv, 8))
ctrl_adv.
send ((adv, 8))@KeyExchange.KEI2S.ke_sim_rsp$(func ++ [2; 1]).
run.
assert msg_out
((func ++ [2; 1], 1))@KeyExchange.KEI2S.ke_sim_req2@((adv, 8))
ctrl_adv.
send ((adv, 8))@KeyExchange.KEI2S.ke_sim_rsp$(func ++ [2; 1]).
run.
assert msg_out
((func ++ [2; 2], 1))@
Forwarding.FwAdv.fw_obs
((func ++ [2], 1), (func ++ [2], 2),
 epdp_port_port_key_univ.`enc ((func, 2), (func, 1), g ^ rand))
@((adv, 7))
ctrl_adv.
send ((adv, 7))@Forwarding.FwAdv.fw_ok$(func ++ [2; 2]).
run.
assert msg_out
((func, 1))@SMC2.SMC2Dir.Pt1.smc_rsp(text2)@pt1
ctrl_env.
finish.
