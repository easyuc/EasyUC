load SMC2.
functionality
  SMC2.SMC2Real
  (SMC.SMCReal(KeyExchange.KEReal),
   SMC.SMCReal(KeyExchange.KEReal)).
var text1 : text.
var text2 : text.
var pt1 : port.
var pt2 : port.
assumption envport_pt1 : envport func adv pt1.
assumption envport_pt2 : envport func adv pt2.

(* experiment with real world *)
real.
send pt1@SMC2.SMC2Dir.Pt1.smc_req(pt2, text1)$func.
step.
step.
step.
step.
step.
step.
step.
assert msg_out
((func ++ [3], 1))@
Forwarding.FwAdv.fw_obs
((func, 1), (func, 2),
 (epdp_port_port_univ).`enc (pt1, pt2))
@((adv, 2))
ctrl_adv.
send ((adv, 2))@Forwarding.FwAdv.fw_ok@((func ++ [3], 1)).
run.
assert msg_out
((func ++ [4], 1))@
Forwarding.FwAdv.fw_obs((func, 2), (func, 1), [])
@((adv, 3))
ctrl_adv.
send ((adv, 3))@Forwarding.FwAdv.fw_ok@((func ++ [4], 1)).
run.
assert msg_out
((func ++ [1], 1))@SMC.SMCAdv.Pt1.ping@((adv, 5))
ctrl_adv.
send ((adv, 5))@SMC.SMCAdv.Pt1.pong@((func ++ [1], 1)).
run.
assert msg_out
((func ++ [1; 1; 1], 1))@
Forwarding.FwAdv.fw_obs
((func ++ [1; 1], 1), (func ++ [1; 1], 2),
 epdp_port_port_key_univ.`enc ((func ++ [1], 1), (func ++ [1], 2), g ^ rand))
@((adv, 8))
ctrl_adv.
send ((adv, 8))@Forwarding.FwAdv.fw_ok@((func ++ [1;1;1], 1)).
run.
assert msg_out
((func ++ [1; 1; 2], 1))@
Forwarding.FwAdv.fw_obs
((func ++ [1; 1], 2), (func ++ [1; 1], 1), epdp_key_univ.`enc (g ^ rand1))
@((adv, 9))
ctrl_adv.
send ((adv, 9))@Forwarding.FwAdv.fw_ok@((func ++ [1; 1; 2], 1)).
run.
assert msg_out
((func ++ [1; 2], 1))@
Forwarding.FwAdv.fw_obs
((func ++ [1], 1), (func ++ [1], 2),
 epdp_port_port_key_univ.`enc
 ((func, 1), (func, 2), epdp_text_key.`enc text1 ^^ (g ^ rand1 ^ rand)))
@((adv, 6))
ctrl_adv.
send ((adv, 6))@Forwarding.FwAdv.fw_ok@((func ++ [1; 2], 1)).
step.
step.
step.
step.
step.
step.



run.
assert msg_out
((func, 2))@SMC2.SMC2Dir.Pt2.smc_rsp(pt1, text1)@pt2
ctrl_env.
send pt2@SMC2.SMC2Dir.Pt2.smc_req(text2)$func.
run.
assert msg_out
((func ++ [2], 1))@SMC.SMCAdv.Pt1.ping@((adv, 11))
ctrl_adv.
send ((adv, 11))@SMC.SMCAdv.Pt1.pong@((func ++ [2], 1)).
run.
assert msg_out
((func ++ [2; 1; 1], 1))@
Forwarding.FwAdv.fw_obs
((func ++ [2; 1], 1), (func ++ [2; 1], 2),
 epdp_port_port_key_univ.`enc ((func ++ [2], 1), (func ++ [2], 2), g ^ rand2))
@((adv, 14))
ctrl_adv.
send ((adv, 14))@Forwarding.FwAdv.fw_ok@((func ++ [2; 1; 1], 1)).
run.
assert msg_out
((func ++ [2; 1; 2], 1))@
Forwarding.FwAdv.fw_obs
((func ++ [2; 1], 2), (func ++ [2; 1], 1), epdp_key_univ.`enc (g ^ rand3))
@((adv, 15))
ctrl_adv.
send ((adv, 15))@Forwarding.FwAdv.fw_ok@((func ++ [2; 1; 2], 1)).
run.
assert msg_out
((func ++ [2; 2], 1))@
Forwarding.FwAdv.fw_obs
((func ++ [2], 1), (func ++ [2], 2),
 epdp_port_port_key_univ.`enc
 ((func, 2), (func, 1), epdp_text_key.`enc text2 ^^ (g ^ rand3 ^ rand2)))
@((adv, 12))
ctrl_adv.
send ((adv, 12))@Forwarding.FwAdv.fw_ok@((func ++ [2; 2], 1)).
run.
assert msg_out
((func, 1))@SMC2.SMC2Dir.Pt1.smc_rsp(text2)@pt1
ctrl_env.
finish.

(* corresponding experiment with ideal world - with differences noted *)
ideal.
send pt1@SMC2.SMC2Dir.Pt1.smc_req(pt2, text1)$func.
step.
step.
step.
step.
step.
step.
assert msg_out
((func ++ [3], 1))@
Forwarding.FwAdv.fw_obs
((func, 1), (func, 2),
 (epdp_port_port_univ).`enc (pt1, pt2))
@((adv, 2))
ctrl_adv.
send ((adv, 2))@Forwarding.FwAdv.fw_ok@((func ++ [3], 1)).
run.
assert msg_out
((func ++ [4], 1))@
Forwarding.FwAdv.fw_obs((func, 2), (func, 1), [])
@((adv, 3))
ctrl_adv.
send ((adv, 3))@Forwarding.FwAdv.fw_ok@((func ++ [4], 1)).
run.
assert msg_out
((func ++ [1], 1))@SMC.SMCAdv.Pt1.ping@((adv, 5))
ctrl_adv.
send ((adv, 5))@SMC.SMCAdv.Pt1.pong@((func ++ [1], 1)).
run.
assert msg_out
((func ++ [1; 1; 1], 1))@
Forwarding.FwAdv.fw_obs
((func ++ [1; 1], 1), (func ++ [1; 1], 2),
 epdp_port_port_key_univ.`enc ((func ++ [1], 1), (func ++ [1], 2), g ^ rand))
@((adv, 8))
ctrl_adv.
send ((adv, 8))@Forwarding.FwAdv.fw_ok@((func ++ [1;1;1], 1)).
run.
assert msg_out
((func ++ [1; 1; 2], 1))@
Forwarding.FwAdv.fw_obs
((func ++ [1; 1], 2), (func ++ [1; 1], 1), epdp_key_univ.`enc (g ^ rand1))
@((adv, 9))
ctrl_adv.
send ((adv, 9))@Forwarding.FwAdv.fw_ok@((func ++ [1; 1; 2], 1)).
run.
(* here is a difference from the real execution *)
assert msg_out
((func ++ [1; 2], 1))@
Forwarding.FwAdv.fw_obs
((func ++ [1], 1), (func ++ [1], 2),
 epdp_port_port_key_univ.`enc ((func, 1), (func, 2), g ^ rand2))
@((adv, 6))
ctrl_adv.
(* in contrast, the real assertion was:
assert msg_out
((func ++ [1; 2], 1))@
Forwarding.FwAdv.fw_obs
((func ++ [1], 1), (func ++ [1], 2),
 epdp_port_port_key_univ.`enc
 ((func, 1), (func, 2), epdp_text_key.`enc text1 ^^ (g ^ rand1 ^ rand)))
@((adv, 6))
ctrl_adv.
*)
send ((adv, 6))@Forwarding.FwAdv.fw_ok@((func ++ [1; 2], 1)).
run.
assert msg_out
((func, 2))@SMC2.SMC2Dir.Pt2.smc_rsp(pt1, text1)@pt2
ctrl_env.
send pt2@SMC2.SMC2Dir.Pt2.smc_req(text2)$func.
run.
assert msg_out
((func ++ [2], 1))@SMC.SMCAdv.Pt1.ping@((adv, 11))
ctrl_adv.
send ((adv, 11))@SMC.SMCAdv.Pt1.pong@((func ++ [2], 1)).
run.
assert msg_out
((func ++ [2; 1; 1], 1))@
Forwarding.FwAdv.fw_obs
((func ++ [2; 1], 1), (func ++ [2; 1], 2),
 epdp_port_port_key_univ.`enc ((func ++ [2], 1), (func ++ [2], 2), g ^ rand3))
@((adv, 14))
ctrl_adv.
(* real assertion has rand2 *)
send ((adv, 14))@Forwarding.FwAdv.fw_ok@((func ++ [2; 1; 1], 1)).
run.
assert msg_out
((func ++ [2; 1; 2], 1))@
Forwarding.FwAdv.fw_obs
((func ++ [2; 1], 2), (func ++ [2; 1], 1), epdp_key_univ.`enc (g ^ rand4))
@((adv, 15))
ctrl_adv.
send ((adv, 15))@Forwarding.FwAdv.fw_ok@((func ++ [2; 1; 2], 1)).
run.
assert msg_out
((func ++ [2; 2], 1))@
Forwarding.FwAdv.fw_obs
((func ++ [2], 1), (func ++ [2], 2),
 epdp_port_port_key_univ.`enc ((func, 2), (func, 1), g ^ rand5))
@((adv, 12))
ctrl_adv.
(* here was the real assertion:
assert msg_out
((func ++ [2; 2], 1))@
Forwarding.FwAdv.fw_obs
((func ++ [2], 1), (func ++ [2], 2),
 epdp_port_port_key_univ.`enc
 ((func, 2), (func, 1), epdp_text_key.`enc text2 ^^ (g ^ rand3 ^ rand2)))
@((adv, 12))
ctrl_adv.
*)
send ((adv, 12))@Forwarding.FwAdv.fw_ok@((func ++ [2; 2], 1)).
run.
assert msg_out
((func, 1))@SMC2.SMC2Dir.Pt1.smc_rsp(text2)@pt1
ctrl_env.
finish.

